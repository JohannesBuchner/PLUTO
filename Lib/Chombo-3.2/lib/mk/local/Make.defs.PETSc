#
# Chombo "local" architecture file that leverages PETSc configuration.
# No need to modify this file if a working PETSc is avalible in 
# PETSC_DIR & PETSC_ARCH enviromental variables.
#
# Copy this file to:
#
#    Chombo/lib/mk/Make.defs.local
#
# This file is include'd from Make.defs after:
#    Make.defs.defaults
# and before:
#    Make.defs.<hostname> Make.defs.config Make.rules

makefiles+=Make.defs.local

################################################################

# Chombo configuration variables that affect filenames:

#  DIM          :(2,3) number of dimensions in PDEs
#  DEBUG        :(TRUE,FALSE) compile with symbol table or not
#  OPT          :(TRUE,HIGH,FALSE) optimize, high optimize, or not
#  PRECISION    :(FLOAT,DOUBLE) size of floating point variables
#  PROFILE      :(TRUE,FALSE) compile for performance profiling or not
#  CXX          : command to compile/link C++ code
#  FC           : command to compile Fortran code
#  MPI          :(TRUE,FALSE) compile for parallel if TRUE, else serial
#  MPICXX       : command to compile/link C++ code in parallel
#  OBJMODEL     : special config for non-default compiler mode
#  XTRACONFIG   : user-defined special config

# Variables for optional features that don't affect filenames:

#  USE_64          : if TRUE, use 64bit pointers on systems where 32bits is the default
#  USE_COMPLEX     : if TRUE, enable the 'Complex' type
#                    (default is TRUE, disable only if compiler doesn't allow it)
#  USE_EB          : if TRUE, build Chombo Embedded Boundary code
#  USE_CCSE        : if TRUE, build CCSE mglib and supporting code into one lib
#  USE_HDF         : if TRUE, use the HDF5 library
#   HDFINCFLAGS    : cpp options (-I*) for HDF5 include files
#   HDFLIBFLAGS    : link options (-L* -l*) for HDF5 library files
#   HDFMPIINCFLAGS : cpp options (-I*) for parallel HDF5 include files
#   HDFMPILIBFLAGS : link options (-L* -l*) for parallel HDF5 library files
#  USE_MF          : if TRUE, build Chombo MultiFluid code (requires USE_EB=TRUE)
#  USE_MT          : if TRUE, enable Chombo memory tracking
#  USE_SETVAL      : (TRUE,FALSE) use setVal to initialize all BaseFab<Real>
#  USE_PETSC       : (TRUE,FALSE) use PETSc

# These variables are system-dependent but usually dont have to be changed:

#  CH_AR       : command to add object files to a library file
#  CH_CPP      : command to run the C preprocessor on Fortran files
#  DOXYGEN  : command to run the 'doyxgen' program
#  LD       : command to run the linker (default: use $CXX or $MPICXX, as appropriate)
#  PERL     : command to run perl
#  RANLIB   : command to post-process a library archive for random access

# Compiler variables.  The 'Make.rules' file chooses whether to use
# the 'opt' flags or the 'dbg' flags.  The 'prof' flags are added if
# PROFILE=TRUE.
#
#  cppdbgflags : debug options for the C-preprocessor (both C++ and Fortran)
#  cppoptflags : optimization options for the C-preprocessor (")
#  cxxcppflags : C-preprocessor flags for C++ compiles only
#  cxxdbgflags : debug options for the C++ and MPIC++ compilers
#  cxxoptflags : optimization options for the C++ and MPIC++ compilers
#  cxxprofflags: profiling options for the C++ and MPIC++ compilers
#  fcppflags   : C-preprocessor flags for Fortran compiles only
#  fdbgflags   : debug options for the Fortran compiler
#  foptflags   : optimization options for the Fortran compiler
#  fprofflags  : profiling options for the Fortran compiler
#  lddbgflags  : debug options for the linker
#  ldoptflags  : optimization options for the linker
#  ldprofflags : profiling options for the linker
#  flibflags   : options for the linker to specify the Fortran libraries
#                (this usually is needed only when mixing C++ and
#                 Fortran compilers from different vendors)
#  syslibflags : extra linker options to get libraries needed on this system
#
# Notes:
# 1) The linker command always uses the CXX options in addition to its own variables,
#    so options that are common to both do not need to be repeated in the ld*flags vars
#    (e.g. -g for debugging, or -pg for profiling)
# 2) The compiler options can be set on the command line using the
#    variables: CPPFLAGS CXXFLAGS FFLAGS LDFLAGS.
#    These variables supercede any settings in the makefiles.
# 3) The GNUmakefile in "Chombo/lib" will check these variables and complain if
#    they have invalid values.  On systems that don't have MPI installed, the
#    various MPI variables should not be set (or should be set to empty strings)
#    to prevent the checker from complaining.

#begin  -- dont change this line

## Override the default values here
# this is/was in Make.defs.  Get PETSc configuration vars
include $(PETSC_DIR)/conf/variables
petscincflags = $(PETSC_CC_INCLUDES)
petsclibflags = $(PETSC_KSP_LIB) 

petscconf_h := $(shell cat $(PETSC_DIR)/$(PETSC_ARCH)/include/petscconf.h)
petsc_have_feature = $(if $(filter PETSC_HAVE_$(1),$(petscconf_h)),1,)

MPI := $(call petsc_have_feature,MPIUNI)
HAVE_HDF5   := $(call petsc_have_feature,HDF5)

ifeq ($(MPI),1)
MPI = FALSE
else
MPI = TRUE
endif
ifeq ($(HAVE_HDF5),1)
USE_HDF5 = TRUE
else
USE_HDF5 = FALSE
endif

## Note: don't set the MPICXX variable if you don't have MPI installed
#MPICXX        = /opt/local/bin/mpicxx -fPIC -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -g3 -fno-inline 
MPICXX        = ${PCC} ${PCC_FLAGS} ${CFLAGS} ${CCPPFLAGS}

## Optional features
USE_PETSC = TRUE

ifeq ($(USE_HDF5),TRUE)
HDFINCFLAGS   = ${HDF5_INCLUDE}
HDFLIBFLAGS   = ${HDF5_LIB}
## Note: don't set the HDFMPI* variables if you don't have parallel HDF installed
HDFMPIINCFLAGS = ${HDF5_INCLUDE}
HDFMPILIBFLAGS = ${HDF5_LIB}
endif
$(warning HDFLIBFLAGS =  $(HDFLIBFLAGS) )
$(warning HDF5_LIB =  $(HDF5_LIB) )

# ${CPP} does not work
CH_CPP        = /usr/bin/cpp -E
cxxdbgflags   = ${CC_FLAGS}
cxxoptflags   = ${CC_FLAGS}
fdbgflags     = ${FC_FLAGS}
foptflags     = ${FC_FLAGS}

#XTRALDFLAGS += -Wl,-zmuldefs

#end  -- dont change this line
