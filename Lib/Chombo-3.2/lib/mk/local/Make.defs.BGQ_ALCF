# Copy this file to:
#
#    Chombo/lib/mk/Make.defs.local
#
# before modifying it.
#
# Use this file to set Chombo makefile variables for the local
# installation.  To set variables for just a single computer
# create a file named:
#
#    Chombo/lib/mk/local/Make.defs.<hostname>
#
# where <hostname> is the value of `uname -n` (or `hostname`, if uname doesn't work)

# The default values for the main variables here are in:
#
#    Chombo/lib/mk/Make.defs.defaults

# This file is include'd from Make.defs after:
#    Make.defs.defaults
# and before:
#    Make.defs.<hostname> Make.defs.config Make.rules

makefiles+=Make.defs.local

################################################################

# Chombo configuration variables that affect filenames:

#  DIM          :(2,3) number of dimensions in PDEs
#  DEBUG        :(TRUE,FALSE) compile with symbol table or not
#  OPT          :(TRUE,HIGH,FALSE) optimize, high optimize, or not
#  PRECISION    :(FLOAT,DOUBLE) size of floating point variables
#  PROFILE      :(TRUE,FALSE) compile for performance profiling or not
#  CXX          : command to compile/link C++ code
#  FC           : command to compile Fortran code
#  MPI          :(TRUE,FALSE) compile for parallel if TRUE, else serial
#  MPICXX       : command to compile/link C++ code in parallel
#  OBJMODEL     : special config for non-default compiler mode
#  XTRACONFIG   : user-defined special config

# Variables for optional features that don't affect filenames:

#  USE_64          : if TRUE, use 64bit pointers on systems where 32bits is the default
#  USE_COMPLEX     : if TRUE, enable the 'Complex' type
#                    (default is TRUE, disable only if compiler doesn't allow it)
#  USE_EB          : if TRUE, build Chombo Embedded Boundary code
#  USE_CCSE        : if TRUE, build CCSE mglib and supporting code into one lib
#  USE_HDF         : if TRUE, use the HDF5 library
#   HDFINCFLAGS    : cpp options (-I*) for HDF5 include files
#   HDFLIBFLAGS    : link options (-L* -l*) for HDF5 library files
#   HDFMPIINCFLAGS : cpp options (-I*) for parallel HDF5 include files
#   HDFMPILIBFLAGS : link options (-L* -l*) for parallel HDF5 library files
#  USE_MF          : if TRUE, build Chombo MultiFluid code (requires USE_EB=TRUE)
#  USE_MT          : if TRUE, enable Chombo memory tracking
#  USE_SETVAL      : (TRUE,FALSE) use setVal to initialize all BaseFab<Real>

# These variables are system-dependent but usually dont have to be changed:

#  AR       : command to add object files to a library file
#  CPP      : command to run the C preprocessor on Fortran files
#  DOXYGEN  : command to run the 'doyxgen' program
#  LD       : command to run the linker (default: use $CXX or $MPICXX, as appropriate)
#  PERL     : command to run perl
#  RANLIB   : command to post-process a library archive for random access

# Compiler variables.  The 'Make.rules' file chooses whether to use
# the 'opt' flags or the 'dbg' flags.  The 'prof' flags are added if
# PROFILE=TRUE.
#
#  cppdbgflags : debug options for the C-preprocessor (both C++ and Fortran)
#  cppoptflags : optimization options for the C-preprocessor (")
#  cxxcppflags : C-preprocessor flags for C++ compiles only
#  cxxdbgflags : debug options for the C++ and MPIC++ compilers
#  cxxoptflags : optimization options for the C++ and MPIC++ compilers
#  cxxprofflags: profiling options for the C++ and MPIC++ compilers
#  fcppflags   : C-preprocessor flags for Fortran compiles only
#  fdbgflags   : debug options for the Fortran compiler
#  foptflags   : optimization options for the Fortran compiler
#  fprofflags  : profiling options for the Fortran compiler
#  lddbgflags  : debug options for the linker
#  ldoptflags  : optimization options for the linker
#  ldprofflags : profiling options for the linker
#  flibflags   : options for the linker to specify the Fortran libraries
#                (this usually is needed only when mixing C++ and
#                 Fortran compilers from different vendors)
#  syslibflags : extra linker options to get libraries needed on this system
#
# Notes:
# 1) The linker command always uses the CXX options in addition to its own variables,
#    so options that are common to both do not need to be repeated in the ld*flags vars
#    (e.g. -g for debugging, or -pg for profiling)
# 2) The compiler options can be set on the command line using the
#    variables: CPPFLAGS CXXFLAGS FFLAGS LDFLAGS.
#    These variables supercede any settings in the makefiles.
# 3) The GNUmakefile in "Chombo/lib" will check these variables and complain if
#    they have invalid values.  On systems that don't have MPI installed, the
#    various MPI variables should not be set (or should be set to empty strings)
#    to prevent the checker from complaining.

#begin  -- dont change this line

## Override the default values here

## Configuration variables
#DIM           =
#DEBUG         =
#OPT           =
#PRECISION     =
#PROFILE       =
#  this variable is ignored, but needs to be here for Chombo Makefiles.
# you can't actually build a serial version of Chombo.
CXX           = mpixlcxx_r
FC            = mpixlf77_r -qnosave
MPI           = TRUE
MPICXX        = mpixlcxx_r
#OBJMODEL      =
#XTRACONFIG    =
## Optional features
#USE_64        =
#USE_COMPLEX   =
#USE_EB        =
#USE_CCSE      =
USE_HDF       = TRUE
HDF5_HOME      = /soft/libraries/hdf5/1.8.10/cnk-xl/current

HDFINCFLAGS   = -I$(HDF5_HOME)/include 
HDFLIBFLAGS   = -L$(HDF5_HOME)/lib -lhdf5 -lhdf5_fortran -lhdf5_hl -L/soft/libraries/alcf/current/xl/ZLIB/lib -lz
HDFMPIINCFLAGS   = -I$(HDF5_HOME)/include 
HDFMPILIBFLAGS   = -L$(HDF5_HOME)/lib -lhdf5 -lhdf5_fortran -lhdf5_hl -L/soft/libraries/alcf/current/xl/ZLIB/lib -lz

#USE_MF        =
#USE_MT        =
#USE_SETVAL    =
#AR            =
#CPP = $(CXX) -E -C -qnoppline -qsourcetype=c -qsuppress=1506-234
#DOXYGEN       =
#LD            =
#PERL          =
#RANLIB        =
#cppdbgflags   =
#cppoptflags   =
#cxxcppflags   =
cxxdbgflags   = -g  -qsuppress=1540-1091
cxxoptflags   = -O3 -g -qsuppress=1540-1091
#cxxprofflags  =
#fcppflags     =
fdbgflags     = -g -C -qextname -qfixed
foptflags     = -O3 -g -qextname -qfixed
#fprofflags    =
#flibflags     = -L$(IBM_FCMP_DIR)/bglib64 -lxlopt -lxl -lxlf90_r -lxlfmath /home/morozov/lib/libmpihpm.a /bgsys/drivers/ppcfloor/bgpm/lib/libbgpm.a
#flibflags     = -L$(IBM_FCMP_DIR)/bglib64 -lxlopt -lxl -lxlf90_r -lxlfmath /home/morozov/lib/libmpihpm.a /bgsys/drivers/ppcfloor/bgpm/lib/libbgpm.a /soft/libraries/alcf/current/xl/LAPACK/lib/liblapack.a /soft/libraries/alcf/current/xl/BLAS/lib/libblas.a
flibflags     = /soft/libraries/alcf/current/xl/LAPACK/lib/liblapack.a /soft/libraries/essl/current/essl/5.1/lib64/libesslbg.a -L/soft/compilers/ibmcmp-feb2014/xlf/bg/14.1/bglib64 -lxlopt -lxl -lxlf90_r -lxlfmath /home/morozov/lib/libmpihpm.a /bgsys/drivers/ppcfloor/bgpm/lib/libbgpm.a
#flibflags     = -lbgxlfmath
#lddbgflags    =
#ldoptflags    =
#ldprofflags   =
#syslibflags   = 
#xtraldflags += -Wl,-zmuldefs
#cppcallsfort :=
CH_CPP = $(CXX) -E -C -qnoppline -qsourcetype=c -qsuppress=1540-1091

XTRALDFLAGS += -Wl,-zmuldefs

#petscincflags =  -I/home/adams/petsc/include -I/home/adams/petsc/arch-bgq-ibm-opt-64idx/include -I/gpfs/mira-home/adams/petsc/arch-bgq-ibm-opt-64idx/include
#petsclibflags = -L/home/adams/petsc/arch-bgq-ibm-opt-64idx/lib  -lpetsc -Wl,-rpath,/gpfs/mira-home/adams/petsc/arch-bgq-ibm-opt-64idx/lib -L/gpfs/mira-home/adams/petsc/arch-bgq-ibm-opt-64idx/lib -lHYPRE -L$(HDF5_HOME)/lib -lhdf5 -lhdf5_fortran -lhdf5_hl -L/soft/libraries/alcf/current/xl/ZLIB/lib -lz 

#PETSC_DIR=/soft/libraries/petsc/3.3-p6/xl-opt-64idx
#PETSC_DIR=/gpfs/mira-fs0/projects/Chombo_Crunch/petsc
#PETSC_DIR=/home/adams/petsc
#PETSC_ARCH=arch-bgq-ibm-opt-64idx

IBMCMP_ROOT=/soft/compilers/ibmcmp-feb2014
#BLAS_LIB=/soft/libraries/alcf/current/xl/BLAS/lib
BLAS_LIB=/soft/libraries/essl/current/essl/5.1/lib64/libesslbg.a
LAPACK_LIB=/soft/libraries/alcf/current/xl/LAPACK/lib
XLF_LIB=${IBMCMP_ROOT}/xlf/bg/14.1/bglib64
XLSMP_LIB=${IBMCMP_ROOT}/xlsmp/bg/3.1/bglib64export
XLMASS_LIB=${IBMCMP_ROOT}/xlmass/bg/7.3/bglib64
MATH_LIBS=-L${XLMASS_LIB} -lmassv -lmass -L${LAPACK_LIB} -llapack -L${BLAS_LIB} -lesslbg -L${XLF_LIB} -lxlf90_r -L${XLSMP_LIB} -lxlsmp -ldl  -lxlopt -lxlfmath -lxl -Wl,--allow-multiple-definition

LIBS=${LIBS} ${MATH_LIBS}

#end  -- dont change this line
