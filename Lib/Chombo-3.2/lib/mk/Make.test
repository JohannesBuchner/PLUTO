### This file should be 'include'd in the GNUmakefile for a Chombo test
### directory _after_ the 'ebase' and 'LibNames' variables are defined.

## Variables required:
##   ebase: names of files containing main programs to build (without extension)
##   CHOMBO_HOME: path to the "Chombo/lib" directory (absolute or relative from the 
##                current "test" subdir
##   LibNames: names of Chombo libraries needed by this program, in order 
##   of search. Note that there is no need to include BaseTools, because it 
##   is automatically appended to LibNames

include $(CHOMBO_HOME)/mk/Make.defs

# The following gibberish adds object files from any src_dirs variable in the 
# unit test make file.
# define configuration variables
#[NOTE: Make.rules also includes this file, but we need it here first.]
include $(CHOMBO_HOME)/mk/Make.defs.config

# names of subdirectories used for compilation files
_object_prefix  = o/$(config)/
_fortran_prefix = f/$(config)/
_depends_prefix = d/$(config)/

# get all the source files in this application
#[NOTE: src_extensions and vpath should match $(src_wildcard) in Make.rules;
#       they are defined here explicitly because Make.rules isn't loaded. <dbs>]
src_extensions := .cpp .ChF .F .f .c
vpath %.cpp $(src_dirs)
vpath %.ChF $(src_dirs)
vpath %.F   $(src_dirs)
vpath %.f   $(src_dirs)
vpath %.c   $(src_dirs)

# First off, set the default location of the main source file
ifeq ($(base_dir),)
  base_dir = .
endif

# Generate a list of source files in all the other source directories
ifneq ($(src_dirs),)
  _srcs := $(notdir $(wildcard $(foreach ext,$(src_extensions),$(addsuffix /*$(ext),$(src_dirs)))))
endif

# the list of dependency files that Make.rules will need to build, including files in $base_dir
depends := $(addprefix $(_depends_prefix),$(foreach _ext,$(src_extensions),$(subst $(_ext),.d,$(filter %$(_ext),$(_srcs)))))
_base_srcs := $(notdir $(wildcard $(foreach ext,$(src_extensions),$(addsuffix /*$(ext),$(base_dir)))))
depends += $(addprefix $(_depends_prefix),$(foreach _ext,$(src_extensions),$(subst $(_ext),.d,$(filter %$(_ext),$(_base_srcs)))))

# the list of non-base object files that Make.rules will need to build
objects := $(addprefix $(_object_prefix),$(foreach _ext,$(src_extensions),$(subst $(_ext),.o,$(filter %$(_ext),$(_srcs)))))
# if there is one name in $(ebase) but other source files in $(base_dir), build them too
ifeq ($(words $(ebase)),1)
  _base_objs := $(addprefix $(_object_prefix),$(foreach _ext,$(src_extensions),$(subst $(_ext),.o,$(filter %$(_ext),$(_base_srcs)))))
  # the patsubst is here because it provides a way of stripping out trailing
  # space characters which may have infiltrated ebase. This protects against 
  # a class of _really_ hard to find make problems (DFM 10-9-09)
  objects += $(filter-out $(patsubst %,o/$(config)/%,$(ebase)).o,$(_base_objs))
endif

# Don't let Make.rules name its own objects -- we've done that above.
AUTONAME=FALSE

# src_dirs object generation gibberish ends here.

# tell Make.rules to search source directories for include files
appcppflags := -I$(base_dir) $(addprefix -I,$(src_dirs))

.PHONY: usage all test run

usage:
	@echo "This makefile supports targets:"
	@echo "     all test run $(ebase) usage "

# The `all-test', `run-only', `test-only' and $(ebase) targets are defined in `Make.rules'

all: all-test

test: test-only

# tell program to run quietly unless user overrides on the command line
VERBOSE = -q

run: run-only

# -------------------------------
#  The CxxTest unit testing tool
# -------------------------------
CXXTEST_VERSION := 3.10.1
CXXTEST_DIR := cxxtest
CXXTEST_DIST := cxxtest-$(CXXTEST_VERSION).tar.gz
CXXTEST_URL := http://cxxtest.tigris.org/files/documents/6421/43281/$(CXXTEST_DIST)

# This rule goes and downloads CxxTest if it doesn't exist.
install-cxxtest:
	@if [ ! -x $(CHOMBO_HOME)/util/$(CXXTEST_DIR)/cxxtestgen.py ]; then \
	echo "Downloading $(CXXTEST_URL)..."; \
	cd $(CHOMBO_HOME)/util; \
	sh $(CHOMBO_HOME)/util/retrieve.sh $(CXXTEST_URL) $(CXXTEST_DIST); \
	echo "Unpacking $(CXXTEST_DIST) to $(CHOMBO_HOME)/util/$(CXXTEST_DIR)..."; \
	cd $(CHOMBO_HOME)/util; \
	tar xzvf $(CXXTEST_DIST); \
	else \
	echo "cxxtest is already installed."; \
  fi

# Rule to generate a test harness from a (CxxTest) header file.
test%.cpp: test%.H #$(CHOMBO_HOME)/util/$(CXXTEST_DIR)
	@if [ ! "`grep CxxTest $<`" = "" ]; then \
	if [ -x $(CHOMBO_HOME)/util/$(CXXTEST_DIR)/cxxtestgen.py ]; then \
	echo "Generating $@ from $<..."; \
	python $(CHOMBO_HOME)/util/$(CXXTEST_DIR)/cxxtestgen.py --runner=ChomboPrinter --template=$(CHOMBO_HOME)/util/$(CXXTEST_DIR)/chombo.tpl -o $@ $<; \
  else \
	echo "Generating empty test body $@ from $<..."; \
	echo "int main() { return 0; }" > $@; \
	fi; \
  fi

include $(CHOMBO_HOME)/mk/Make.rules

# Make sure that the header files are accessible if they exist.
# Also include any headers in any of the directories mentioned
# in src_dirs.
ifneq ($(wildcard $(CHOMBO_HOME)/util/$(CXXTEST_DIR)), )
  CPPFLAGS += -I$(CHOMBO_HOME)/util/$(CXXTEST_DIR)
endif

# If we're building the Python parser, we need to link against libld
# (unless the platform doesn't support dynamic loading, in which 
# case we should use explicitly static linking).
# FIXME: Not hardened yet. -JNJ
ifneq ($(findstring PyParse,$(LibNames)), )
  LDFLAGS += -ldl
endif

