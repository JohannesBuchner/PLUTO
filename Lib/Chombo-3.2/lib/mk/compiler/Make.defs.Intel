### This is a compiler-specific definitions file for Intel compilers (icc/ifc)

## It sets values for the defaults variables ($def*), which will be used
## if the calling makefile doesn't set the corresponding variables.
## The corresponding variables are the ones without the "def" prefix.

## Defaults variables:
##  defcxxcomflags = C++ compiler/linker options
##  defcxxdbgflags : for C++ compiling and linking when DEBUG=TRUE
##  defcxxoptflags : for C++ compiling and linking when OPT=TRUE or HIGH
##  defcxxprofflags: for C++ compiling and linking when PROFILE=TRUE
##  deffcomflags   = Fortran compiler options
##  deffdbgflags   : for Fortran compiling when DEBUG=TRUE
##  deffoptflags   : for Fortran compiling when OPT=TRUE or HIGH
##  deffprofflags  : for Fortran compiling when PROFILE=TRUE
##  defflibflags   : library options needed to link the Fortran code
##  defldflags     : options for linking
##  cppcallsfort   : preprocessor macro as used in FORT_PROTO.H to specify
##                    how the C++ code should construct names for calling Fortran
## Notes:
##  The Intel C/C++ and Fortran compilers set the preprocessor macros:
##   __INTEL_COMPILER == (int) compiler version number
##   __i386           == (1) Intel ia32 x86 processors
##   __ia64           == (1) Intel Itanium processors
##  The C/C++ compiler sets:
##   __ICC, __ECC     == (?) ix86, itanium architecture
##  The Fortran compiler sets:
##   __IFC, _EFC      == (?) ix86, itanium architecture
##  Use 'icc -E -dM' to see all predefined macros.
##
##  Versions tried: 9,10,11
##
##  The C++ compiler doesn't handle the GCC v4 <cmath> header file.
##  To avoid this, force the compiler to not use gcc headers in this case.

makefiles+=compiler/Make.defs.Intel

cxxname := $(notdir $(firstword $(CXX)))
fname   := $(notdir $(firstword $(FC)))

# Itanium compilers have different names
ifeq ($(cxxname),ecc)
  cxxname := icc
endif
ifeq ($(fname),efc)
  fname := ifc
endif

ifeq ($(fname),ifort)
  fname := ifc
endif
ifeq ($(cxxname),icpc)
  cxxname := icc
endif

getcompilerversion := $(CHOMBO_HOME)/mk/compilerVersion.pl

ifeq ($(cxxname),icc)
  _iccversion := $(subst ., ,$(shell $(getcompilerversion) $(CXX)))

  ifeq ($(_iccversion),)
    $(error unknown Intel C++ compiler version [$(shell $(CXX) -V)])
  endif

  _iccmajorver:= $(word 1,$(_iccversion))
  _iccminorver:= $(word 2,$(_iccversion))

  #$(warning "CXX=$(CXX) iccversion=$(_iccversion)  major=$(_iccmajorver)  minor=$(_iccminorver)")

  # '-EP' is different from '-E -P' in icc	
  # -C disable stripping out C++ comments, which are valid code in Fortran
  CH_CPP = $(CXX) -EP -C

  ifeq (0,$(shell test $(_iccmajorver) -ge 10 ; echo $$?))
    # disable warnings: 239 is underflow in floating-point constant
    #                   654 is overloaded virtual function
    #                  1125 is overloaded function is hidden -- virtual function override intended?
    #                  1476 is "field uses tail padding of a base class"
    #                  1572 is floating point equality tests are unreliable
    #               25,1345 turn off warnings about strings which arent helpful when applied to Fortran code
    # for at least version 11, must use -diag-disable in place of -wd
    # have not verified if all of the above warning numbers mean the same thing for newer intel version
    _disable_warnings = -diag-disable 1125,654,239,1476,1572
  else
    # version 8.0 does not know about warning number 1572, but it is there starting with 8.1
    #  for now, just don't use it unless v >= 10
    #_disable_warnings = -wd 1125,654,239,1476,1572
    _disable_warnings = -wd 1125,654,239,1476
  endif

  # icpc version 11.0 on Davinci (Itanium) doesn't seem to know about this flag, so will comment (ndk)
  #ifeq (0,$(shell test $(_iccmajorver) -ge 11 ; echo $$?))
  #  # -vec-report0 turns off the output "remark: LOOP WAS VECTORIZED."
  #  _disable_warnings += -vec-report0
  #endif

  defcxxcomflags += $(_disable_warnings)

  defcxxdbgflags = -g -C
  # compiler core dumps on Itanium at -O3 before v8
  ifeq ($(arch),ia64)
    ifeq (0,$(shell test $(_iccmajorver) -le 7 ; echo $$?))
      defcxxoptflags = -ip -unroll
    endif
    ifeq (0,$(shell test $(_iccmajorver) -ge 10 ; echo $$?))
      defcxxoptflags = -O2
      #defcxxoptflags = -O2 -ip -unroll
    endif

  else
    defcxxoptflags = -O3 -ip -unroll
    ifneq ($(findstring athlon,$(unamea)),athlon)
      # vectorize for Pentiums but not EMT64
      ifeq ($(findstring i686,$(arch)),i686)
        # PIII and later
        defcxxoptflags += -tpp6 -xK
      endif
    endif
  endif

  # new v9 options
  # -debug * puts more (hopefully useful) debug info in object files
  # -debug extended  is a nice idea, but gets an error
  # -sox saves compiler version and compile options in the object file (needed?)
  # -ftrapuv initializes stack variables to a flag value
  # disable warnings:
  ifeq (0,$(shell test $(_iccmajorver) -ge 9 ; echo $$?))
    defcxxcomflags += -sox
    defcxxdbgflags += -debug -ftrapuv -Wno-unknown-pragmas
    #defcxxoptflags += 
  endif

  # memory tracking doesn't work for the AMRTimeDependent test
  #USE_MT = FALSE
  # let's try now
  USE_MT = TRUE

  # try commenting this out -- NDK
  # icpc in v8.[01] objects to the use of the variable name "__interface" in one of the
  # glibc headers (netinet/in.h) that comes with SuSE v9. 
  #ifeq ($(_iccmajorver),8)
  #  defcxxcomflags += -D__interface=interfacearg
  #endif

  # try commenting this out -- NDK
  # v9 and gcc v4 headers dont mix (<cmath> wont compile)
  # so force icpc to use only its own headers, not gcc's
  #ifeq (0,$(shell test $(_iccmajorver) -ge 9 ; echo $$?))
  #  _gccmajorver:= $(word 1,$(subst ., ,$(shell gcc -dumpversion)))
  #  ifeq ($(_gccmajorver),4)
  #    defcxxcomflags += -cxxlib-icc
  #  endif
  #endif

endif

ifeq ($(fname),ifc)
  #_ifcversion := $(subst ., ,$(shell $(FC) -V 2>&1 | awk '/^Intel.*Version/{if($$7~/Version/){print $$8};if($$8~/Version/){print $$9}}'))
  #_ifcversion := $(subst ., ,$(shell $(FC) --version))
  _ifcversion := $(subst ., ,$(shell $(getcompilerversion) $(FC)))

  ifeq ($(_ifcversion),)
    $(error unknown Intel Fortran compiler version [$(shell $(FC) -V)])
  endif
  _ifcmajorver:= $(word 1,$(_ifcversion))
  _ifcminorver:= $(word 2,$(_ifcversion))

  #$(warning "FC=$(FC) ifcversion=$(_ifcversion)  major=$(_ifcmajorver)  minor=$(_ifcminorver)")

  #ifeq ($(_ifcmajorver),8)
  #  # use default CH_CPP (which should be a C/C++ compiler)
  #else
  #  # work-around for bug in the ifc preprocessor: force fixed-format source
  #  CH_CPP = $(FC) -EP -FI -132
  #endif

  # set a cpp macro to indicate we're compiling with the ifc compiler
  defcppcomflags += -DCH_IFC

  # -u makes "implicit none" the default
  ifeq (0,$(shell test $(_ifcmajorver) -le 11 ; echo $$?))
    # -w95 gets rid of some annoying warnings about REAL*8, etc
    deffcomflags = -w95 -FI -u
  else
    deffcomflags = -FI -u
  endif
  deffdbgflags = -g
  deffoptflags = -O3
  ifneq ($(findstring athlon,$(unamea)),athlon)
    # vectorize for Pentium III and later except on EMT versions
    ifeq ($(findstring i686,$(arch)),i686)
      deffoptflags += -tpp6 -xK
    endif
  endif

  # run-time checking causes segfaults on compilers older than v7
  # TJL - Change: moving from csh to sh...
  # ifeq (0,$(shell test $(_ifcmajorver) -ge 7 ; echo $$status))
  ifeq (0,$(shell test $(_ifcmajorver) -ge 7 ; echo $$?))
    # not all run-time checks are implemented on v8.0, 8.1
    ifeq ($(_ifcmajorver),8)
      # -CS to check array shapes and -CA to check points not implemented
      deffdbgflags += -CB -CU -CV
    else
      # do all run-time checks
      deffdbgflags += -C
    endif
  endif

  # new v9 options
  # -debug * puts more (hopefully useful) debug info in object files
  # -debug extended  is a nice idea, but gets an error
  # -sox saves compiler version and compile options in the object file
  # -ftrapuv initializes stack variables to a flag value
  ifeq (0,$(shell test $(_ifcmajorver) -ge 9 ; echo $$?))
    deffcomflags += -sox
    deffdbgflags += -debug -ftrapuv
    deffoptflags +=
  endif


  # icpc version 11.0 on Davinci (Itanium) doesn't seem to know about this flag, so will comment (ndk)
  #ifeq (0,$(shell test $(_ifcmajorver) -ge 11 ; echo $$?))
    # -vec-report0 turns off the output "remark: LOOP WAS VECTORIZED."
    #deffcomflags += -vec-report0
  #endif

  # libraries changed in version 8, again in v9
  ifeq (0,$(shell test $(_ifcmajorver) -ge 8 ; echo $$?))
    _ifclibflags = -lifport -lifcore
    ifeq ($(_ifcmajorver),8)
      _ifclibflags += -limf -lcxa -lirc -lunwind
    endif
  else
    # NOTE: CEPCF90 is the C-compatible I/O library, cxa is the C library
    #       needed by CEPCF90, cprts is needed by cxa, and PEPCF90 has
    #       getarg(), iargc() and exit().
    _ifclibflags = -lCEPCF90 -lF90  -lintrins -lcxa -lcprts -lPEPCF90
  endif

  # if using ifc without icc, or if the compilers are in different
  # directories, specify the library directory explicitly
  _ifcdir := $(dir $(shell which $(firstword $(FC))))
  _cxxdir := $(dir $(shell which $(firstword $(CXX))))
  ifeq ($(_ifcdir),$(_cxxdir))
    defflibflags := $(_ifclibflags)
  else
    defflibflags := -L$(_ifcdir)../lib $(_ifclibflags)
    # g++ links the dynamic libraries, not the static ones, so to run mixed
    # programs you must have the Intel lib dir in the loader search path
    ## NOTE: this will only help when running programs using 'make'.  If you run
    ##       a program directly from the command line, you'll need this in your
    ##       environment.
    export LD_LIBRARY_PATH := $(_ifcdir)../lib:$(LD_LIBRARY_PATH)
  endif

  # ifc v7.x and earlier will abort with an internal error if compiling
  # with optimization and the output object file path has a "+" in it,
  # so you have to use an alias for "g++" but you must also set cxxname=g++
  # (or whatever) on the command line to make sure the makefiles know what
  # compiler it is
  ifeq ($(DEBUG),FALSE)
    # TJL - Change: moving from csh to sh...
    # ifeq (0,$(shell test $(_ifcmajorver) -lt 8 ; echo $$status))
    ifeq (0,$(shell test $(_ifcmajorver) -lt 8 ; echo $$?))
      include $(CHOMBO_HOME)/mk/Make.defs.config#   #defines $(config)
      ifneq ($(subst +,,$(config)),$(config))
        $(warning ifc v$(_ifcmajorver).$(_ifcminorver) cannot compile config [$(config)] because it has a '+' in it.)
        $(error Use a compiler name (CXX=) that doesnt have a '+' and set 'cxxname=$(cxxname)' on the make command line.)
      endif
    endif
  endif

  ## NOTE: ifc v6 has a bug where it echos the whole source code to stdout
  ##       if the output object filename has a "+" in the path.  So if you
  ##       use ifc v6 with g++, you can uncomment this code to make the
  ##       extraneous source code listing go away.
  ##       God only knows why they do this.
  #ifeq ($(_ifcmajorver)$(findstring g++,$(cxxname)),6g++)
  #  fobjflag = ; /bin/mv $%
  #endif

endif
