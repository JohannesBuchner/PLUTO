#ifndef _SLICING_H_TRANSDIM_
#define _SLICING_H_TRANSDIM_

#include "BoxToolsTraits.H.transdim"

using namespace Chombo;

namespace CH_MultiDim {


/**
  Makes a_to the indicated (by a_spec) slice of a_from.
  The types toIntVectT and fromIntVectT must be IntVects and a_from must
  be of dimension one larger then a_to.
*/
template<typename IntVectT>
void sliceIntVect(
  typename ObjTraits< DimTraits<IntVectT>::dim - 1 >::IntVect& a_to,
  const IntVectT&    a_from,
  const typename ObjTraits< DimTraits<IntVectT>::dim >::SliceSpec& a_spec );


/**
  Arg a_to is a_from with its a_slicespec.direction-th coordinate missing;
  a_to is one dimension lower, e.g. if a_from is a D3::Box, then a_to is a
  D2::Box.
  If a_outofbounds isn't NULL, we set it to true if a_slicespec.position is
  outside of a_from, along the a_slicespec.direction-th axis.
*/
template<typename BoxT> void
sliceBox( typename ObjTraits< DimTraits<BoxT>::dim - 1 >::Box& a_to,
          const BoxT&  a_from,
          const typename ObjTraits< DimTraits<BoxT>::dim >::SliceSpec& a_slicespec,
          bool* a_outofbounds=0 );


template<typename Domain_T>
typename ObjTraits< DimTraits<Domain_T>::dim - 1 >::ProblemDomain
sliceDomain( const Domain_T& a_from,
             const typename ObjTraits< DimTraits<Domain_T>::dim >::SliceSpec& a_slicespec,
             bool* a_outofbounds=0 );

/**
  Arg a_to becomes a slice of a_from, along the a_slicespec.direction-th
  axis at the a_slicespec.position-th position.  Moreover, a_to is one dimension
  lower than a_from; if a_from is a D3::BaseFab, a_to is a D2::BaseFab.

  If a_slicespec.position is outside of a_from, that's an error.
*/
template<typename BaseFabT> void
sliceBaseFab( typename BaseFabTraits<BaseFabT>::OneDimLessBaseFab& a_to,
              const BaseFabT& a_from,
              const typename ObjTraits< DimTraits<BaseFabT>::dim >::SliceSpec& a_slicespec );


/**
  Arg a_to is a_from sliced at a_slicespec.position along the a_slicespec.direction-th
  axis.
*/
template<typename DBL_T> void
sliceDisjointBoxLayout(
  typename ObjTraits< DimTraits<DBL_T>::dim - 1 >::DisjointBoxLayout& a_to,
  const DBL_T& a_from,
  const typename ObjTraits< DimTraits<DBL_T>::dim >::SliceSpec& a_slicespec );



/**
  Arg a_from becomes a slice of a_to at a_slicespec.position along the
  a_slicespec.direction-th axis.
  If a_to is defined, we use its DisjointBoxLayout, otherwise we create an appropriate
  new DisjointBoxLayout for it.
*/
template<typename LD_T> void
sliceLevelData( typename ObjTraits< DimTraits<LD_T>::dim - 1 >::LevelData& a_to,
                const LD_T& a_from,
                const typename ObjTraits< DimTraits<LD_T>::dim >::SliceSpec& a_slicespec );


/**
   Template specialization for LevelData<FluxBox>
  Arg a_from becomes a slice of a_to at a_slicespec.position along the
  a_slicespec.direction-th axis.
  If a_to is defined, we use its DisjointBoxLayout, otherwise we create an appropriate
  new DisjointBoxLayout for it.
*/
template<typename LD_T> void
sliceLevelFlux( typename ObjTraits< DimTraits<LD_T>::dim - 1 >::LevelFlux& a_to,
                const LD_T& a_from,
                const typename ObjTraits< DimTraits<LD_T>::dim >::SliceSpec& a_slicespec );

} // namespace CH_MultiDim


/**
  Needed these for debugging.  (Surprised that I couldn't find
them in the existing Chombo library.)
*/
#ifdef CH_USE1D
template<typename T> std::ostream&
operator<<( std::ostream& a_out, const D1::BaseFab<T>& a_fab);
std::ostream&
operator<<( std::ostream& a_out, const D1::FluxBox& a_fab);
#endif
#ifdef CH_USE2D
template<typename T> std::ostream&
operator<<( std::ostream& a_out, const D2::BaseFab<T>& a_fab);
std::ostream&
operator<<( std::ostream& a_out, const D2::FluxBox& a_fab);
#endif
#ifdef CH_USE3D
template<typename T> std::ostream&
operator<<( std::ostream& a_out, const D3::BaseFab<T>& a_fab);

std::ostream&
operator<<( std::ostream& a_out, const D3::FluxBox& a_fab);
#endif
#ifdef CH_USE4D
template<typename T> std::ostream&
operator<<( std::ostream& a_out, const D4::BaseFab<T>& a_fab);
#endif
#ifdef CH_USE5D
template<typename T> std::ostream&
operator<<( std::ostream& a_out, const D5::BaseFab<T>& a_fab);
#endif
#ifdef CH_USE6D
template<typename T> std::ostream&
operator<<( std::ostream& a_out, const D6::BaseFab<T>& a_fab);
#endif

// Don't try explicit template instantiation here; there are just way too
// many templatized classes and functions to make it worthwhile.
#include "SlicingI.H.transdim"

#endif // include guard
