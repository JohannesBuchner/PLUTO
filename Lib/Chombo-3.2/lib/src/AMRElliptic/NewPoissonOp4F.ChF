C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

C     -----------------------------------------------------------------
C     subroutine OPERATORLAP4
C     4th-order 5-point operator for the Helmholtz equation
C
C     INPUTS/OUTPUTS:
C     phi       =>  phi
C     lofphi   <=   laplacian
C     dx        =>  cell spacing
C
C     Warning: phi, lofphi must have the same number
C              of components and span region.
C     Phi needs two more cells on all sides
C
C     Qinghai Zhang May 08, 2009
C     ------------------------------------------------------------------
      subroutine OPERATORLAP4(
     &     CHF_FRA[lofphi],
     &     CHF_CONST_FRA[phi],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_REAL[beta])

      REAL_T dxinv, lap
      integer n,ncomp
      integer CHF_DDECL[i;j;k]

      ncomp = CHF_NCOMP[phi]
      if(ncomp .ne. CHF_NCOMP[lofphi]) then
C         print*, 'OPERATORLAP4:phi and rhs incompatible'
         call MAYDAYERROR()
      endif

      dxinv = one/(dx*dx)
      do n = 0, ncomp-1
        CHF_MULTIDO[region; i; j; k]

          lap = ( CHF_DTERM[
     &   sixteen*phi(CHF_IX[i-1;j  ;k  ],n) - phi(CHF_IX[i-2;j  ;k  ],n)
     & + sixteen*phi(CHF_IX[i+1;j  ;k  ],n) - phi(CHF_IX[i+2;j  ;k  ],n);
     & + sixteen*phi(CHF_IX[i  ;j-1;k  ],n) - phi(CHF_IX[i  ;j-2;k  ],n)
     & + sixteen*phi(CHF_IX[i  ;j+1;k  ],n) - phi(CHF_IX[i  ;j+2;k  ],n);
     & + sixteen*phi(CHF_IX[i  ;j  ;k-1],n) - phi(CHF_IX[i  ;j  ;k-2],n)
     & + sixteen*phi(CHF_IX[i  ;j  ;k+1],n) - phi(CHF_IX[i  ;j  ;k+2],n)]
     &                     -(thirty*CH_SPACEDIM)*phi(CHF_IX[i;j;k],n) )
     &       * twelfth * dxinv

          lofphi(CHF_IX[i;j;k],n) = alpha*phi(CHF_IX[i;j;k],n)+beta*lap
        CHF_ENDDO
      enddo

      return
      end

C     -----------------------------------------------------------------
C     subroutine OPERATORLAPRES4
C     computes 4th-order 5-point residual for the Helmholtz equation
C
C     INPUTS/OUTPUTS:
C     r        <=   rhs - lap(phi)
C     phi       =>  phi
C     rhs       =>
C     dx        =>  cell spacing
C
C     Warning: Phi needs two more cell on all sides
C
C     Qinghai Zhang July 06, 2009
C     ------------------------------------------------------------------
      subroutine OPERATORLAPRES4(
     &     CHF_FRA[r],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_REAL[beta])

      REAL_T dxinv, lap, lhs
      integer n,ncomp
      integer CHF_DDECL[i;j;k]

      ncomp = CHF_NCOMP[phi]

      dxinv = one/(dx*dx)
      do n = 0, ncomp-1
         CHF_MULTIDO[region; i; j; k]

          lap = ( CHF_DTERM[
     &   sixteen*phi(CHF_IX[i-1;j  ;k  ],n) - phi(CHF_IX[i-2;j  ;k  ],n)
     & + sixteen*phi(CHF_IX[i+1;j  ;k  ],n) - phi(CHF_IX[i+2;j  ;k  ],n);
     & + sixteen*phi(CHF_IX[i  ;j-1;k  ],n) - phi(CHF_IX[i  ;j-2;k  ],n)
     & + sixteen*phi(CHF_IX[i  ;j+1;k  ],n) - phi(CHF_IX[i  ;j+2;k  ],n);
     & + sixteen*phi(CHF_IX[i  ;j  ;k-1],n) - phi(CHF_IX[i  ;j  ;k-2],n)
     & + sixteen*phi(CHF_IX[i  ;j  ;k+1],n) - phi(CHF_IX[i  ;j  ;k+2],n)]
     &                     -(thirty*CH_SPACEDIM)*phi(CHF_IX[i;j;k],n) )
     &       * twelfth * dxinv

          lhs = alpha*phi(CHF_IX[i;j;k],n) + beta*lap

          r(CHF_IX[i;j;k],n) = rhs(CHF_IX[i;j;k],n) - lhs
         CHF_ENDDO
      enddo

      return
      end

C     -----------------------------------------------------------------
C     subroutine RESTRICTRES4
C     computes 4th-order restriction of residual to a coarser multgrid level
C        res[2h] = I[h->2h] (rhs[h] - L(phi[h]))
C     INPUTS/OUTPUTS:
C     res       <=  res[2h]
C     rhs       =>  rhs[h]
C     phi       =>  phi[h]
C     alpha     =>  Coefficient of the identity operator
C     beta      =>  Coefficient of the laplacian operator
C     region    =>  Box over which rhs is defined (in h index space)
C     dx        =>  grid spacing in h
C
C     Qinghai Zhang July 06, 2009
C     ------------------------------------------------------------------
      subroutine RESTRICTRES4(
     &     CHF_FRA[res],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_REAL[beta],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])

      REAL_T denom,dxinv,lofphi,lap
      integer n,ncomp

      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]

      ncomp = CHF_NCOMP[phi]

      dxinv = one / (dx*dx)
      denom = D_TERM(2, *2, *2)

      do n = 0, ncomp-1
        CHF_MULTIDO[region; i; j; k]
          CHF_DTERM[
          ii = i/2 ;
          jj = j/2 ;
          kk = k/2 ]

          lap = ( CHF_DTERM[
     &   sixteen*phi(CHF_IX[i-1;j  ;k  ],n) - phi(CHF_IX[i-2;j  ;k  ],n)
     & + sixteen*phi(CHF_IX[i+1;j  ;k  ],n) - phi(CHF_IX[i+2;j  ;k  ],n);
     & + sixteen*phi(CHF_IX[i  ;j-1;k  ],n) - phi(CHF_IX[i  ;j-2;k  ],n)
     & + sixteen*phi(CHF_IX[i  ;j+1;k  ],n) - phi(CHF_IX[i  ;j+2;k  ],n);
     & + sixteen*phi(CHF_IX[i  ;j  ;k-1],n) - phi(CHF_IX[i  ;j  ;k-2],n)
     & + sixteen*phi(CHF_IX[i  ;j  ;k+1],n) - phi(CHF_IX[i  ;j  ;k+2],n)]
     &                     -(thirty*CH_SPACEDIM)*phi(CHF_IX[i;j;k],n) )
     &       * twelfth * dxinv

          lofphi = alpha*phi(CHF_IX[i;j;k],n) + beta*lap

          res(CHF_IX[ii;jj;kk],n) = res(CHF_IX[ii;jj;kk],n)
     &                            + (rhs(CHF_IX[i;j;k],n) - lofphi) / denom
        CHF_ENDDO
      enddo

      return
      end

C     -----------------------------------------------------------------
C     subroutine GSRBLAPLACIAN4
C     4th-order GSRB smoother for Laplacian equation.
C
C     INPUTS/OUTPUTS:
C     phi      <=   phi
C     rhs       =>  laplacian(phi)
C     region    =>  box smoothed
C     dx        =>  cell spacing
C     tmp       =>  a copy of phi used for scratch space
C     redBlack  =>  0 for red pass; 1 for black pass
C
C     Warning: phi, rhs, tmp must have the same number
C              of components and span region.
C     Phi needs two more cells on all sides
C
C     Qinghai Zhang July 06, 2009
C     ------------------------------------------------------------------
      subroutine GSRBLAPLACIAN4(
     &     CHF_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_FRA[tmp],
     &     CHF_CONST_INT[redBlack])

      REAL_T dx2t, thD
      integer CHF_DDECL[i;j;k]
      integer n,ncomp,indtot,imin,imax,red,black

      red = 0
      black = 1
      dx2t = twelve*dx*dx
      thD  = thirtieth/CH_SPACEDIM

      ncomp = CHF_NCOMP[phi]
      if(ncomp .ne. CHF_NCOMP[rhs]) then
C         print*, 'GSRBLAPLACIAN4:phi and rhs incompatible'
         call MAYDAYERROR()
      endif

      do n = 0, ncomp - 1
C
C     the red pass
C
         if (redBlack .eq. red) then
#if CH_SPACEDIM > 2
        do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
          do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
            imin = CHF_LBOUND[region; 0]
            indtot = CHF_DTERM[imin; + j; + k]
            imin = imin + abs(mod(indtot+red, 2))
            imax = CHF_UBOUND[region; 0]
            do i = imin, imax, 2

               tmp(CHF_IX[i;j;k],n) = thD*( CHF_DTERM[
     &           sixteen*phi(CHF_IX[i+1;j;k],n) - phi(CHF_IX[i+2;j;k],n)
     &         + sixteen*phi(CHF_IX[i-1;j;k],n) - phi(CHF_IX[i-2;j;k],n);
     &         + sixteen*phi(CHF_IX[i;j+1;k],n) - phi(CHF_IX[i;j+2;k],n)
     &         + sixteen*phi(CHF_IX[i;j-1;k],n) - phi(CHF_IX[i;j-2;k],n);
     &         + sixteen*phi(CHF_IX[i;j;k+1],n) - phi(CHF_IX[i;j;k+2],n)
     &         + sixteen*phi(CHF_IX[i;j;k-1],n) - phi(CHF_IX[i;j;k-2],n) ]
     &         - dx2t*rhs(CHF_IX[i;j;k],n) )

            enddo
#if CH_SPACEDIM > 1
          enddo
#endif
#if CH_SPACEDIM > 2
        enddo
#endif
C
C     the black pass
C
        else if (redBlack .eq. black) then
#if CH_SPACEDIM > 2
        do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
          do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
            imin = CHF_LBOUND[region; 0]
            indtot = CHF_DTERM[imin; + j; + k]
            imin = imin + abs(mod(indtot+black, 2))
            imax = CHF_UBOUND[region; 0]
            do i = imin, imax, 2

               phi(CHF_IX[i;j;k],n) = thD*( CHF_DTERM[
     &           sixteen*tmp(CHF_IX[i+1;j;k],n) - tmp(CHF_IX[i+2;j;k],n)
     &         + sixteen*tmp(CHF_IX[i-1;j;k],n) - tmp(CHF_IX[i-2;j;k],n);
     &         + sixteen*tmp(CHF_IX[i;j+1;k],n) - tmp(CHF_IX[i;j+2;k],n)
     &         + sixteen*tmp(CHF_IX[i;j-1;k],n) - tmp(CHF_IX[i;j-2;k],n);
     &         + sixteen*tmp(CHF_IX[i;j;k+1],n) - tmp(CHF_IX[i;j;k+2],n)
     &         + sixteen*tmp(CHF_IX[i;j;k-1],n) - tmp(CHF_IX[i;j;k-2],n) ]
     &         - dx2t*rhs(CHF_IX[i;j;k],n) )

            enddo
#if CH_SPACEDIM > 1
          enddo
#endif
#if CH_SPACEDIM > 2
        enddo
#endif
C
C    assign the red points
C
#if CH_SPACEDIM > 2
        do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
          do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
            imin = CHF_LBOUND[region; 0]
            indtot = CHF_DTERM[imin; + j; + k]
            imin = imin + abs(mod(indtot+red, 2))
            imax = CHF_UBOUND[region; 0]
            do i = imin, imax, 2
               phi(CHF_IX[i;j;k],n) = tmp(CHF_IX[i;j;k],n)
            enddo
#if CH_SPACEDIM > 1
          enddo
#endif
#if CH_SPACEDIM > 2
        enddo
#endif

        else
           call MAYDAYERROR()
        end if
      enddo

      return
      end

      subroutine SORLAPLACIAN4(
     &     CHF_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])

      REAL_T dx2t, thD, tmp, omega
      integer CHF_DDECL[i;j;k]
      integer n,ncomp

      dx2t = twelve*dx*dx
      thD  = thirtieth/CH_SPACEDIM
      omega = 0.47

      ncomp = CHF_NCOMP[phi]
      if(ncomp .ne. CHF_NCOMP[rhs]) then
C         print*, 'GSRBLAPLACIAN4:phi and rhs incompatible'
         call MAYDAYERROR()
      endif

      do n = 0, ncomp - 1

         CHF_MULTIDO[region; i; j; k]

         tmp = thD*( CHF_DTERM[
     &        sixteen*phi(CHF_IX[i+1;j;k],n) - phi(CHF_IX[i+2;j;k],n)
     &        + sixteen*phi(CHF_IX[i-1;j;k],n) - phi(CHF_IX[i-2;j;k],n);
     &        + sixteen*phi(CHF_IX[i;j+1;k],n) - phi(CHF_IX[i;j+2;k],n)
     &        + sixteen*phi(CHF_IX[i;j-1;k],n) - phi(CHF_IX[i;j-2;k],n);
     &        + sixteen*phi(CHF_IX[i;j;k+1],n) - phi(CHF_IX[i;j;k+2],n)
     &        + sixteen*phi(CHF_IX[i;j;k-1],n) - phi(CHF_IX[i;j;k-2],n) ]
     &        - dx2t*rhs(CHF_IX[i;j;k],n) )

         phi(CHF_IX[i;j;k],n) = omega*tmp
     &        + (one-omega)*phi(CHF_IX[i;j;k],n)

         CHF_ENDDO

      enddo

      return
      end

C     -----------------------------------------------------------------
C     subroutine GSRBHELMHOLTZ4
C     4th-order GSRB smoother for Helmholtz equation.
C
C     INPUTS/OUTPUTS:
C     phi      <=   phi
C     rhs       =>  laplacian(phi)
C     region    =>  box smoothed
C     dx        =>  cell spacing
C     tmp       =>  a copy of phi used for scratch space
C     alpha     =>  coefficient of phi
C     beta      =>  coefficient of lap(phi)
C     redBlack  =>  0 for red pass; 1 for black pass
C
C     Warning: phi, rhs, tmp must have the same number
C              of components and span region.
C     Phi needs two more cells on all sides
C
C     Qinghai Zhang Nov 06, 2009
C     ------------------------------------------------------------------
      subroutine GSRBHELMHOLTZ4(
     &     CHF_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_FRA[tmp],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_INT[redBlack])

      REAL_T dx2t, lambda, lap, dxinv, helm
      integer CHF_DDECL[i;j;k]
      integer n,ncomp,indtot,imin,imax,red,black

      red = 0
      black = 1
      dx2t = twelve*dx*dx
      dxinv = one/(dx*dx)
      lambda = one/(alpha - beta*thirty*CH_SPACEDIM*twelfth*dxinv)

      lambda = lambda*(0.60)

      ncomp = CHF_NCOMP[phi]
      if(ncomp .ne. CHF_NCOMP[rhs]) then
C         print*, 'GSRBLAPLACIAN4:phi and rhs incompatible'
         call MAYDAYERROR()
      endif

      do n = 0, ncomp - 1
C
C     the red pass
C
         if (redBlack .eq. red) then
#if CH_SPACEDIM > 2
        do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
          do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
            imin = CHF_LBOUND[region; 0]
            indtot = CHF_DTERM[imin; + j; + k]
            imin = imin + abs(mod(indtot+red, 2))
            imax = CHF_UBOUND[region; 0]
            do i = imin, imax, 2

          lap = ( CHF_DTERM[
     &   sixteen*phi(CHF_IX[i-1;j  ;k  ],n) - phi(CHF_IX[i-2;j  ;k  ],n)
     & + sixteen*phi(CHF_IX[i+1;j  ;k  ],n) - phi(CHF_IX[i+2;j  ;k  ],n);
     & + sixteen*phi(CHF_IX[i  ;j-1;k  ],n) - phi(CHF_IX[i  ;j-2;k  ],n)
     & + sixteen*phi(CHF_IX[i  ;j+1;k  ],n) - phi(CHF_IX[i  ;j+2;k  ],n);
     & + sixteen*phi(CHF_IX[i  ;j  ;k-1],n) - phi(CHF_IX[i  ;j  ;k-2],n)
     & + sixteen*phi(CHF_IX[i  ;j  ;k+1],n) - phi(CHF_IX[i  ;j  ;k+2],n)]
     &                     -(thirty*CH_SPACEDIM)*phi(CHF_IX[i;j;k],n) )
     &       * twelfth * dxinv

          helm = alpha*phi(CHF_IX[i;j;k],n) + beta*lap

          tmp(CHF_IX[i;j;k],n) = phi(CHF_IX[i;j;k],n) +
     &      lambda*( rhs(CHF_IX[i;j;k],n) - helm )
            enddo
#if CH_SPACEDIM > 1
          enddo
#endif
#if CH_SPACEDIM > 2
        enddo
#endif
C
C     the black pass
C
        else if (redBlack .eq. black) then
#if CH_SPACEDIM > 2
        do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
          do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
            imin = CHF_LBOUND[region; 0]
            indtot = CHF_DTERM[imin; + j; + k]
            imin = imin + abs(mod(indtot+black, 2))
            imax = CHF_UBOUND[region; 0]
            do i = imin, imax, 2

               lap = ( CHF_DTERM[
     &           sixteen*tmp(CHF_IX[i+1;j;k],n) - tmp(CHF_IX[i+2;j;k],n)
     &         + sixteen*tmp(CHF_IX[i-1;j;k],n) - tmp(CHF_IX[i-2;j;k],n);
     &         + sixteen*tmp(CHF_IX[i;j+1;k],n) - tmp(CHF_IX[i;j+2;k],n)
     &         + sixteen*tmp(CHF_IX[i;j-1;k],n) - tmp(CHF_IX[i;j-2;k],n);
     &         + sixteen*tmp(CHF_IX[i;j;k+1],n) - tmp(CHF_IX[i;j;k+2],n)
     &         + sixteen*tmp(CHF_IX[i;j;k-1],n) - tmp(CHF_IX[i;j;k-2],n) ]
     &                     -(thirty*CH_SPACEDIM)*tmp(CHF_IX[i;j;k],n) )
     &       * twelfth * dxinv

               helm = alpha*tmp(CHF_IX[i;j;k],n) + beta*lap

               phi(CHF_IX[i;j;k],n) = tmp(CHF_IX[i;j;k],n) +
     &              lambda*( rhs(CHF_IX[i;j;k],n) - helm )

            enddo
#if CH_SPACEDIM > 1
          enddo
#endif
#if CH_SPACEDIM > 2
        enddo
#endif
C
C    assign the red points
C
#if CH_SPACEDIM > 2
        do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
          do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
            imin = CHF_LBOUND[region; 0]
            indtot = CHF_DTERM[imin; + j; + k]
            imin = imin + abs(mod(indtot+red, 2))
            imax = CHF_UBOUND[region; 0]
            do i = imin, imax, 2
               phi(CHF_IX[i;j;k],n) = tmp(CHF_IX[i;j;k],n)
            enddo
#if CH_SPACEDIM > 1
          enddo
#endif
#if CH_SPACEDIM > 2
        enddo
#endif

        else
           call MAYDAYERROR()
        end if
      enddo

      return
      end

C     -----------------------------------------------------------------
C     subroutine NEWGETFLUX4
C     compute flux for flux correction with LevelFluxRegister
C
C     INPUTS/OUTPUTS:
C     flux     <=   d phi/ dx at cell face
C     phi       =>  phi
C     box       =>  the edge box of flux
C     beta_dx   =>  m_beta*scale/dx
C     a_idir    =>  dimension of the flux
C
C     Warning: Phi needs two more cells on all sides
C
C     Qinghai Zhang July 06, 2009
C     ------------------------------------------------------------------
      subroutine NEWGETFLUX4(
     &    CHF_FRA[flux],
     &    CHF_CONST_FRA[phi],
     &    CHF_BOX[box],
     &    CHF_CONST_REAL[beta_dx],
     &    CHF_CONST_INT[a_idir])

      INTEGER ncomp,n
      integer CHF_DDECL[ii; jj; kk]
      integer CHF_DDECL[i ; j ; k ]

      ncomp = CHF_NCOMP[phi]

      CHF_DTERM[
      ii = CHF_ID(a_idir, 0);
      jj = CHF_ID(a_idir, 1);
      kk = CHF_ID(a_idir, 2)]

      do n = 0, ncomp-1
          CHF_MULTIDO[box; i; j; k]

c$$$          flux(CHF_IX[i;j;k],n) = beta_dx * twelfth *
c$$$     &        ( fifteen*(phi(CHF_IX[i;j;k],n)
c$$$     &                  -phi(CHF_IX[i-ii;j-jj;k-kk],n))
c$$$     &               -  (phi(CHF_IX[i+ii;j+jj;k+kk],n)
c$$$     &                  -phi(CHF_IX[i-2*ii;j-2*jj;k-2*kk],n)) )
          flux(CHF_IX[i;j;k],n) = beta_dx * twelfth *
     &        ( fifteen*phi(CHF_IX[i;j;k],n)
     &           + phi(CHF_IX[i-2*ii;j-2*jj;k-2*kk],n)
     &           - phi(CHF_IX[i+ii;j+jj;k+kk],n)
     &           - fifteen*phi(CHF_IX[i-ii;j-jj;k-kk],n) )
          CHF_ENDDO
      enddo

      return

      end

C     -----------------------------------------------------------------
C     subroutine PROLONGLINEAR
C     computes linear prolongation of correction to finer level
C       phi[h] += I[rh->h](coarse[rh])
C     INPUTS/OUTPUTS:
C     phi             <=   phi
C     coarse           =>  coarse[rh]
C     fineBox          =>  box of phi to be prolonged
C     crseBox          =>  box of coarse out of which data are invalid
C     r                =>  refinement ratio
C
C     Qinghai Zhang Aug 10, 2010
C     ------------------------------------------------------------------
      subroutine PROLONGLINEAR(
     &    CHF_FRA[phi],
     &    CHF_CONST_FRA[coarse],
     &    CHF_BOX[fineBox],
     &    CHF_BOX[crseBox],
     &    CHF_CONST_INT[r])

      INTEGER ncomp, n
      integer CHF_DDECL[i ;j ;k ]
      integer CHF_DDECL[ic;jc;kc]

      ncomp = CHF_NCOMP[phi]
      do n = 0, ncomp-1
          CHF_MULTIDO[fineBox; i; j; k]
          CHF_DTERM[
           ic = i/r;
           jc = j/r;
           kc = k/r]
           phi(CHF_IX[i;j;k],n) =  phi(CHF_IX[i;j;k],n) +
     &          coarse(CHF_IX[ic;jc;kc],n)
          CHF_DTERM[
           if (ic.ne.CHF_UBOUND[crseBox; 0] .and.
     &         (ic*r.lt.i .or. ic.eq.CHF_LBOUND[crseBox; 0])) then
              phi(CHF_IX[i;j;k],n) =  phi(CHF_IX[i;j;k],n) +
     &             (coarse(CHF_IX[ic+1;jc;kc],n)
     &              - coarse(CHF_IX[ic;jc;kc],n))/r*(i+half-ic*r-half*r)
           else
              phi(CHF_IX[i;j;k],n) =  phi(CHF_IX[i;j;k],n) +
     &             (- coarse(CHF_IX[ic-1;jc;kc],n)
     &              + coarse(CHF_IX[ic;jc;kc],n))/r*(i+half-ic*r-half*r)
           endif;
           if (jc.ne.CHF_UBOUND[crseBox; 1] .and.
     &         (jc*r.lt.j .or. jc.eq.CHF_LBOUND[crseBox; 1])) then
              phi(CHF_IX[i;j;k],n) =  phi(CHF_IX[i;j;k],n) +
     &             (coarse(CHF_IX[ic;jc+1;kc],n)
     &              - coarse(CHF_IX[ic;jc;kc],n))/r*(j+half-jc*r-half*r)
           else
              phi(CHF_IX[i;j;k],n) =  phi(CHF_IX[i;j;k],n) +
     &             (- coarse(CHF_IX[ic;jc-1;kc],n)
     &              + coarse(CHF_IX[ic;jc;kc],n))/r*(j+half-jc*r-half*r)
           endif;
           if (kc.ne.CHF_UBOUND[crseBox; 2] .and.
     &         (kc*r.lt.k .or. kc.eq.CHF_LBOUND[crseBox; 2])) then
              phi(CHF_IX[i;j;k],n) =  phi(CHF_IX[i;j;k],n) +
     &             (coarse(CHF_IX[ic;jc;kc+1],n)
     &              - coarse(CHF_IX[ic;jc;kc],n))/r*(k+half-kc*r-half*r)
           else
              phi(CHF_IX[i;j;k],n) =  phi(CHF_IX[i;j;k],n) +
     &             (- coarse(CHF_IX[ic;jc;kc-1],n)
     &              + coarse(CHF_IX[ic;jc;kc],n))/r*(k+half-kc*r-half*r)
           endif
          ]
          CHF_ENDDO
      enddo

      return

      end
