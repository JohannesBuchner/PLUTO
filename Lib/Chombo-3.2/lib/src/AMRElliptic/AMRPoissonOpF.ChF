C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

C     --------------------------------------------------------------
      subroutine gsmcamrpop(
     &     chf_fra1[phi],
     &     chf_const_fra1[rhs],
     &     chf_box[coloredbox],
     $     chf_real[dx],
     $     chf_real[alpha],
     $     chf_real[beta])

      real_t lambda, dxinv, sum_b, lphi
      integer chf_ddecl[i;j;k]
      integer idir

      dxinv = one/(dx*dx)

      sum_b = 0.0
      do idir = 0, CH_SPACEDIM-1
         sum_b = sum_b + two*dxinv
      enddo

      lambda = one/(alpha - beta*sum_b)
      chf_multido[coloredBox;i;j;k;2]

        lphi = CHF_DTERM[
     &     (    phi(chf_ix[i+1;j  ;k  ])
     &     +    phi(chf_ix[i-1;j  ;k  ])
     $     -two*phi(chf_ix[i  ;j  ;k  ])) ;
     $     +(   phi(chf_ix[i  ;j+1;k  ])
     &     +    phi(chf_ix[i  ;j-1;k  ])
     $     -two*phi(chf_ix[i  ;j  ;k  ])) ;
     $     +(   phi(chf_ix[i  ;j  ;k+1])
     &     +    phi(chf_ix[i  ;j  ;k-1])
     $     -two*phi(chf_ix[i  ;j  ;k  ])) ]

        lphi = lphi*dxinv
        phi(chf_ix[i;j;k]) =
     $       phi(   chf_ix[i;j;k]) +
     &       lambda*(   rhs(   chf_ix[i;j;k]) - lphi)

      chf_enddo

      return
      end

      subroutine GSRBHELMHOLTZ(
     &     CHF_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_INT[redBlack])

      REAL_T lambda, dxinv, sum_b, lphi, helmop
      integer CHF_DDECL[i;j;k]
      integer n,ncomp,idir,indtot,imin,imax

      dxinv = one/(dx*dx)

      sum_b = 0.0
      do idir = 0, CH_SPACEDIM-1
         sum_b = sum_b + two*dxinv
      enddo

      lambda = -one/(alpha - beta*sum_b)

      ncomp = CHF_NCOMP[phi]
      if (ncomp .ne. CHF_NCOMP[rhs]) then
C         print*, 'GSRBLEVELHELM:phi and rhs incompatible'
         call MAYDAYERROR()
      endif

      do n = 0, ncomp - 1
#if CH_SPACEDIM==3
        do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
          do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
            imin = CHF_LBOUND[region; 0]
            CHF_DTERM[indtot = imin; + j ; + k ]
C     add 0 or 1 to imin, so that imin+j+k has same parity as redBlack
C     petermc, 26 april 2001
            imin = imin + abs(mod(indtot + redBlack, 2))
            imax = CHF_UBOUND[region; 0]
            do i = imin, imax, 2

              CHF_DTERM[
              lphi =   (phi(CHF_IX[i+1;j;k],n)
     &             +    phi(CHF_IX[i-1;j;k],n);
     &             +    phi(CHF_IX[i;j+1;k],n)
     &             +    phi(CHF_IX[i;j-1;k],n);
     &             +    phi(CHF_IX[i;j;k+1],n)
     &             +    phi(CHF_IX[i;j;k-1],n)]
     &             -two*CH_SPACEDIM*phi(CHF_IX[i;j;k],n))*dxinv

              helmop = alpha*phi(CHF_IX[i;j;k],n) + beta*lphi

              phi(CHF_IX[i;j;k],n) = phi(CHF_IX[i;j;k],n) +
     &             lambda*(helmop - rhs(CHF_IX[i;j;k],n))

            enddo
#if CH_SPACEDIM > 1
          enddo
#endif
#if CH_SPACEDIM==3
        enddo
#endif
      enddo

      return
      end

      subroutine GSRBLAPLACIAN(
     &     CHF_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_INT[redBlack])

      REAL_T lambda, dxinv, sum_b, lphi, lap
      integer CHF_DDECL[i;j;k]
      integer n,ncomp,idir,indtot,imin,imax

      dxinv = one/(dx*dx)

      sum_b = 0.0
      do idir = 0, CH_SPACEDIM-1
         sum_b = sum_b + two*dxinv
      enddo

      lambda = -one/sum_b

      ncomp = CHF_NCOMP[phi]
      if (ncomp .ne. CHF_NCOMP[rhs]) then
C         print*, 'GSRBLEVELHELM:phi and rhs incompatible'
         call MAYDAYERROR()
      endif

      do n = 0, ncomp - 1
#if CH_SPACEDIM==3
        do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
          do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
            imin = CHF_LBOUND[region; 0]
            CHF_DTERM[indtot = imin; + j ; + k ]
C     add 0 or 1 to imin, so that imin+j+k has same parity as redBlack
C     petermc, 26 april 2001
            imin = imin + abs(mod(indtot + redBlack, 2))
            imax = CHF_UBOUND[region; 0]
            do i = imin, imax, 2
#if 0
              CHF_DTERM[
              lphi =  ((phi(CHF_IX[i+1;j;k],n)
     &                   - phi(CHF_IX[i;j;k],n))
     &                   -(phi(CHF_IX[i;j;k],n)
     &                   - phi(CHF_IX[i-1;j;k],n)))*dxinv;
     &                +  ((phi(CHF_IX[i;j+1;k],n)
     &                   - phi(CHF_IX[i;j;k],n))
     &                   -(phi(CHF_IX[i;j;k],n)
     &                   - phi(CHF_IX[i;j-1;k],n)))*dxinv;
     &                +  ((phi(CHF_IX[i;j;k+1],n)
     &                   - phi(CHF_IX[i;j;k],n))
     &                   -(phi(CHF_IX[i;j;k],n)
     &                   - phi(CHF_IX[i;j;k-1],n)))*dxinv ]
#else
              lphi = ( CHF_DTERM[
     &                  phi(CHF_IX[i+1;j;k],n)
     &             +    phi(CHF_IX[i-1;j;k],n);
     &             +    phi(CHF_IX[i;j+1;k],n)
     &             +    phi(CHF_IX[i;j-1;k],n);
     &             +    phi(CHF_IX[i;j;k+1],n)
     &             +    phi(CHF_IX[i;j;k-1],n)]
     &             ) * dxinv
#endif
              phi(CHF_IX[i;j;k],n) = lambda*(rhs(CHF_IX[i;j;k],n)-lphi)

            enddo
#if CH_SPACEDIM > 1
          enddo
#endif
#if CH_SPACEDIM==3
        enddo
#endif
      enddo

      return
      end

      subroutine gsrblazy(
     &     chf_fra1[phi],
     &     chf_const_fra1[lphi],
     &     chf_const_fra1[rhs],
     &     chf_box[coloredbox],
     $     chf_real[alpha],
     $     chf_real[beta],
     $     chf_real[dx])

      integer chf_ddecl[i;j;k], idir
      real_t dxinv, sum_b, lambda

      dxinv = one/(dx*dx)

      sum_b = 0.0
      do idir = 0, CH_SPACEDIM-1
         sum_b = sum_b + two*dxinv
      enddo

      lambda = -one/(alpha - beta*sum_b)

      chf_multido[coloredBox;i;j;k;2]

      phi(chf_ix[i;j;k]) =
     $     phi(   chf_ix[i;j;k]) -
     &     lambda*(
     $     rhs(   chf_ix[i;j;k]) -
     $     lphi(  chf_ix[i;j;k]))

      chf_enddo

      return
      end
      subroutine amrpmulticolor(
     &     chf_fra1[phi],
     &     chf_const_fra1[rhs],
     &     chf_const_real[weight],
     &     chf_const_real[alpha],
     &     chf_const_real[beta],
     &     chf_const_realvect[dx],
     &     chf_box[coloredbox])

      integer chf_ddecl[i;j;k]
      real_t laplphi, chf_ddecl[dx0;dx1;dx2]

      chf_dterm[dx0 = beta/(dx(0) * dx(0));
                dx1 = beta/(dx(1) * dx(1));
                dx2 = beta/(dx(2) * dx(2));]

      chf_multido[coloredBox;i;j;k;2]

        laplphi = CHF_DTERM[
     &     (    phi(chf_ix[i+1;j  ;k  ])
     &     +    phi(chf_ix[i-1;j  ;k  ])
     $     -two*phi(chf_ix[i  ;j  ;k  ]))*dx0 ;
     $     +(   phi(chf_ix[i  ;j+1;k  ])
     &     +    phi(chf_ix[i  ;j-1;k  ])
     $     -two*phi(chf_ix[i  ;j  ;k  ]))*dx1 ;
     $     +(   phi(chf_ix[i  ;j  ;k+1])
     &     +    phi(chf_ix[i  ;j  ;k-1])
     $     -two*phi(chf_ix[i  ;j  ;k  ]))*dx2 ]

        laplphi = laplphi + alpha * phi(chf_ix[i;j;k])

        phi(chf_ix[i;j;k]) = phi(chf_ix[i;j;k]) +
     &     weight*(rhs(chf_ix[i;j;k]) - laplphi)

      chf_enddo

      return
      end

C     -----------------------------------------------------------------
C     subroutine OPERATORLAP
C     computes 5-point operator for the Helmholtz equation
C
C     INPUTS/OUTPUTS:
C     phi       =>  phi
C     lofphi   <=   laplacian
C     dx        =>  cell spacing
C
C     Warning: phi, lofphi must have the same number
C     of components and span region.  Phi needs one more cell on
C     all sides
C
C     dtgraves nov 2, 1999
C     ------------------------------------------------------------------
      subroutine OPERATORLAP(
     &     CHF_FRA[lofphi],
     &     CHF_CONST_FRA[phi],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_REAL[beta])

      REAL_T dxinv, lap
      integer n,ncomp
      integer CHF_DDECL[i;j;k]

      ncomp = CHF_NCOMP[phi]
      if (ncomp .ne. CHF_NCOMP[lofphi]) then
C         print*, 'OPERATORLAP:phi and lofphi incompatible'
         call MAYDAYERROR()
      endif

      dxinv = one/(dx*dx)
      do n = 0, ncomp-1
        CHF_MULTIDO[region; i; j; k]

          lap = ( CHF_DTERM[ phi(CHF_IX[i+1;j  ;k  ],n)
     &                     + phi(CHF_IX[i-1;j  ;k  ],n) ;
     &                     + phi(CHF_IX[i  ;j+1;k  ],n)
     &                     + phi(CHF_IX[i  ;j-1;k  ],n) ;
     &                     + phi(CHF_IX[i  ;j  ;k+1],n)
     &                     + phi(CHF_IX[i  ;j  ;k-1],n) ]
     &                     -(2*CH_SPACEDIM)*phi(CHF_IX[i;j;k],n) )
     &       * dxinv

          lofphi(CHF_IX[i;j;k],n) = alpha*phi(CHF_IX[i;j;k],n)+beta*lap
        CHF_ENDDO
      enddo

      return
      end
C     -----------------------------------------------------------------
C     subroutine OPERATORLAPRES
C     computes 5-point residual for the Helmholtz equation
C
C     INPUTS/OUTPUTS:
C     phi       =>  phi
C     rhs       =>
C     lofphi   <=   helmholtz residual
C     dx        =>  cell spacing
C
C     Warning: phi, lofphi must have the same number
C     of components and span region.  Phi needs one more cell on
C     all sides
C
C     bvs, 2007
C     ------------------------------------------------------------------
      subroutine OPERATORLAPRES(
     &     CHF_FRA[r],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_REAL[beta])

      REAL_T dxinv, lap
      integer n,ncomp
      integer CHF_DDECL[i;j;k]

      ncomp = CHF_NCOMP[phi]
      
      dxinv = one/(dx*dx)
      do n = 0, ncomp-1
         CHF_MULTIDO[region; i; j; k]

          lap = ( CHF_DTERM[ phi(CHF_IX[i+1;j  ;k  ],n)
     &                     + phi(CHF_IX[i-1;j  ;k  ],n) ;
     &                     + phi(CHF_IX[i  ;j+1;k  ],n)
     &                     + phi(CHF_IX[i  ;j-1;k  ],n) ;
     &                     + phi(CHF_IX[i  ;j  ;k+1],n)
     &                     + phi(CHF_IX[i  ;j  ;k-1],n) ]
     &                     -(2*CH_SPACEDIM)*phi(CHF_IX[i;j;k],n) )
     &       * dxinv

         r(CHF_IX[i;j;k],n) = -alpha*phi(CHF_IX[i;j;k],n) -beta*lap +
     &       rhs(CHF_IX[i;j;k],n)

         CHF_ENDDO
     
      enddo

      return
      end

C     -----------------------------------------------------------------
C     subroutine RESTRICTRES
C     computes restriction of residual to a coarser multgrid level
C        res[2h] = I[h->2h] (rhs[h] - L(phi[h]))
C     INPUTS/OUTPUTS:
C     res       <=  res[2h]
C     rhs       =>  rhs[h]
C     phi       =>  phi[h]
C     alpha     =>  Coefficient of the identity operator
C     beta      =>  Coefficient of the laplacian operator
C     region    =>  Box over which rhs is defined (in h index space)
C     dx        =>  grid spacing in h
C
C     bvs  Wed Aug 20, 2003
C     ------------------------------------------------------------------
      subroutine RESTRICTRES(
     &     CHF_FRA[res],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_REAL[beta],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])

      REAL_T denom,dxinv,lofphi
      integer n,ncomp

      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]

      ncomp = CHF_NCOMP[phi]

      dxinv = one / (dx*dx)
      denom = D_TERM(2, *2, *2)

      do n = 0, ncomp-1
        CHF_MULTIDO[region; i; j; k]
          CHF_DTERM[
          ii = i/2 ;
          jj = j/2 ;
          kk = k/2 ]

          lofphi = alpha * phi(CHF_IX[i;j;k],n)
     &           + beta  *
     &              (CHF_DTERM[ phi(CHF_IX[i+1;j  ;k  ],n)
     &                        + phi(CHF_IX[i-1;j  ;k  ],n) ;
     &                        + phi(CHF_IX[i  ;j+1;k  ],n)
     &                        + phi(CHF_IX[i  ;j-1;k  ],n) ;
     &                        + phi(CHF_IX[i  ;j  ;k+1],n)
     &                        + phi(CHF_IX[i  ;j  ;k-1],n) ]
     &                        - phi(CHF_IX[i  ;j  ;k  ],n) * 2 * CH_SPACEDIM
     &              ) * dxinv

          res(CHF_IX[ii;jj;kk],n) = res(CHF_IX[ii;jj;kk],n)
     &                            + (rhs(CHF_IX[i;j;k],n) - lofphi) / denom
        CHF_ENDDO
      enddo

      return
      end

C     -----------------------------------------------------------------
C     subroutine PROLONG
C     computes prolongation of correction to finer level
C       phi[h] += I[mh->h](coarse[mh])
C     INPUTS/OUTPUTS:
C     m         =>  refinement ratio
C     rhs       <=  rhs[h]
C     coarse    =>  coarse[2h]
C     region    =>  Box over which phi is valid (in h index space)
C
C
C     bvs  Wed Aug 20, 2003
C     ------------------------------------------------------------------
      subroutine PROLONG(
     &    CHF_FRA[phi],
     &    CHF_CONST_FRA[coarse],
     &    CHF_BOX[region],
     &    CHF_CONST_INT[m])

      INTEGER ncomp, n
      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]
      
      ncomp = CHF_NCOMP[phi]
      do n = 0, ncomp-1
          CHF_MULTIDO[region; i; j; k]
          CHF_DTERM[
          ii = i/m;
          jj = j/m;
          kk = k/m]
         
          phi(CHF_IX[i;j;k],n) =  phi(CHF_IX[i;j;k],n) +
     &        coarse(CHF_IX[ii;jj;kk],n)
         CHF_ENDDO
      enddo

      return

      end

C     -----------------------------------------------------------------
C     subroutine PROLONG_2
C     computes prolongation of correction to finer level with linear (sort of) interp.
C       phi[h] += I[mh->h](coarse[mh])
C     INPUTS/OUTPUTS:
C     m         =>  refinement ratio -- this has to be 2!!!
C     rhs       <=  rhs[h]
C     coarse    =>  coarse[2h]
C     region    =>  Box over which phi is valid (in h index space)
C
C     mfa Aug 2012
C     ------------------------------------------------------------------
      subroutine PROLONG_2(
     &     CHF_FRA[phi],
     &     CHF_CONST_FRA[coarse],
     &     CHF_BOX[region],
     &     CHF_CONST_INT[m] )

      INTEGER ncomp, n
      integer CHF_DDECL[i;j;k]
!     integer CHF_DDECL[ioff;joff;koff]
      integer offs(CH_SPACEDIM)
!     integer CHF_DDECL[ii;jj;kk]
      integer CHF_DDECL[ic;jc;kc]
      real_t f0, den, fx(CH_SPACEDIM)
      
      den = one/(4**CH_SPACEDIM)
      CHF_DTERM[
      fx(1) = three*den;
      fx(2) = three**2*den;
      fx(3) = three**3*den]
      f0 = one*den
      
      ncomp = CHF_NCOMP[phi]

      CHF_MULTIDO[region; i; j; k]
        CHF_DTERM[
        ic = i/m;
        jc = j/m;
        kc = k/m]

!       get sign of side of box
        CHF_DTERM[
        offs(1) = 2*mod(i,2) - 1;
        offs(2) = 2*mod(j,2) - 1;
        offs(3) = 2*mod(k,2) - 1]

!     center and corner stencil point
        do n = 0, ncomp-1
          phi(CHF_IX[i;j;k],n) = phi(CHF_IX[i;j;k],n)
     $      + fx(CH_SPACEDIM)*
     $        coarse(CHF_IX[ic;jc;kc],n)
     $      + f0*coarse(CHF_IX[ic+offs(1);jc+offs(2);kc+offs(3)],n) 
#if CH_SPACEDIM > 1
!       edge stencil
          phi(CHF_IX[i;j;k],n) = phi(CHF_IX[i;j;k],n) 
     $      + fx(CH_SPACEDIM-1)*
     $        (CHF_DTERM[
     $         coarse(CHF_IX[ic+offs(1);jc;kc],n) ; 
     $       + coarse(CHF_IX[ic;jc+offs(2);kc],n) ; 
     $       + coarse(CHF_IX[ic;jc;kc+offs(3)],n) ] )
#if CH_SPACEDIM > 2
          phi(CHF_IX[i;j;k],n) = phi(CHF_IX[i;j;k],n) 
     $      + fx(CH_SPACEDIM-2)*
     $        (CHF_DTERM[
     $         coarse(CHF_IX[ic+offs(1);jc+offs(2);kc],n) ; 
     $       + coarse(CHF_IX[ic;jc+offs(2);kc+offs(3)],n) ; 
     $       + coarse(CHF_IX[ic+offs(1);jc;kc+offs(3)],n) ] )
#endif
#endif
        enddo
      CHF_ENDDO

      return
      
      end

      subroutine NEWGETFLUX(
     &    CHF_FRA[flux],
     &    CHF_CONST_FRA[phi],
     &    CHF_BOX[box],
     &    CHF_CONST_REAL[beta_dx],
     &    CHF_CONST_INT[a_idir])

      INTEGER ncomp,n
      integer CHF_DDECL[ii; jj; kk]
      integer CHF_DDECL[i ; j ; k ]

      ncomp = CHF_NCOMP[phi]

      CHF_DTERM[
      ii = CHF_ID(a_idir, 0);
      jj = CHF_ID(a_idir, 1);
      kk = CHF_ID(a_idir, 2)]

      do n = 0, ncomp-1
          CHF_MULTIDO[box; i; j; k]

          flux(CHF_IX[i;j;k],n) =
     &        (phi(CHF_IX[i;j;k],n)-
     &         phi(CHF_IX[i-ii;j-jj;k-kk],n))*beta_dx
          CHF_ENDDO
      enddo

      return

      end
