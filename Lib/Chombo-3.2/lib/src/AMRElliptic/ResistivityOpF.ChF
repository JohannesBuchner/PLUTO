C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
      subroutine PROLONGROP(
     &    CHF_FRA[phi],
     &    CHF_CONST_FRA[coarse],
     &    CHF_BOX[region],
     &    CHF_CONST_INT[m])

      INTEGER ncomp, n
      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]

      ncomp = CHF_NCOMP[phi]
      do n = 0, ncomp-1
          CHF_MULTIDO[region; i; j; k]
          CHF_DTERM[
          ii = (i-abs(mod(i,m)))/m;
          jj = (j-abs(mod(j,m)))/m;
          kk = (k-abs(mod(k,m)))/m]
          phi(CHF_IX[i;j;k],n) =  phi(CHF_IX[i;j;k],n) +
     &        coarse(CHF_IX[ii;jj;kk],n)
         CHF_ENDDO
      enddo

      return

      end
      subroutine RESTRICTRESROP(
     &     CHF_FRA[res],
     &     CHF_CONST_FRA[resFine],
     &     CHF_BOX[region])

      REAL_T denom
      integer n

      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]

      integer ncomp
      ncomp = CHF_NCOMP[res]
      denom = CHF_DTERM[two; *two; *two]

      do n = 0, ncomp-1
         CHF_MULTIDO[region; i; j; k]
         CHF_DTERM[
         ii = (i-abs(mod(i,2)))/2;
         jj = (j-abs(mod(j,2)))/2;
         kk = (k-abs(mod(k,2)))/2]
         res(CHF_IX[ii;jj;kk],n) = res(CHF_IX[ii;jj;kk],n) + resFine(CHF_IX[i;j;k],n)/denom

         CHF_ENDDO
      enddo

      return
      end
      subroutine cellgradrop(
     $     chf_fra1[grad],
     $     chf_const_fra1[vel],
     $     chf_box[grid],
     $     chf_const_real[dx],
     $     chf_const_int[divdir])

      integer chf_ddecl[ii,i;jj,j;kk,k]

      chf_dterm[
      ii = chf_id(divdir, 0);
      jj = chf_id(divdir, 1);
      kk = chf_id(divdir, 2)]

      chf_multido[grid;i;j;k]

      grad(chf_ix[i;j;k]) =
     $     (    vel(chf_ix[i+ii;j+jj;k+kk])
     $     -    vel(chf_ix[i-ii;j-jj;k-kk]) )/(two*dx)

      chf_enddo

      return
      end

      subroutine addgradtofluxrop(
     $     chf_fra[flux],
     $     chf_int[fluxComp],
     $     chf_fra[grad],
     $     chf_int[gradComp],
     $     chf_real[sign],
     $     chf_box[regionface])

      integer chf_ddecl[i;j;k]

      chf_multido[regionface;i;j;k]

      flux(chf_ix[i;j;k], fluxcomp) =  flux(chf_ix[i;j;k], fluxcomp) +
     $     ( sign*grad(chf_ix[i;j;k], gradcomp))

      chf_enddo

      return
      end

      subroutine getfacegradrop(
     $     chf_fra1[gradvelface],
     $     chf_const_fra1[gradvelcell],
     $     chf_const_fra1[velcomp],
     $     chf_box[region],
     $     chf_box[centerbox],
     $     chf_box[lobox],
     $     chf_const_int[haslo],
     $     chf_box[hibox],
     $     chf_const_int[hashi],
     $     chf_const_real[dx],
     $     chf_const_int[facedir],
     $     chf_const_int[divdir]
     $     )

      integer chf_ddecl[ii,i;jj,j;kk,k]

      chf_dterm[
      ii = chf_id(facedir, 0);
      jj = chf_id(facedir, 1);
      kk = chf_id(facedir, 2)]

      if (facedir .eq. divdir) then

         chf_multido[region;i;j;k]

         gradvelface(chf_ix[i;j;k]) =
     $        ( velcomp(chf_ix[i   ;j   ;k   ])
     $        - velcomp(chf_ix[i-ii;j-jj;k-kk]) )/dx

         chf_enddo

      else

         chf_multido[centerbox;i;j;k]

         gradvelface(chf_ix[i;j;k]) =
     $        ( gradvelcell(chf_ix[i   ;j   ;k   ])
     $        + gradvelcell(chf_ix[i-ii;j-jj;k-kk]) )/two

         chf_enddo

         if(haslo .eq. 1) then

            chf_multido[lobox;i;j;k]

            gradvelface(chf_ix[i;j;k]) =
     $           (three*gradvelcell(chf_ix[i   ;j   ;k   ])
     $           -      gradvelcell(chf_ix[i+ii;j+jj;k+kk]))/two

            chf_enddo

         endif

         if(hashi .eq. 1) then

            chf_multido[hibox;i;j;k]

            gradvelface(chf_ix[i;j;k]) =
     $           (three*gradvelcell(chf_ix[i-  ii;j-  jj;k-  kk])
     $           -      gradvelcell(chf_ix[i-2*ii;j-2*jj;k-2*kk]))/two

            chf_enddo

         endif
      endif

      return
      end

      subroutine celldivincrrop(
     $     chf_fra1[divvel],
     $     chf_const_fra[vel],
     $     chf_const_real[dx],
     $     chf_const_int[divdir],
     $     chf_box[region])

      integer chf_ddecl[ii,i;jj,j;kk,k]

      chf_dterm[
      ii = chf_id(divdir, 0);
      jj = chf_id(divdir, 1);
      kk = chf_id(divdir, 2)]

      chf_multido[region;i;j;k]

      divvel(chf_ix[i;j;k]) = divvel(chf_ix[i;j;k]) +
     $     (    vel(chf_ix[i+ii;j+jj;k+kk],divdir)
     $     -    vel(chf_ix[i-ii;j-jj;k-kk],divdir) )/(two*dx)

      chf_enddo

      return
      end

      subroutine facedivincrrop(
     $     chf_fra1[divvel],
     $     chf_const_fra[vel],
     $     chf_const_fra[gradvel],
     $     chf_box[region],
     $     chf_box[centerbox],
     $     chf_box[lobox],
     $     chf_const_int[haslo],
     $     chf_box[hibox],
     $     chf_const_int[hashi],
     $     chf_const_real[dx],
     $     chf_const_int[facedir],
     $     chf_const_int[divdir],
     $     chf_const_int[gradcomp])

      integer chf_ddecl[ii,i;jj,j;kk,k]

      chf_dterm[
      ii = chf_id(facedir, 0);
      jj = chf_id(facedir, 1);
      kk = chf_id(facedir, 2)]

      if (facedir .eq. divdir) then

         chf_multido[region;i;j;k]

         divvel(chf_ix[i;j;k]) = divvel(chf_ix[i;j;k]) +
     $        (    vel(chf_ix[i   ;j   ;k   ],facedir)
     $        -    vel(chf_ix[i-ii;j-jj;k-kk],facedir) )/dx

         chf_enddo

      else
c     remember this is partial vdivdir/partial xdivdir
         chf_multido[centerbox;i;j;k]

         divvel(chf_ix[i;j;k]) = divvel(chf_ix[i;j;k]) +
     $        ( gradvel(chf_ix[i   ;j   ;k   ], gradcomp)
     $        + gradvel(chf_ix[i-ii;j-jj;k-kk], gradcomp) )/two

         chf_enddo

         if(haslo .eq. 1) then
            chf_multido[lobox;i;j;k]

            divvel(chf_ix[i;j;k]) = divvel(chf_ix[i;j;k]) +
     $           (three*gradvel(chf_ix[i   ;j   ;k   ], gradcomp)
     $           -      gradvel(chf_ix[i+ii;j+jj;k+kk], gradcomp))/two

            chf_enddo
         endif

         if(hashi .eq. 1) then
            chf_multido[hibox;i;j;k]

            divvel(chf_ix[i;j;k]) = divvel(chf_ix[i;j;k]) +
     $           (three*gradvel(chf_ix[i-  ii;j-  jj;k-  kk], gradcomp)
     $           -      gradvel(chf_ix[i-2*ii;j-2*jj;k-2*kk], gradcomp))/two

            chf_enddo
         endif
      endif

      return
      end

      subroutine decrinvlambdarop(
     &     chf_fra[lambda],
     &     chf_fra[eta],
     &     chf_box[box],
     $     chf_real[beta],
     $     chf_real[dx],
     $     chf_int[idir])

      integer chf_ddecl[ii;jj;kk]
      integer chf_ddecl[i;j;k]
      integer icomp

      REAL_T etahi, etalo
      integer ncomp

      ncomp = CHF_NCOMP[lambda]
      CHF_DTERM[
      ii = CHF_ID(idir, 0);
      jj = CHF_ID(idir, 1);
      kk = CHF_ID(idir, 2)]

      do icomp = 0, ncomp-1
         chf_multido[box;i;j;k]
         etahi =  eta(chf_ix[i+ii;j+jj;k+kk],0)
         etalo =  eta(chf_ix[i   ;j   ;k   ],0)
C         if((etahi.gt.0.4) .or.(etahi.lt.0.2)) then
C            print*, "here1"
C         endif
C         if((etalo.gt.0.4) .or.(etalo.lt.0.2)) then
C            print*, "here2"
C         endif

         lambda(chf_ix[i;j;k], icomp) = lambda(chf_ix[i;j;k],icomp)
     $        - beta*(
     $        eta(chf_ix[i+ii;j+jj;k+kk],0) +
     $        eta(chf_ix[i   ;j   ;k   ],0))/(dx*dx)

         chf_enddo
      enddo

      return
      end

      subroutine invertlambdarop(
     &     chf_fra[lambda],
     $     chf_real[safety],
     &     chf_box[box])

      integer chf_ddecl[i;j;k]
      integer icomp
      integer ncomp

      ncomp = CHF_NCOMP[lambda]

      do icomp = 0, ncomp-1
         chf_multido[box;i;j;k]

         lambda(chf_ix[i;j;k], icomp) =
     $        safety/(lambda(chf_ix[i;j;k],icomp))

         chf_enddo
      enddo

      return
      end

      subroutine gsrbrop(
     &     chf_fra[phi],
     &     chf_const_fra[lphi],
     &     chf_const_fra[rhs],
     &     chf_const_fra[lambda],
     &     chf_box[coloredbox])

      integer chf_ddecl[i;j;k]
      integer icomp
      integer ncomp

      ncomp = CHF_NCOMP[phi]

      do icomp = 0, ncomp-1
         chf_multido[coloredBox;i;j;k;2]

         phi(chf_ix[i;j;k], icomp) =
     $        phi(   chf_ix[i;j;k],icomp) +
     &        lambda(chf_ix[i;j;k],icomp)*(
     $        rhs(   chf_ix[i;j;k],icomp) -
     $        lphi(  chf_ix[i;j;k],icomp))

         chf_enddo
      enddo

      return
      end

      subroutine ADDDIVFLUXDIRROP(
     &     CHF_FRA[lhs],
     &     CHF_CONST_FRA[flux],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     $     CHF_CONST_INT[facedir])

      integer CHF_DDECL[ii,i;jj,j;kk,k]
      integer icomp
      integer ncomp

      ncomp = CHF_NCOMP[lhs]

      CHF_DTERM[
      ii = CHF_ID(facedir, 0);
      jj = CHF_ID(facedir, 1);
      kk = CHF_ID(facedir, 2)]

      do icomp = 0, ncomp-1
         CHF_MULTIDO[region; i; j; k]

         lhs(CHF_IX[i;j;k], icomp) = lhs(CHF_IX[i;j;k], icomp) +
     $        (flux(CHF_IX[i+ii;j+jj;k+kk], icomp)
     $        -flux(CHF_IX[i   ;j   ;k   ], icomp))/dx

         CHF_ENDDO
      enddo

      return
      end
