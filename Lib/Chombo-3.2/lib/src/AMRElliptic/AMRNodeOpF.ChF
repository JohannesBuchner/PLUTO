C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

C=======================================================
C     subroutine NODEOPLAP
C     computes (2D+1)-point operator for the Poisson equation
C
C     => inputs,  <= outputs
C     lofphi   <=   laplacian of phi
C     phi       =>  phi
C     region    =>  box of indices of nodes over which to calculate lofphi
C     dx        =>  cell spacing
C
C     Warning: phi, lofphi must have the same number
C     of components and span region.  Phi needs one more node on
C     all sides.
C
C     adapted from OPERATORLAP by dtgraves nov 2, 1999
C     petermc, 18 Jan 2001
C=======================================================
      subroutine NODEOPLAP(
     &     CHF_FRA[ lofphi ],
     &     CHF_CONST_FRA[ phi ],
     &     CHF_BOX[ region ],
     &     CHF_CONST_REAL[ dx ])

      REAL_T dxinv2, lphi
      integer var, ncomp

      integer CHF_DDECL[ i; j; k]

      ncomp = CHF_NCOMP[ phi ]
      if(ncomp .ne. CHF_NCOMP[lofphi]) then
c         print*, 'NODEOPLAP:phi and rhs incompatible'
c         stop
         call MAYDAY_ERROR()
      endif

      dxinv2 = one / (dx*dx)
      do var = 0, ncomp-1

         CHF_MULTIDO[region; i; j; k]

C               phicur = phi(CHF_IX[i; j; k], var)
C               lphi = zero
C               do idir = 0, CH_SPACEDIM-1
C                   CHF_DTERM[
C                   ii = CHF_ID(idir, 0) ;
C                   jj = CHF_ID(idir, 1) ;
C                   kk = CHF_ID(idir, 2) ]

C                   phinxt = phi(CHF_IX[i+ii; j+jj; k+kk], var)
C                   phiprv = phi(CHF_IX[i-ii; j-jj; k-kk], var)

C                   lphi = lphi + dxinv2 *
C      &                ((phinxt - phicur) - (phicur - phiprv))

C               end do

            CHF_DTERM[
            lphi = ( (phi(CHF_IX[i+1 ; j  ; k  ], var)
     &              - phi(CHF_IX[i   ; j  ; k  ], var) )
     &            -  (phi(CHF_IX[i   ; j  ; k  ], var)
     &              - phi(CHF_IX[i-1 ; j  ; k  ], var) ) ) * dxinv2 ;
     &         +   ( (phi(CHF_IX[i   ; j+1; k  ], var)
     &              - phi(CHF_IX[i   ; j  ; k  ], var) )
     &            -  (phi(CHF_IX[i   ; j  ; k  ], var)
     &              - phi(CHF_IX[i   ; j-1; k  ], var) ) ) * dxinv2 ;
     &         +   ( (phi(CHF_IX[i   ; j  ; k+1], var)
     &              - phi(CHF_IX[i   ; j  ; k  ], var) )
     &            -  (phi(CHF_IX[i   ; j  ; k  ], var)
     &              - phi(CHF_IX[i   ; j  ; k-1], var) ) ) * dxinv2 ]

            lofphi(CHF_IX[i; j; k], var) =  lphi

         CHF_ENDDO

      end do

      return
      end

C=======================================================
C     subroutine NODEOPLAPPOINT
C     computes (2D+1)-point operator for the Poisson equation
C
C     => inputs,  <= outputs
C     lofphi   <=   laplacian of phi
C     phi       =>  phi
C     pt        =>  index of node at which to calculate lofphi
C     dx        =>  cell spacing
C
C     Warning: phi, lofphi must have the same number
C     of components and include point.  Phi needs one more node on
C     all sides.
C
C     adapted from NODEOPLAP
C     petermc, 23 Jul 2003
C=======================================================
      subroutine NODEOPLAPPOINT(
     &     CHF_FRA[ lofphi ],
     &     CHF_CONST_FRA[ phi ],
     &     CHF_CONST_INTVECT[ pt ],
     &     CHF_CONST_REAL[ dx ])

      REAL_T dxinv2, lphi
      integer var, ncomp

      integer CHF_DDECL[ i; j; k ]

      ncomp = CHF_NCOMP[ phi ]
      if(ncomp .ne. CHF_NCOMP[lofphi]) then
c         print*, 'NODEOPLAP:phi and rhs incompatible'
c         stop
         call MAYDAY_ERROR()
      endif

      dxinv2 = one / (dx*dx)

      CHF_DTERM[
      i = pt(0) ;
      j = pt(1) ;
      k = pt(2) ]

      do var = 0, ncomp-1

         CHF_DTERM[
         lphi = ( (phi(CHF_IX[i+1 ; j  ; k  ], var)
     &           - phi(CHF_IX[i   ; j  ; k  ], var) )
     &         -  (phi(CHF_IX[i   ; j  ; k  ], var)
     &           - phi(CHF_IX[i-1 ; j  ; k  ], var) ) ) * dxinv2 ;
     &      +   ( (phi(CHF_IX[i   ; j+1; k  ], var)
     &           - phi(CHF_IX[i   ; j  ; k  ], var) )
     &         -  (phi(CHF_IX[i   ; j  ; k  ], var)
     &           - phi(CHF_IX[i   ; j-1; k  ], var) ) ) * dxinv2 ;
     &      +   ( (phi(CHF_IX[i   ; j  ; k+1], var)
     &           - phi(CHF_IX[i   ; j  ; k  ], var) )
     &         -  (phi(CHF_IX[i   ; j  ; k  ], var)
     &           - phi(CHF_IX[i   ; j  ; k-1], var) ) ) * dxinv2 ]

         lofphi(CHF_IX[i; j; k], var) =  lphi

      end do

      return
      end

C=======================================================
C     subroutine NODEGRAD
C     computes node-centered gradient
C
C     => inputs,  <= outputs
C     grdphi   <=   gradient of phi
C     phi       =>  phi
C     region    =>  box of indices of nodes over which to calculate grdphi
C     dx        =>  cell spacing
C
C     Warning:
C     - grdphi must have CH_SPACEDIM times as many components as phi.
C     - phi and gradphi must span region.
C     - phi needs one more node on all sides.
C
C     petermc, 28 Apr 2003
C=======================================================
      subroutine NODEGRAD(
     &     CHF_FRA[ grdphi ],
     &     CHF_CONST_FRA[ phi ],
     &     CHF_BOX[ region ],
     &     CHF_CONST_REAL[ dx ])

      REAL_T dxinvh
      integer var, ncomp, gbase

      integer CHF_DDECL[ i; j; k ]

      ncomp = CHF_NCOMP[ phi ]
      if (CH_SPACEDIM * ncomp .ne. CHF_NCOMP[grdphi]) then
c         print*, 'NODEGRAD:phi and rhs incompatible'
c         stop
         call MAYDAY_ERROR()
      endif

      dxinvh = half / dx
      do var = 0, ncomp-1
C          do idir = 0, CH_SPACEDIM-1

C             gvar = CH_SPACEDIM * var + idir

C             CHF_DTERM[
C             ii = CHF_ID(idir, 0) ;
C             jj = CHF_ID(idir, 1) ;
C             kk = CHF_ID(idir, 2) ]

C             CHF_MULTIDO[region; i; j; k]

C                phinxt = phi(CHF_IX[i+ii; j+jj; k+kk], var)
C                phiprv = phi(CHF_IX[i-ii; j-jj; k-kk], var)

C                grdphi(CHF_IX[i; j; k], gvar) =
C      &              (phinxt - phiprv) * dxinvh

C            CHF_ENDDO
C         end do

         gbase = CH_SPACEDIM * var

         CHF_MULTIDO[region; i; j; k]

            CHF_DTERM[
            grdphi(CHF_IX[i; j; k], gbase) =
     &           ( phi(CHF_IX[i+1 ; j   ; k   ], var)
     &           - phi(CHF_IX[i-1 ; j   ; k   ], var) ) * dxinvh ;
            grdphi(CHF_IX[i; j; k], gbase + 1) =
     &           ( phi(CHF_IX[i   ; j+1 ; k   ], var)
     &           - phi(CHF_IX[i   ; j-1 ; k   ], var) ) * dxinvh ;
            grdphi(CHF_IX[i; j; k], gbase + 2) =
     &           ( phi(CHF_IX[i   ; j   ; k+1 ], var)
     &           - phi(CHF_IX[i   ; j   ; k-1 ], var) ) * dxinvh ]

         CHF_ENDDO

      end do

      return
      end

C=======================================================
C     subroutine NODEGRADPOINT
C     computes node-centered gradient
C
C     => inputs,  <= outputs
C     grdphi   <=   gradient of phi
C     phi       =>  phi
C     pt        =>  index of node at which to calculate gradphi
C     dx        =>  cell spacing
C
C     Warning:
C     - grdphi must have CH_SPACEDIM times as many components as phi.
C     - phi and gradphi must span region.
C     - phi needs one more node on all sides.
C
C     adapted from NODEGRAD
C     petermc, 23 Jul 2003
C=======================================================
      subroutine NODEGRADPOINT(
     &     CHF_FRA[ grdphi ],
     &     CHF_CONST_FRA[ phi ],
     &     CHF_CONST_INTVECT[ pt ],
     &     CHF_CONST_REAL[ dx ])

      REAL_T dxinvh
      integer var, ncomp, gbase

      integer CHF_DDECL[ i; j; k ]

      ncomp = CHF_NCOMP[ phi ]
      if (CH_SPACEDIM * ncomp .ne. CHF_NCOMP[grdphi]) then
c         print*, 'NODEGRADPOINT:phi and rhs incompatible'
c         stop
         call MAYDAY_ERROR()
      endif

      dxinvh = half / dx

      CHF_DTERM[
      i = pt(0) ;
      j = pt(1) ;
      k = pt(2) ]

      do var = 0, ncomp-1

         gbase = CH_SPACEDIM * var

            CHF_DTERM[
            grdphi(CHF_IX[i; j; k], gbase) =
     &           ( phi(CHF_IX[i+1 ; j   ; k   ], var)
     &           - phi(CHF_IX[i-1 ; j   ; k   ], var) ) * dxinvh ;
            grdphi(CHF_IX[i; j; k], gbase + 1) =
     &           ( phi(CHF_IX[i   ; j+1 ; k   ], var)
     &           - phi(CHF_IX[i   ; j-1 ; k   ], var) ) * dxinvh ;
            grdphi(CHF_IX[i; j; k], gbase + 2) =
     &           ( phi(CHF_IX[i   ; j   ; k+1 ], var)
     &           - phi(CHF_IX[i   ; j   ; k-1 ], var) ) * dxinvh ]

C          do idir = 0, CH_SPACEDIM-1
C             gvar = CH_SPACEDIM * var + idir

C             CHF_DTERM[
C             ii = CHF_ID(idir, 0) ;
C             jj = CHF_ID(idir, 1) ;
C             kk = CHF_ID(idir, 2) ]

C             phinxt = phi(CHF_IX[pt(0)+ii; pt(1)+jj; pt(2)+kk], var)
C             phiprv = phi(CHF_IX[pt(0)-ii; pt(1)-jj; pt(2)-kk], var)

C             grdphi(CHF_IX[pt(0); pt(1); pt(2)], gvar) =
C      &           (phinxt - phiprv) * dxinvh
C         end do

      end do

      return
      end

C=======================================================
C     subroutine NODEGSRBLEVELLAP
C     performs GSRB on a level for the Poisson equation
C
C     => inputs,  <= outputs
C     phi      <=> phi
C     rhs       => rhs
C     region    => region on which to relax
C     dx        => grid spacing
C     redBlack  => which pass we are on, even (0) or odd (1)
C
C     Warning: phi, rhs must have the same number
C     of components and span region.  Phi needs one more cell on
C     all sides
C
C     adapted from GSRBLEVELLAP by dtgraves nov 2, 1999
C     petermc, 1 Feb 2001
C=======================================================
      subroutine NODEGSRBLEVELLAP(
     &     CHF_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_INT[redBlack])

      REAL_T lambda
      REAL_T dxinv2, lphi
      integer CHF_DDECL[i; j; k]
      integer imin, imax, var, ncomp, indtot

      dxinv2 = one/(dx*dx)

      lambda = (dx*dx) / (two*CH_SPACEDIM)

      ncomp = CHF_NCOMP[phi]
      if(ncomp .ne. CHF_NCOMP[rhs]) then
c          print*, 'NODEGSRBLEVELLAP:phi and rhs incompatible'
c          stop
         call MAYDAY_ERROR()
      endif

      do var = 0, ncomp - 1

c     Loop over [i; j; k] such that i+j+k has same parity as redBlack
#if CH_SPACEDIM>=3
         do k = CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM>=2
            do j = CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
               imin = CHF_LBOUND[region; 0]
c     possibly add 1 to imin, so that imin+j+k has same parity as redBlack
               CHF_DTERM[indtot = imin ; + j ; + k ]
               imin = imin + mod(indtot + redBlack, 2)
               imax = CHF_UBOUND[region; 0]
               do i = imin, imax, 2
#ifndef NDEBUG
                  if (mod(CHF_DTERM[i; +j; +k], 2) .ne. redBlack) then
                     print *, 'NODEGSRBLEVELLAP:  computing ',
     &                    CHF_DTERM[i, ; j, ; k, ]
     &                    ' at pass ', redBlack
                  endif
#endif

c     lphi is the expression for L(phi) at [i; j; k] without
c     the phi[i; j; k] term.

c     We have L(phi) == lphi - 2*CH_SPACEDIM*dxinv2 * phi
c                    == lphi - phi / lambda

C                   lphi = zero
C                   do idir = 0, CH_SPACEDIM-1
C                      CHF_DTERM[
C                      ii = CHF_ID(idir, 0) ;
C                      jj = CHF_ID(idir, 1) ;
C                      kk = CHF_ID(idir, 2) ]

C                      phinxt = phi(CHF_IX[i+ii; j+jj; k+kk], var)
C                      phiprv = phi(CHF_IX[i-ii; j-jj; k-kk], var)

C                      lphi = lphi + dxinv2 * (phinxt + phiprv)
C                   enddo

            CHF_DTERM[
            lphi = ( (phi(CHF_IX[i+1 ; j  ; k  ], var)
     &              + phi(CHF_IX[i-1 ; j  ; k  ], var) ) ) * dxinv2 ;
     &         +   ( (phi(CHF_IX[i   ; j+1; k  ], var)
     &              + phi(CHF_IX[i   ; j-1; k  ], var) ) ) * dxinv2 ;
     &         +   ( (phi(CHF_IX[i   ; j  ; k+1], var)
     &              + phi(CHF_IX[i   ; j  ; k-1], var) ) ) * dxinv2 ]

c     Set phi = phi + lambda * (L(phi) - rhs)
c             = phi + lambda * (lphi - phi / lambda - rhs)
c             = lambda * (lphi - rhs)

                  phi(CHF_IX[i;j;k], var) =
     &                 lambda * (lphi - rhs(CHF_IX[i;j;k], var))

c     End loops over 2 or 3 dimensions.
               enddo
#if CH_SPACEDIM>=2
            enddo
#endif
#if CH_SPACEDIM>=3
         enddo
#endif

c     End loop over variable.
      enddo

      return
      end
