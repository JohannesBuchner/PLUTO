C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

ccccccccccccccccccccccccccccccc
c     piecewise constant interpolation
c     bref is a box that will go from(0,0,0) to(refratio-1)*(1,1,1)
cccccccccccccccccccccccccccc
#include "CONSTANTS.H"
      subroutine ebinterpconstant(
     &     CHF_FRA1[fine],
     &     CHF_CONST_FRA1[coarse],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[refratio],
     &     CHF_BOX[bref]
     &     )

      integer CHF_DDECL[icc; jcc; kcc]
      integer CHF_DDECL[iff; jff; kff]
      integer CHF_DDECL[ii; jj; kk]

c     compute on the refined box of each coarse point
      CHF_MULTIDO[b; icc; jcc; kcc]
      CHF_MULTIDO[bref; ii; jj; kk]

      CHF_DTERM[
      iff = icc*refratio + ii;
      jff = jcc*refratio + jj;
      kff = kcc*refratio + kk]

      fine(CHF_IX[iff;jff;kff]) = coarse(CHF_IX[icc;jcc;kcc])

      CHF_ENDDO
      CHF_ENDDO

      return
      end

cccccccccccccccccccccc
c     calculate slopes with central difference formula
cccccccccccccccccccccc
      subroutine ebcentralslope(
     &     CHF_FRA1[slope],
     &     CHF_CONST_FRA1[state],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[dir]
     &     )

      integer CHF_DDECL[i,ii; j,jj; k,kk]

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir)]

      CHF_MULTIDO[b; i; j; k]

      slope(CHF_IX[i;j;k]) = half *(
     &     state(CHF_IX[i+ii; j+jj; k+kk]) -
     &     state(CHF_IX[i-ii; j-jj; k-kk]))

      CHF_ENDDO

      return
      end
cccccccccccccccccccc
c     calculate slopes with high one-sided difference formula
cccccccccccccccccccc
      subroutine ebhisideslope(
     &     CHF_FRA1[slope],
     &     CHF_CONST_FRA1[state],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[dir]
     &     )

      integer CHF_DDECL[i,ii; j,jj; k,kk]

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir)]

      CHF_MULTIDO[b; i; j; k]

      slope(CHF_IX[i;j;k]) =
     &     state(CHF_IX[i+ii;j+jj;k+kk]) -
     &     state(CHF_IX[i   ;j   ;k   ])

      CHF_ENDDO

      return
      end
c
c     calculate slopes with low one-sided difference formula
c
      subroutine eblosideslope(
     &     CHF_FRA1[slope],
     &     CHF_CONST_FRA1[state],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[dir]
     &     )

      integer CHF_DDECL[i,ii; j,jj; k,kk]

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir)]

      CHF_MULTIDO[b; i; j; k]

      slope(CHF_IX[i;j;k]) =
     &     state(CHF_IX[i   ;j   ;k   ]) -
     &     state(CHF_IX[i-ii;j-jj;k-kk])

      CHF_ENDDO

      return
      end

c     cccccccccccccc
c     maxminmod limiting
c     cccccccccccccccc

      subroutine ebmaxminmod(
     &     CHF_FRA1[mmslope],
     &     CHF_CONST_FRA1[loslope],
     &     CHF_CONST_FRA1[hislope],
     &     CHF_BOX[slopebox]
     &     )

      integer CHF_DDECL[i;j;k]
      REAL_T deltal, deltar, mono, rsign, finslope

      CHF_MULTIDO[slopebox; i; j; k]

      deltal = loslope(CHF_IX[i;j;k])
      deltar = hislope(CHF_IX[i;j;k])
      mono = deltal*deltar

      if(mono .gt. zero) then
         rsign = sign(one, deltal + deltar)
         finslope = rsign*(min(abs(deltal), abs(deltar)))
      else
         finslope = zero
      endif

      mmslope(CHF_IX[i;j;k]) = finslope

      CHF_ENDDO

      return
      end
ccccccccccccccccccccccccccccccccccccccccc
c     piecewise bi-(tri-)linear interpolation to "fine" assuming that
c     piecewise constant interpolation has already been done
c     bref is a box that will go from(0,0,0) to(refratio-1)*(1,1,1)
ccccccccccccccccccccccccccccccccccccccccc
      subroutine ebinterplinear(
     &     CHF_FRA1[fine],
     &     CHF_CONST_FRA1[slope],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[dir],
     &     CHF_CONST_INT[refratio],
     &     CHF_BOX[bref]
     &     )

      integer CHF_DDECL[icc; jcc; kcc]
      integer CHF_DDECL[iff; jff; kff]
      integer CHF_DDECL[ii; jj; kk]
      integer id

      REAL_T dxf

c     compute on the refined box of each coarse point
      CHF_MULTIDO[b; icc; jcc; kcc]

      CHF_MULTIDO[bref; ii; jj; kk]

      CHF_DTERM[
      iff = icc*refratio + ii;
      jff = jcc*refratio + jj;
      kff = kcc*refratio + kk]

      CHF_DTERM[
      if(dir .eq. 0) then
         id = ii;
      else if(dir .eq. 1) then
         id = jj;
      else if(dir .eq. 2) then
         id = kk]
      endif
      dxf = -half +((id+half) / refratio)

      fine(CHF_IX[iff;jff;kff]) =
     &     fine(CHF_IX[iff;jff;kff]) +
     &     dxf*slope(CHF_IX[icc; jcc; kcc])

      CHF_ENDDO
      CHF_ENDDO

      return
      end

      subroutine ebinterpsmootherlinear(
     &     CHF_FRA1[fine],
     &     CHF_CONST_FRA1[coarse],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[refratio],
     &     CHF_BOX[bref]
     &     )

      return
      end

      subroutine ebinterpquadratic(
     &     CHF_FRA1[fine],
     &     CHF_CONST_FRA1[coarse],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[refratio],
     &     CHF_BOX[bref]
     &     )

      return
      end

      subroutine ebinterpquadshift(
     &     CHF_FRA1[fine],
     &     CHF_CONST_FRA1[coarse],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[refratio],
     &     CHF_CONST_INTVECT[ishift],
     &     CHF_BOX[bref]
     &     )

      return
      end

