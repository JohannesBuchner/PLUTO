C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
c     cccccccccccccccccccccccccccc
c     ebaverage
c     average fine values onto coarse
c
c     coarse <= coarse data
c     fine   => fine data
c     refrat => refinement ratio
c     coarbox => coarse box over which to average
c     bref => box from (0,0) to (refratio-1,refratio-1)
c     coarse must exist over refine(coarbox, refratio)
c     dtgraves aug 17 2001
c     cccccccccccccccccccccccccccc

      subroutine ebaverage(
     &     chf_fra1[coarse],
     &     chf_const_fra1[fine],
     &     chf_box[coarbox],
     &     chf_const_int[refrat],
     &     chf_box[ bref ])

      integer chf_ddecl[icc; jcc; kcc]
      integer chf_ddecl[iff; jff; kff]
      integer chf_ddecl[ii; jj; kk]

      real_t refscale, coarsesum, frefine

      refscale = one
      frefine = refrat
      do ii = 1, CH_SPACEDIM
         refscale = refscale/frefine
      enddo

      chf_multido[coarbox ; icc; jcc; kcc ]

      coarsesum = zero

      chf_multido[ bref; ii; jj; kk ]

      chf_dterm[
      iff = icc*refrat + ii;
      jff = jcc*refrat + jj;
      kff = kcc*refrat + kk ]

      coarsesum = coarsesum + fine(chf_ix[iff;jff;kff])

      chf_enddo

      coarse(chf_ix[icc;jcc;kcc]) = coarsesum * refscale

      chf_enddo

      return
      end

c     cccccccccccccccccccccccccccc
c     ebaverarz
c     average fine values onto coarse
c     in rz space
c     coarse <= coarse data
c     fine   => fine data
c     refrat => refinement ratio
c     coarbox => coarse box over which to average
c     bref => box from (0,0) to (refratio-1,refratio-1)
c     coarse must exist over refine(coarbox, refratio)
c     dtgraves 6-04-2003
c     cccccccccccccccccccccccccccc

      subroutine ebaverarz(
     &     chf_fra1[coarse],
     &     chf_const_fra1[fine],
     &     chf_box[coarbox],
     &     chf_const_int[refrat],
     &     chf_box[ bref ],
     &     chf_real[dxcoar],
     &     chf_real[dxfine])

      integer chf_ddecl[icc; jcc; kcc]
      integer chf_ddecl[iff; jff; kff]
      integer chf_ddecl[ii; jj; kk]

      real_t coarsesum, coarsevol, finevol, sumfinevol

      chf_multido[coarbox ; icc; jcc; kcc ]

      coarsesum = zero
      sumfinevol = zero

      chf_multido[ bref; ii; jj; kk ]

      chf_dterm[
      iff = icc*refrat + ii;
      jff = jcc*refrat + jj;
      kff = kcc*refrat + kk ]

c     fine vol = rmid dr dz
      finevol = (iff + half)*dxfine*dxfine*dxfine
      sumfinevol = sumfinevol + finevol
      coarsesum = coarsesum + finevol*fine(chf_ix[iff;jff;kff])

      chf_enddo
      coarsevol = (icc + half)*dxcoar*dxcoar*dxcoar

      coarse(chf_ix[icc;jcc;kcc]) = coarsesum/coarsevol

      chf_enddo

      return
      end

c     cccccccccccccccccccccccccccc
c     ebaverageface
c     average fine values onto coarse
c
c     coarse <= coarse data
c     fine   => fine data
c     refrat => refinement ratio
c     coarbox => coarse box over which to average
c     bref => box from (0,0) to (refratio-1,refratio-1)
c     coarse must exist over refine(coarbox, refratio)
c     dtgraves aug 17 2001, modified for face data mfbarad jan 2005
c     cccccccccccccccccccccccccccc

      subroutine ebaverageface(
     &     chf_fra1[coarse],
     &     chf_const_fra1[fine],
     &     chf_box[coarbox],
     &     chf_const_int[refrat],
     &     chf_box[ bref ],
     &     chf_const_int[idir])

      integer chf_ddecl[idoloop; jdoloop; kdoloop]
      integer chf_ddecl[icc; jcc; kcc]
      integer chf_ddecl[iff; jff; kff]
      integer chf_ddecl[ii; jj; kk]

      real_t refscale, coarsesum, frefine

      CHF_DTERM[
      idoloop = 1-CHF_ID(idir,0);
      jdoloop = 1-CHF_ID(idir,1);
      kdoloop = 1-CHF_ID(idir,2)]

      refscale = one
      frefine = refrat
      do ii = 1, (CH_SPACEDIM - 1)
         refscale = refscale/frefine
      enddo

      chf_multido[coarbox ; icc; jcc; kcc ]

      coarsesum = zero

#if (CH_SPACEDIM == 3)
      do kk = 0,(refrat-1)*kdoloop
#endif
         do jj = 0,(refrat-1)*jdoloop
            do ii = 0,(refrat-1)*idoloop

               chf_dterm[
               iff = icc*refrat + ii;
               jff = jcc*refrat + jj;
               kff = kcc*refrat + kk ]

               coarsesum = coarsesum + fine(chf_ix[iff;jff;kff])
            enddo
         enddo
#if (CH_SPACEDIM == 3)
      enddo
#endif

      coarse(chf_ix[icc;jcc;kcc]) = coarsesum * refscale

      chf_enddo

      return
      end
c     cccccccccccccccccccccccccccc
c     ebcoarsen
c     coarsen fine values onto coarse using fourth order coarsening
c
c     coarse <= coarse data
c     fine   => fine data
c     refrat => refinement ratio
c     coarbox => coarse box over which to average
c     bref => box from (0,0) to (refratio-1,refratio-1)
c     coarse must exist over refine(coarbox, refratio)
c     mfb spring 2005
c     cccccccccccccccccccccccccccc

      subroutine ebcoarsen(
     &     chf_fra1[coarse],
     &     chf_const_fra1[fine],
     &     chf_const_fra1[h2laplfine],
     &     chf_box[coarbox],
     &     chf_const_int[refrat],
     &     chf_box[ bref ])

      integer chf_ddecl[icc; jcc; kcc]
      integer chf_ddecl[iff; jff; kff]
      integer chf_ddecl[ii; jj; kk]
      real_t refscale,coarsesum,frefine,coarseave,laplsum, laplave

      refscale = one
      frefine = refrat
      do ii = 1, CH_SPACEDIM
         refscale = refscale/2
      enddo

      chf_multido[coarbox ; icc; jcc; kcc ]


c     loop over the center 4 (or 6 in 3D) fine cells
c     find the average laplacian and average value
      laplsum   = zero
      coarsesum = zero
      chf_multido[ bref; ii; jj; kk ]

      chf_dterm[
      iff = icc*refrat + ii;
      jff = jcc*refrat + jj;
      kff = kcc*refrat + kk ]

      coarsesum = coarsesum +       fine(chf_ix[iff;jff;kff])

      laplsum   = laplsum   + h2laplfine(chf_ix[iff;jff;kff])

      chf_enddo

      laplave   =   laplsum * refscale
      coarseave = coarsesum * refscale

c     do 4th order accurate coarsening
      coarse(chf_ix[icc;jcc;kcc]) = coarseave - laplave/eight

      chf_enddo

      return
      end
ccccccccccccccccccc
c compute h^2*lapl(phi)
cccccccccccccccccc
      subroutine h2lapl1dadditive(
     &     chf_fra1[opphidir],
     &     chf_const_fra1[phi],
     &     chf_const_int[idir],
     &     chf_box[lobox],
     &     chf_const_int[haslo],
     &     chf_box[hibox],
     &     chf_const_int[hashi],
     &     chf_box[centerbox])

      integer chf_ddecl[i;j;k]
      integer chf_ddecl[ioff;joff;koff]


      chf_dterm[
      ioff = chf_id(0,idir);
      joff = chf_id(1,idir);
      koff = chf_id(2,idir)]

c     straight up lapl on centerbox
      chf_multido[centerbox;i;j;k]

      opphidir(chf_ix[i;j;k]) = opphidir(chf_ix[i;j;k]) +
     $     (    phi(chf_ix[i+ioff;j+joff;k+koff])
     &     -two*phi(chf_ix[i     ;j     ;k     ])
     &     +    phi(chf_ix[i-ioff;j-joff;k-koff]))

      chf_enddo

c     on low box shift high
      if (haslo .eq. 1) then
         chf_multido[lobox;i;j;k]

         opphidir(chf_ix[i;j;k]) = opphidir(chf_ix[i;j;k]) +
     $        (    phi(chf_ix[i       ;j       ;k       ])
     &        -two*phi(chf_ix[i+  ioff;j+  joff;k+  koff])
     &        +    phi(chf_ix[i+2*ioff;j+2*joff;k+2*koff]))


         chf_enddo
      endif

c     on high box shift low
      if (hashi .eq. 1) then
         chf_multido[hibox;i;j;k]

         opphidir(chf_ix[i;j;k]) = opphidir(chf_ix[i;j;k]) +
     $        (    phi(chf_ix[i       ;j       ;k       ])
     &        -two*phi(chf_ix[i-  ioff;j-  joff;k-  koff])
     &        +    phi(chf_ix[i-2*ioff;j-2*joff;k-2*koff]))

         chf_enddo
      endif

      return
      end
