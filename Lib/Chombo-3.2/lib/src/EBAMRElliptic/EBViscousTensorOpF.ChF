C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
      subroutine cellgradebvtop(
     $     chf_fra1[grad],
     $     chf_const_fra1[vel],
     $     chf_const_real[dx],
     $     chf_box[lobox],
     $     chf_box[hibox],
     $     chf_box[centerbox],
     $     chf_const_int[haslo],
     $     chf_const_int[hashi],
     $     chf_const_int[divdir])

      integer chf_ddecl[ii,i;jj,j;kk,k]

      chf_dterm[
      ii = chf_id(divdir, 0);
      jj = chf_id(divdir, 1);
      kk = chf_id(divdir, 2)]

      chf_multido[centerbox;i;j;k]

      grad(chf_ix[i;j;k]) =
     $     (    vel(chf_ix[i+ii;j+jj;k+kk])
     $     -    vel(chf_ix[i-ii;j-jj;k-kk]) )/(two*dx)


      chf_enddo

      if(haslo.eq.1) then
         chf_multido[lobox;i;j;k]

         grad(chf_ix[i;j;k]) =
     $        (    vel(chf_ix[i+ii;j+jj;k+kk])
     $        -    vel(chf_ix[i   ;j   ;k   ]) )/(dx)

         chf_enddo
      endif

      if(hashi.eq.1) then
         chf_multido[hibox;i;j;k]

         grad(chf_ix[i;j;k]) =
     $        (    vel(chf_ix[i   ;j   ;k   ])
     $        -    vel(chf_ix[i-ii;j-jj;k-kk]) )/(dx)

         chf_enddo
      endif

      return
      end

      subroutine incrapplyebvtop(
     $     chf_fra1[lhs],
     $     chf_const_fra1[interiorflux],
     $     chf_const_fra1[domainfluxlo],
     $     chf_const_fra1[domainfluxhi],
     $     chf_const_real[beta],
     $     chf_const_real[dx],
     $     chf_box[lobox],
     $     chf_box[hibox],
     $     chf_box[centerbox],
     $     chf_const_int[haslo],
     $     chf_const_int[hashi],
     $     chf_const_int[facedir])

      integer chf_ddecl[ii,i;jj,j;kk,k]


      chf_dterm[
      ii = chf_id(facedir, 0);
      jj = chf_id(facedir, 1);
      kk = chf_id(facedir, 2)]

      chf_multido[centerbox; i; j; k]

      lhs(chf_ix[i;j;k]) = lhs(chf_ix[i;j;k])
     $     +beta*
     $     (interiorflux(chf_ix[i+ii;j+jj;k+kk])
     $     -interiorflux(chf_ix[i   ;j   ;k   ]))/dx

      chf_enddo


      if(haslo .eq. 1) then
         chf_multido[lobox; i; j; k]

         lhs(chf_ix[i;j;k]) = lhs(chf_ix[i;j;k])
     $        + beta*
     $        (interiorflux(chf_ix[i+ii;j+jj;k+kk])
     $        -domainfluxlo(chf_ix[i   ;j   ;k   ]))/dx

         chf_enddo
      endif

      if(hashi .eq. 1) then
         chf_multido[hibox; i; j; k]

         lhs(chf_ix[i;j;k]) = lhs(chf_ix[i;j;k])
     $        + beta*
     $        (domainfluxhi(chf_ix[i+ii;j+jj;k+kk])
     $        -interiorflux(chf_ix[i   ;j   ;k   ]))/dx

         chf_enddo
      endif


      return
      end




      subroutine normalgradviscdirch(
     $     chf_fra1[gradvelface],
     $     chf_const_fra1[velcomp],
     $     chf_const_fra1[velvalu],
     $     chf_box[facebox],
     $     chf_const_real[dx],
     $     chf_const_int[iside],
     $     chf_const_int[divdir]
     $     )

      integer chf_ddecl[i,id;j,jd;k,kd]
      real_t val0, val1, val2, denom



      chf_dterm[
      id = chf_id(divdir, 0);
      jd = chf_id(divdir, 1);
      kd = chf_id(divdir, 2)]

      if(iside.eq.-1) then

         chf_multido[facebox;i;j;k]

         val0 = velvalu(chf_ix[i   ;j   ;k   ])
         val1 = velcomp(chf_ix[i   ;j   ;k   ])
         val2 = velcomp(chf_ix[i+id;j+jd;k+kd])
c         denom = three*dx
c         gradvelface(chf_ix[i;j;k]) = (nine*(val1-val0)-(val2-val0))/denom
         denom = half*dx
         gradvelface(chf_ix[i;j;k]) = (val1-val0)/denom

         chf_enddo

      else

         chf_multido[facebox;i;j;k]

         val0 = velvalu(chf_ix[i     ;j     ;k     ])
         val1 = velcomp(chf_ix[i-  id;j-  jd;k-  kd])
         val2 = velcomp(chf_ix[i-2*id;j-2*jd;k-2*kd])
c         denom = -three*dx
c         gradvelface(chf_ix[i;j;k]) = (nine*(val1-val0)-(val2-val0))/denom
         denom = -half*dx
         gradvelface(chf_ix[i;j;k]) = (val1-val0)/denom

         chf_enddo

      endif


      return
      end

      subroutine slipwallgrad(
     $     chf_fra1[gradvelface],
     $     chf_const_fra1[velcomp],
     $     chf_box[facebox],
     $     chf_const_real[dx],
     $     chf_const_int[veldir],
     $     chf_const_int[divdir],
     $     chf_const_int[iside],
     $     chf_box[lobox],
     $     chf_box[hibox],
     $     chf_box[centerbox],
     $     chf_const_int[haslo],
     $     chf_const_int[hashi],
     $     chf_const_int[facedir]
     $     )

      integer chf_ddecl[i,id,iv;j,jd,jv;k,kd,kv]
      real_t  val1, val2



      chf_dterm[
      id = chf_id(facedir, 0);
      jd = chf_id(facedir, 1);
      kd = chf_id(facedir, 2)]

      chf_dterm[
      iv = chf_id(divdir, 0);
      jv = chf_id(divdir, 1);
      kv = chf_id(divdir, 2)]

      if(facedir.eq.veldir) then

         if(iside.eq.-1) then

            chf_multido[facebox;i;j;k]

            val1 = velcomp(chf_ix[i   ;j   ;k   ])
            gradvelface(chf_ix[i;j;k]) = two*val1/dx

            chf_enddo

         else

            chf_multido[facebox;i;j;k]

            val1 = velcomp(chf_ix[i-  id;j-  jd;k-  kd])
            gradvelface(chf_ix[i;j;k]) = -two*val1/dx

            chf_enddo

         endif
c     facedir != veldir
      else

         if(iside.eq.-1) then

            chf_multido[centerbox;i;j;k]

            val1 = velcomp(chf_ix[i+iv;j+jv;k+kv])
            val2 = velcomp(chf_ix[i-iv;j-jv;k-kv])
            gradvelface(chf_ix[i;j;k]) = (val1-val2)/(two*dx)

            chf_enddo

            if(haslo.eq.1) then

               chf_multido[lobox;i;j;k]

               val1 = velcomp(chf_ix[i+iv;j+jv;k+kv])
               val2 = velcomp(chf_ix[i   ;j   ;k   ])
               gradvelface(chf_ix[i;j;k]) = (val1-val2)/(dx)

               chf_enddo

            endif

            if(hashi.eq.1) then

               chf_multido[hibox;i;j;k]

               val1 = velcomp(chf_ix[i   ;j   ;k   ])
               val2 = velcomp(chf_ix[i-iv;j-jv;k-kv])
               gradvelface(chf_ix[i;j;k]) = (val1-val2)/(dx)

               chf_enddo

            endif

c     hi side
         else

         chf_multido[centerbox;i;j;k]

            val1 = velcomp(chf_ix[i-id+iv;j-jd+jv;k-kd+kv])
            val2 = velcomp(chf_ix[i-id-iv;j-jd-jv;k-kd-kv])
            gradvelface(chf_ix[i;j;k]) = (val1-val2)/(two*dx)

         chf_enddo

         if(haslo.eq.1) then
            chf_multido[lobox;i;j;k]

            val1 = velcomp(chf_ix[i-id+iv;j-jd+jv;k-kd+kv])
            val2 = velcomp(chf_ix[i-id   ;j-jd   ;k-kd   ])
            gradvelface(chf_ix[i;j;k]) = (val1-val2)/(dx)

            chf_enddo
         endif

         if(hashi.eq.1) then
            chf_multido[hibox;i;j;k]

            val1 = velcomp(chf_ix[i-id   ;j-jd   ;k-kd   ])
            val2 = velcomp(chf_ix[i-id-iv;j-jd-jv;k-kd-kv])
            gradvelface(chf_ix[i;j;k]) = (val1-val2)/(dx)

            chf_enddo
         endif

         endif
      endif

      return
      end

      subroutine veldotsigma(
     $     chf_fra[veldotsig],
     $     chf_const_fra[vel],
     $     chf_const_fra[sig],
     $     chf_box[facebox])

      integer chf_ddecl[i;j;k]
      integer icomp
      real_t sum



      chf_multido[facebox;i;j;k]

      sum = zero
      do icomp = 0, CH_SPACEDIM-1
         sum = sum + vel(chf_ix[i;j;k], icomp)*sig(chf_ix[i;j;k], icomp)
      enddo

      veldotsig(chf_ix[i;j;k], 0) = sum

      chf_enddo

      return
      end



      subroutine incrpointdotprod(
     $     chf_fra1[sigmadotgradu],
     $     chf_const_fra1[gradu],
     $     chf_const_fra1[sigma],
     $     chf_box[box])

      integer chf_ddecl[i;j;k]
      real_t incr

      chf_multido[box;i;j;k]

      incr =  gradu(chf_ix[i;j;k])*sigma(chf_ix[i;j;k])

      sigmadotgradu(chf_ix[i;j;k]) = sigmadotgradu(chf_ix[i;j;k]) + incr

      chf_enddo

      return
      end



      subroutine incrccsigmalambda(
     $     chf_fra1[sigma],
     $     chf_const_fra[gradu],
     $     chf_const_fra1[lambda],
     $     chf_box[grid],
     $     chf_const_int[diagcomp])

      integer chf_ddecl[i;j;k]


      chf_multido[grid; i; j; k]

        sigma(chf_ix[i;j;k]) = sigma(chf_ix[i;j;k])
     $     + lambda(chf_ix[i;j;k])*gradu(chf_ix[i;j;k], diagcomp)

      chf_enddo

      return
      end


      subroutine incrccsigmaeta(
     $     chf_fra1[sigma],
     $     chf_const_fra[gradu],
     $     chf_const_fra1[eta],
     $     chf_box[grid],
     $     chf_const_int[gradcomp],
     $     chf_const_int[trancomp])

      integer chf_ddecl[i;j;k]


      chf_multido[grid; i; j; k]

      sigma(chf_ix[i;j;k]) = sigma(chf_ix[i;j;k])
     $     +  eta(chf_ix[i;j;k])*
     $     (gradu(chf_ix[i;j;k], gradcomp)
     $     +gradu(chf_ix[i;j;k], trancomp))

      chf_enddo

      return
      end
      subroutine incrfacetocellaverage(
     $     chf_fra1[cellcoef],
     $     chf_const_fra1[facecoef],
     $     chf_const_int[facedir],
     $     chf_box[grid],
     $     chf_real[nfacesper])

      integer chf_ddecl[ii,i;jj,j;kk,k]


      chf_dterm[
      ii = chf_id(facedir, 0);
      jj = chf_id(facedir, 1);
      kk = chf_id(facedir, 2)]

      chf_multido[grid; i; j; k]

        cellcoef(chf_ix[i;j;k]) = cellcoef(chf_ix[i;j;k])   +
     $     (facecoef(chf_ix[i+ii;j+jj;k+kk])
     $     +facecoef(chf_ix[i   ;j   ;k   ]))/nfacesper

      chf_enddo

      return
      end
