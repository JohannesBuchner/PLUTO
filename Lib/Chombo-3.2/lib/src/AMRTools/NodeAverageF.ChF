C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

C=======================================================
C     subroutine NODEAVERAGE
C     Average node-centered data from fine grid to coarse grid.
C     => inputs, <= outputs
C     coarse   <=> data on coarse grid, is overwritten on b
C     fine      => data on fine grid
C     b         => box containing indices of coarse nodes
C                  where we compute the average
C     ref_ratio => refinement ratio
C     weight    => weight array of 1 component defined on the box
C                  ref_ratio/2 * [[-1]^D : [1]^D].
C                  weight(foff, 0) is the weight of the the fine
C                  point ref_ratio * crse + foff in averaging to
C                  crse, where foff is in [[-1]^D : [1]^D].
C
C     Warning:  the domain of fine must include all points in
C        ref_ratio * crse + ref_ratio/2 * [[-1]^D : [1]^D]
C     for every point crse in b.
C
C     adapted from AVERAGE
C     petermc, Dec 21, 2000
C=======================================================
      subroutine NODEAVERAGE(
     &    CHF_FRA[coarse],
     &    CHF_CONST_FRA[fine],
     &    CHF_BOX[b],
     &    CHF_CONST_INT[ref_ratio],
     &    CHF_CONST_FRA[weight])

c weight is on box [ref_ratio/2 * [-1]^D : ref_ratio/2 * [1]^D]

      integer var
      integer CHF_AUTODECL[icrse]
      integer CHF_AUTODECL[ifine]
      integer CHF_AUTODECL[ii]
      REAL_T csum

      do var = 0, CHF_NCOMP[coarse] - 1
c var:  index of component

         CHF_AUTOMULTIDO[ b;icrse]

            csum = 0

            CHF_AUTOMULTIDO[ weight;ii]

c weight is on box  ref_ratio/2 * [[-1]^D : [1]^D]
c so ii, jj, kk are in [-ref_ratio/2 : ref_ratio/2]

               CHF_DTERM[
               ifine0 = icrse0*ref_ratio + ii0 ;
               ifine1 = icrse1*ref_ratio + ii1 ;
               ifine2 = icrse2*ref_ratio + ii2 ;
               ifine3 = icrse3*ref_ratio + ii3 ;
               ifine4 = icrse4*ref_ratio + ii4 ;
               ifine5 = icrse5*ref_ratio + ii5]



               csum = csum + weight( CHF_AUTOIX[ii], 0) *
     &                 fine( CHF_AUTOIX[ifine], var )

            CHF_ENDDO


            coarse( CHF_AUTOIX[icrse], var ) = csum

         CHF_ENDDO

      end do

      return
      end



C=======================================================
C     subroutine NODEAVERAGEPOINT
C     Average node-centered data from fine grid to coarse grid,
C     at one point.
C     => inputs, <= outputs
C     coarse   <=> data on coarse grid, is overwritten on b
C     fine      => data on fine grid
C     pcrse     => index of coarse node
C                  where we compute the average
C     ref_ratio => refinement ratio
C     weight    => weight array of 1 component defined on the box
C                  ref_ratio/2 * [[-1]^D : [1]^D].
C                  weight(foff, 0) is the weight of the the fine
C                  point ref_ratio * crse + foff in averaging to
C                  crse, where foff is in [[-1]^D : [1]^D].
C
C     Warning:  the domain of fine must include all points in
C        ref_ratio * pcrse + ref_ratio/2 * [[-1]^D : [1]^D]
C
C     adapted from NODEAVERAGE
C     petermc, 23 Jul 2003
C=======================================================
      subroutine NODEAVERAGEPOINT(
     &    CHF_FRA[coarse],
     &    CHF_CONST_FRA[fine],
     &    CHF_CONST_INTVECT[pcrse],
     &    CHF_CONST_INT[ref_ratio],
     &    CHF_CONST_FRA[weight])

c weight is on box [ref_ratio/2 * [-1]^D : ref_ratio/2 * [1]^D]

      integer var
      integer CHF_AUTODECL[ifine]
      integer CHF_AUTODECL[ii]
      REAL_T csum, weightpt, finept

      do var = 0, CHF_NCOMP[coarse] - 1
c var:  index of component

         csum = 0

         CHF_AUTOMULTIDO[ weight;ii]

c weight is on box  ref_ratio/2 * [[-1]^D : [1]^D]
c so ii, jj, kk are in [-ref_ratio/2 : ref_ratio/2]

            CHF_DTERM[
            ifine0 = pcrse(0)*ref_ratio + ii0 ;
            ifine1 = pcrse(1)*ref_ratio + ii1 ;
            ifine2 = pcrse(2)*ref_ratio + ii2 ;
            ifine3 = pcrse(3)*ref_ratio + ii3 ;
            ifine4 = pcrse(4)*ref_ratio + ii4 ;
            ifine5 = pcrse(5)*ref_ratio + ii5]


            weightpt = weight( CHF_AUTOIX[ii], 0)
            finept = fine( CHF_AUTOIX[ifine], var )

            csum = csum + weightpt*finept

         CHF_ENDDO


c   can't use AUTOIX because index is inside parentheses
         coarse(CHF_IX[pcrse(0);pcrse(1);pcrse(2);pcrse(3);pcrse(4);pcrse(5)], var ) = csum

      end do

      return
      end



C=======================================================
C     subroutine NODEAVERAGE_GETWEIGHTS
C     Get the weight array to be used in NODEAVERAGE
C     => inputs, <= outputs
C     weight   <=  weight array of 1 component defined on the box
C                  ref_ratio/2 * [[-1]^D : [1]^D].
C                  weight(foff, 0) is the weight of the the fine
C                  point ref_ratio * crse + foff in averaging to
C                  crse, where foff is in [[-1]^D : [1]^D].
C     ref_ratio => refinement ratio
C=======================================================
      subroutine NODEAVERAGE_GETWEIGHTS(
     &    CHF_FRA[weight],
     &    CHF_CONST_INT[ref_ratio])

      integer ext, nxtrm
      integer CHF_AUTODECL[ii]
      REAL_T ref_scale

c ext is the max distance of fine nodes used from coarse nodes
      ext = ref_ratio / 2
      ref_scale = one / (ref_ratio**CH_SPACEDIM)

c cell-centered:  just add up fine(subcells)/#(subcells).
c node-centered:  if refinement ratio is 2, then
c     8 for self, 4 if face, 2 if edge, 1 if corner connecting,
c     and then divide this sum by total weight.
c     generally:
c     weight is ref_scale * half**e,
c     where e is number of components at extremes,
c     meaning abs == ref_ratio/2.
c     this is tensor product of the trapezoidal rule.

c wt is on box [ref_ratio/2 * [-1]^D : ref_ratio/2 * [1]^D]

      CHF_AUTOMULTIDO[ weight; ii]

c nxtrm is the number of coordinates ii, jj, kk that lie at the extremes.
         nxtrm = 0
         CHF_DTERM[
         if (iabs(ii0) .eq. ext) nxtrm = nxtrm + 1 ;
         if (iabs(ii1) .eq. ext) nxtrm = nxtrm + 1 ;
         if (iabs(ii2) .eq. ext) nxtrm = nxtrm + 1 ;
         if (iabs(ii3) .eq. ext) nxtrm = nxtrm + 1 ;
         if (iabs(ii4) .eq. ext) nxtrm = nxtrm + 1 ;
         if (iabs(ii5) .eq. ext) nxtrm = nxtrm + 1]


         weight( CHF_AUTOIX[ii], 0) = ref_scale * half**nxtrm

      CHF_ENDDO

      return
      end
