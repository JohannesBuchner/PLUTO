C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

C=======================================================
C     subroutine NODEINTERPMG_GETWEIGHTS
C     returns weights for interpolation operator in NODEINTERPMG.
C
C     => inputs, <= outputs
C     nref       => refinement ratio
C     bref       => the box [[0]^D : [nref-1]^D]
C     wtcrnr     => work fab of 1 component on the box [[0]^D : [1]^D].
C                   wtcrnr(coff, 0) is weight of a coarse node
C                   c * nref + coff in interpolating to a fine node.
C
C     added by petermc, 14 Jun 2002
C=======================================================
      subroutine NODEINTERPMG_GETWEIGHTS(
     $     CHF_CONST_INT[nref],
     &     CHF_BOX[bref],
     &     CHF_FRA[wtcrnr])

      integer CHF_AUTODECL[iref]
      integer CHF_AUTODECL[ib]
      integer nvwt
      integer CHF_AUTODECL[ibmax]
      REAL_T refinv, wt
      REAL_T CHF_AUTODECL[fraci]
      REAL_T CHF_AUTODECL[wti]

      refinv = one / nref

      nvwt = 0
c     bref's coordinates go from 0 to nref-1.
c     loop order:  iref2, iref1, iref0
      CHF_AUTOMULTIDO[bref; iref]

c        nvwt == iref0 + nref * (iref1 + nref * iref2)

c     If [i|j|k]ref == 0 then extend coarse region by 1 in [i|j|k] direction
c     in order to get the nodes that lie on the boundary.

c     subroutine MAXB sets ibmax = 0 if iref == 0, ibmax = 1 otherwise.
         CHF_DTERM[
         call maxb(iref0, ibmax0) ;
         call maxb(iref1, ibmax1) ;
         call maxb(iref2, ibmax2) ;
         call maxb(iref3, ibmax3) ;
         call maxb(iref4, ibmax4) ;
         call maxb(iref5, ibmax5) ]

c     Calculate weights of the 2^D coarse neighbors in the interpolation
c     to the fine node  crse * nref + [iref; jref; kref]

         CHF_DTERM[
         fraci0 = iref0 * refinv ;
         fraci1 = iref1 * refinv ;
         fraci2 = iref2 * refinv ;
         fraci3 = iref3 * refinv ;
         fraci4 = iref4 * refinv ;
         fraci5 = iref5 * refinv ]

c     bcrnrs.max[dir] = (ref[dir] == 0) ? 0 : 1

C        Calculate wtcrnr[bcrnrs]
c         wttot = 0

c        CHF_AUTOMULTIDO[bcrnrs; ib]
         CHF_DTERM[
         do ib0 = 0, ibmax0 ;
         do ib1 = 0, ibmax1 ;
         do ib2 = 0, ibmax2 ;
         do ib3 = 0, ibmax3 ;
         do ib4 = 0, ibmax4 ;
         do ib5 = 0, ibmax5 ]

            wt = one

            CHF_DTERM[
            call wtside(ib0, fraci0, wti0)
            wt = wt * wti0 ;
            call wtside(ib1, fraci1, wti1)
            wt = wt * wti1 ;
            call wtside(ib2, fraci2, wti2)
            wt = wt * wti2 ;
            call wtside(ib3, fraci3, wti3)
            wt = wt * wti3 ;
            call wtside(ib4, fraci4, wti4)
            wt = wt * wti4 ;
            call wtside(ib5, fraci5, wti5)
            wt = wt * wti5 ]

            wtcrnr( CHF_AUTOIX[ib], nvwt ) = wt
c            wttot = wttot + wt

         CHF_DTERM[
         end do ;
         end do ;
         end do ;
         end do ;
         end do ;
         end do ]

c        should have wttot == one here.

         nvwt = nvwt + 1
      CHF_ENDDO

      return
      end



C=======================================================
C     subroutine NODEINTERPMG
C     interpolation operator -- adds coarse correction to fine solution
C     fine = fine + INTERP(crse)
C
C     => inputs, <= outputs
C     fine      <=> fine solution
C     crse       => coarse correction to fine solution
C     region     => CELL-centered coarse-level box with interpolation region
C     nref       => refinement ratio
C     bref       => the box [[0]^D : [nref-1]^D]
C     wtcrnr     => work fab of nref^D components on the box [[0]^D : [1]^D].
C                   wtcrnr(coff, nvwt) is weight of a coarse node
C                   c * nref + coff in interpolating to a fine node.
C
C     adapted from INTERPMG
C     petermc, 30 Jan 2001
C     modified 30 Mar 2001
C     modified wtcrnr, 14 Jun 2002
C=======================================================
      subroutine NODEINTERPMG(
     $     CHF_FRA[fine],
     $     CHF_CONST_FRA[crse],
     &     CHF_BOX[region],
     $     CHF_CONST_INT[nref],
     &     CHF_BOX[bref],
     &     CHF_FRA[wtcrnr])

      integer CHF_AUTODECL[iref], CHF_AUTODECL[icrse]
      integer CHF_AUTODECL[ifine], CHF_AUTODECL[ib];
      integer var, ncomp, nvwt

      integer CHF_AUTODECL[ibmax]
      integer CHF_AUTODECL[icmin]
      integer CHF_AUTODECL[icmax];
      REAL_T csum, refinv

      ncomp = CHF_NCOMP[fine]
      if (ncomp .ne. CHF_NCOMP[crse]) then
         print *, 'nodeinterpmg: fine and crse incompatible'
         call MAYDAY_ERROR()
      endif

      refinv = one / nref

      CHF_DTERM[
      icmin0 = CHF_LBOUND[region; 0] ;
      icmin1 = CHF_LBOUND[region; 1] ;
      icmin2 = CHF_LBOUND[region; 2] ;
      icmin3 = CHF_LBOUND[region; 3] ;
      icmin4 = CHF_LBOUND[region; 4] ;
      icmin5 = CHF_LBOUND[region; 5] ]

      nvwt = 0
c     bref's coordinates go from 0 to nref-1.
c     loop order:  kref, jref, iref
      CHF_AUTOMULTIDO[bref; iref]

c        nvwt == iref + nref * (jref + nref * kref)

c     If [i|j|k]ref == 0 then extend coarse region by 1 in [i|j|k] direction
c     in order to get the nodes that lie on the boundary.

c     subroutine MAXB sets ibmax = 0 if iref == 0, ibmax = 1 otherwise.
         CHF_DTERM[
         call maxb(iref0, ibmax0) ;
         call maxb(iref1, ibmax1) ;
         call maxb(iref2, ibmax2) ;
         call maxb(iref3, ibmax3) ;
         call maxb(iref4, ibmax4) ;
         call maxb(iref5, ibmax5) ]

         CHF_DTERM[
         icmax0 = CHF_UBOUND[region; 0] + (1-ibmax0) ;
         icmax1 = CHF_UBOUND[region; 1] + (1-ibmax1) ;
         icmax2 = CHF_UBOUND[region; 2] + (1-ibmax2) ;
         icmax3 = CHF_UBOUND[region; 3] + (1-ibmax3) ;
         icmax4 = CHF_UBOUND[region; 4] + (1-ibmax4) ;
         icmax5 = CHF_UBOUND[region; 5] + (1-ibmax5) ]

c     Interpolate to the fine node  crse * nref + [iref; jref; kref]
c     for each coarse node  crse  in
c     [[icmin; jcmin; kcmin] : [icmax; jcmax; kcmax]].

c     bcrnrs.max[dir] = (ref[dir] == 0) ? 0 : 1

c        CHF_AUTOMULTIDO[region; icrse]
         CHF_DTERM[
         do icrse0 = icmin0, icmax0 ;
         do icrse1 = icmin1, icmax1 ;
         do icrse2 = icmin2, icmax2 ;
         do icrse3 = icmin3, icmax3 ;
         do icrse4 = icmin4, icmax4 ;
         do icrse5 = icmin5, icmax5 ]

            CHF_DTERM[
            ifine0 = nref*icrse0 + iref0 ;
            ifine1 = nref*icrse1 + iref1 ;
            ifine2 = nref*icrse2 + iref2 ;
            ifine3 = nref*icrse3 + iref3 ;
            ifine4 = nref*icrse4 + iref4 ;
            ifine5 = nref*icrse5 + iref5 ]

            do var = 0, ncomp-1

C              Find sum of corrections.
               csum = 0

               CHF_DTERM[
               do ib0 = 0, ibmax0 ;
               do ib1 = 0, ibmax1 ;
               do ib2 = 0, ibmax2 ;
               do ib3 = 0, ibmax3 ;
               do ib4 = 0, ibmax4 ;
               do ib5 = 0, ibmax5 ]

                  csum = csum + wtcrnr( CHF_AUTOIX[ib], nvwt ) *
     &              crse( CHF_OFFSETIX[icrse;+ib], var)

               CHF_DTERM[
               end do ;
               end do ;
               end do ;
               end do ;
               end do ;
               end do ]

               fine ( CHF_AUTOIX[ifine], var ) = csum +
     &              fine ( CHF_AUTOIX[ifine], var )

            end do

         CHF_DTERM[
         end do ;
         end do ;
         end do ;
         end do ;
         end do ;
         end do ]

         nvwt = nvwt + 1
      CHF_ENDDO

      return
      end



C=======================================================
C     subroutine WTSIDE
C     sets wt = 1-frac if i == 0, wt = frac if i == 1.
C=======================================================
      subroutine WTSIDE(
     &     CHF_CONST_INT[i],
     &     CHF_CONST_REAL[frac],
     &     CHF_REAL[wt])

      if (i .eq. 0) then
         wt = one - frac
      else
c        i .eq. 1
         wt = frac
      endif

      return
      end


C=======================================================
C     subroutine MAXB
C     sets ibmax = 0 if iref == 0, ibmax = 1 otherwise.
C=======================================================
      subroutine MAXB(
     &     CHF_CONST_INT[iref],
     &     CHF_INT[ibmax])

      if (iref .eq. 0) then
         ibmax = 0
      else
         ibmax = 1
      endif

      return
      end
