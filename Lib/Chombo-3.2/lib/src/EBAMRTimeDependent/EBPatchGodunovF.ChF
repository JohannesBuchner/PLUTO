C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
ccccccccccc
      subroutine minflat(
     &     chf_fra1[flattening],
     &     chf_const_fra[zetadir],
     &     chf_const_fra[du],
     &     chf_box[box])

      integer chf_ddecl[i;j;k]
      integer iv
      real_t  sumdu,minflattot,minzetadir

      chf_multido[box;i;j;k]
      sumdu = zero
      do iv = 0,chf_ncomp[du] - 1
         sumdu = sumdu + du(chf_ix[i;j;k],iv)
      enddo
      if (sumdu .lt. zero) then
         minflattot = zetadir(chf_ix[i;j;k],0)

         do iv = 1,chf_ncomp[du] - 1
            minzetadir = zetadir(chf_ix[i;j;k],iv)
            minflattot = min(minflattot,minzetadir)
         enddo

         flattening(chf_ix[i;j;k]) = minflattot
      else
         flattening(chf_ix[i;j;k]) = one
      endif
      chf_enddo

      return
      end
cccccccccccccccc
      subroutine getdptwo(
     &     chf_fra1[delta2p],
     &     chf_const_fra1[delta1p],
     &     chf_const_int[idir],
     &     chf_box[lobox],
     &     chf_const_int[haslo],
     &     chf_box[hibox],
     &     chf_const_int[hashi],
     &     chf_box[centerbox])

      integer chf_ddecl[i   ;j   ;k   ]
      integer chf_ddecl[ioff;joff;koff]
      REAL_T dp1hi, dp1lo
c     perform centered average to obtain delta2p in the interior.

      chf_dterm[
      ioff = chf_id(0,idir);
      joff = chf_id(1,idir);
      koff = chf_id(2,idir)]

      chf_multido[centerbox;i;j;k]

      dp1hi = delta1p(chf_ix[i+ioff;j+joff;k+koff])
      dp1lo = delta1p(chf_ix[i-ioff;j-joff;k-koff])
      delta2p(chf_ix[i;j;k]) = dp1hi + dp1lo

      chf_enddo

c     perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

      if (haslo .eq. 1) then
         chf_multido[lobox;i;j;k]

         dp1hi = delta1p(chf_ix[i+ioff;j+joff;k+koff])
         dp1lo = delta1p(chf_ix[i     ;j     ;k     ])
         delta2p(chf_ix[i;j;k]) = dp1hi + dp1lo

         chf_enddo
      endif

      if (hashi .eq. 1) then
         chf_multido[hibox;i;j;k]

         dp1hi =  delta1p(chf_ix[i     ;j     ;k     ])
         dp1lo =  delta1p(chf_ix[i-ioff;j-joff;k-koff])
         delta2p(chf_ix[i;j;k]) = dp1hi + dp1lo

         chf_enddo
      endif

      return
      end

      subroutine getflat(
     &     chf_fra1[zetatwiddle],
     &     chf_const_fra1[delta1p],
     &     chf_const_fra1[delta2p],
     &     chf_const_fra1[bulkmin],
     &     chf_box[box])

      integer chf_ddecl[i;j;k]
      real_t d,r0,r1,ratio,strength
      real_t d1pvof, d2pvof, smallp

#ifdef   CH_USE_FLOAT
      data d  /0.33/
      data r0 /0.75/
      data r1 /0.85/
#endif
#ifdef   CH_USE_DOUBLE
#ifdef   CH_CRAY
      data d  /0.33/
      data r0 /0.75/
      data r1 /0.85/
#else
      data d  /0.33d0/
      data r0 /0.75d0/
      data r1 /0.85d0/
#endif
#endif
      chf_multido[box;i;j;k]
      strength = abs(delta1p(chf_ix[i;j;k])/bulkmin(chf_ix[i;j;k]))
c     bad idea among many
      smallp = 1.0e-7

      if (strength .ge. d) then
         d1pvof =  abs(delta1p(chf_ix[i;j;k]))
         d2pvof =  max(abs(delta2p(chf_ix[i;j;k])),smallp)
         ratio =  d1pvof/d2pvof

         if (ratio .le. r0) then
            zetatwiddle(chf_ix[i;j;k]) = one
         else if (ratio .ge. r1) then
            zetatwiddle(chf_ix[i;j;k]) = zero
         else
            zetatwiddle(chf_ix[i;j;k]) = one - (ratio - r0)/(r1 - r0)
         endif
      else
         zetatwiddle(chf_ix[i;j;k]) = one
      endif
      chf_enddo

      return
      end

      subroutine getgrad(
     &     chf_fra1[du],
     &     chf_const_fra1[u],
     &     chf_const_int[idir],
     &     chf_box[lobox],
     &     chf_const_int[haslo],
     &     chf_box[hibox],
     &     chf_const_int[hashi],
     &     chf_box[centerbox])

      integer chf_ddecl[i   ;j   ;k   ]
      integer chf_ddecl[ioff;joff;koff]

      chf_dterm[
      ioff = chf_id(0,idir);
      joff = chf_id(1,idir);
      koff = chf_id(2,idir)]

c     perform first difference calculation in the interior.

      chf_multido[centerbox;i;j;k]

      du(chf_ix[i;j;k]) = half*
     &     (  u(chf_ix[i+ioff;j+joff;k+koff])
     &     -  u(chf_ix[i-ioff;j-joff;k-koff]))

      chf_enddo

c     perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

      if (haslo .eq. 1) then
         chf_multido[lobox;i;j;k]
         du(chf_ix[i;j;k]) =
     &        ( u(chf_ix[i+ioff;j+joff;k+koff])
     &        - u(chf_ix[i     ;j     ;k     ]))
         chf_enddo
      endif

      if (hashi .eq. 1) then
         chf_multido[hibox;i;j;k]
         du(chf_ix[i;j;k]) =
     &        ( u(chf_ix[i     ;j     ;k     ])
     &        - u(chf_ix[i-ioff;j-joff;k-koff]))
         chf_enddo
      endif

      return
      end

      subroutine getrelativegrad(
     &     chf_fra1[du],
     &     chf_const_fra1[u],
     &     chf_const_int[idir],
     &     chf_box[lobox],
     &     chf_const_int[haslo],
     &     chf_box[hibox],
     &     chf_const_int[hashi],
     &     chf_box[centerbox])

      integer chf_ddecl[i   ;j   ;k   ]
      integer chf_ddecl[ioff;joff;koff]
      real_t diff, ave

      chf_dterm[
      ioff = chf_id(0,idir);
      joff = chf_id(1,idir);
      koff = chf_id(2,idir)]

c     perform first difference calculation in the interior.

      chf_multido[centerbox;i;j;k]

      diff = half*
     &     (  u(chf_ix[i+ioff;j+joff;k+koff])
     &     -  u(chf_ix[i-ioff;j-joff;k-koff]))

      ave = half*
     &     (  u(chf_ix[i+ioff;j+joff;k+koff])
     &     +  u(chf_ix[i-ioff;j-joff;k-koff]))

      du(chf_ix[i;j;k]) = diff/ave

      chf_enddo

c     perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

      if (haslo .eq. 1) then
         chf_multido[lobox;i;j;k]

         diff =
     &        ( u(chf_ix[i+ioff;j+joff;k+koff])
     &        - u(chf_ix[i     ;j     ;k     ]))
         ave =half*
     &        ( u(chf_ix[i+ioff;j+joff;k+koff])
     &        + u(chf_ix[i     ;j     ;k     ]))

         du(chf_ix[i;j;k]) = diff/ave

         chf_enddo
      endif

      if (hashi .eq. 1) then
         chf_multido[hibox;i;j;k]
         diff =
     &        ( u(chf_ix[i     ;j     ;k     ])
     &        - u(chf_ix[i-ioff;j-joff;k-koff]))
         ave = half*
     &        ( u(chf_ix[i     ;j     ;k     ])
     &        + u(chf_ix[i-ioff;j-joff;k-koff]))

         du(chf_ix[i;j;k]) = diff/ave

         chf_enddo
      endif

      return
      end
cccccccccccccccc
      subroutine magnitude(
     &     chf_fra1[magdata],
     &     chf_const_fra[data],
     &     chf_box[box])

      integer chf_ddecl[i;j;k]
      integer iv
      real_t cur,sum

      chf_multido[box;i;j;k]
      sum = zero

      do iv = 0,chf_ncomp[data]-1
         cur = data(chf_ix[i;j;k],iv)
         sum = sum + cur*cur
      enddo

      magdata(chf_ix[i;j;k]) = sqrt(sum)
      chf_enddo

      return
      end
cccccccccccccccccccc
      subroutine min3pts(
     &     chf_fra1[mindata],
     &     chf_const_fra1[data],
     &     chf_const_int[idir],
     &     chf_box[lobox],
     &     chf_const_int[haslo],
     &     chf_box[hibox],
     &     chf_const_int[hashi],
     &     chf_box[centerbox])

      integer chf_ddecl[i   ;j   ;k   ]
      integer chf_ddecl[ioff;joff;koff]

      chf_dterm[
      ioff = chf_id(0,idir);
      joff = chf_id(1,idir);
      koff = chf_id(2,idir)]

c     perform 3 point minimum calculation in the interior.

      chf_multido[centerbox;i;j;k]
      mindata(chf_ix[i;j;k]) = min(
     &     data(chf_ix[i     ;j     ;k     ]),
     &     data(chf_ix[i+ioff;j+joff;k+koff]),
     &     data(chf_ix[i-ioff;j-joff;k-koff]))
      chf_enddo

c     perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

      if (haslo .ne. 0) then
         chf_multido[lobox;i;j;k]
         mindata(chf_ix[i;j;k]) = min(
     &        data(chf_ix[i     ;j     ;k     ]),
     &        data(chf_ix[i+ioff;j+joff;k+koff]))
         chf_enddo
      endif

      if (hashi .ne. 0) then
         chf_multido[hibox;i;j;k]
         mindata(chf_ix[i;j;k]) = min(
     &        data(chf_ix[i     ;j     ;k     ]),
     &        data(chf_ix[i-ioff;j-joff;k-koff]))
         chf_enddo
      endif

      return
      end
cccccccccccccccc
      subroutine secondslopediffs(
     &     chf_fra[deltawc],
     &     chf_fra[deltawl],
     &     chf_fra[deltawr],
     &     chf_const_fra[w],
     &     chf_const_int[numslopes],
     &     chf_const_int[idir],
     &     chf_box[lobox],
     &     chf_const_int[haslo],
     &     chf_box[hibox],
     &     chf_const_int[hashi],
     &     chf_box[centerbox])

      integer chf_ddecl[i   ;j   ;k   ],lvar
      integer chf_ddecl[ioff;joff;koff]
      real_t dwr,dwl

c     perform first difference calculation in the interior.
      chf_dterm[
      ioff = chf_id(0,idir);
      joff = chf_id(1,idir);
      koff = chf_id(2,idir)]

      do lvar = 0, numslopes - 1
         chf_multido[centerbox;i;j;k]
         dwr =  w(chf_ix[i+ioff;j+joff;k+koff],lvar)
     &        - w(chf_ix[i     ;j     ;k     ],lvar)
         dwl =  w(chf_ix[i     ;j     ;k     ],lvar)
     &        - w(chf_ix[i-ioff;j-joff;k-koff],lvar)

         deltawr(chf_ix[i;j;k],lvar) = dwr
         deltawl(chf_ix[i;j;k],lvar) = dwl
         deltawc(chf_ix[i;j;k],lvar) = half*(dwr + dwl)
         chf_enddo

c     perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

         if (haslo .ne. 0) then
            chf_multido[lobox;i;j;k]
            dwr =  w(chf_ix[i+ioff;j+joff;k+koff],lvar)
     &           - w(chf_ix[i     ;j     ;k     ],lvar)
            deltawc(chf_ix[i;j;k],lvar) = dwr
            deltawl(chf_ix[i;j;k],lvar) = dwr
            deltawr(chf_ix[i;j;k],lvar) = dwr
            chf_enddo
         endif

         if (hashi .ne. 0) then
            chf_multido[hibox;i;j;k]
            dwl =  w(chf_ix[i     ;j     ;k     ],lvar)
     &           - w(chf_ix[i-ioff;j-joff;k-koff],lvar)
            deltawc(chf_ix[i;j;k],lvar) = dwl
            deltawl(chf_ix[i;j;k],lvar) = dwl
            deltawr(chf_ix[i;j;k],lvar) = dwl
            chf_enddo
         endif
      enddo

      return
      end
cccccccccccccccc
      subroutine forthslopediffs(
     &     chf_fra[delta4wc],
     &     chf_const_fra[w],
     &     chf_const_fra[delta2w],
     &     chf_const_int[numslopes],
     &     chf_const_int[idir],
     &     chf_box[lobox],
     &     chf_const_int[haslo],
     &     chf_box[hibox],
     &     chf_const_int[hashi],
     &     chf_box[centerbox])

      integer chf_ddecl[i   ;j   ;k   ],lvar
      integer chf_ddecl[ioff;joff;koff]
      real_t dwr,dwl, vall, slol, valr, slor

c     perform first difference calculation in the interior.
      chf_dterm[
      ioff = chf_id(0,idir);
      joff = chf_id(1,idir);
      koff = chf_id(2,idir)]

      do lvar = 0, numslopes - 1
         chf_multido[centerbox;i;j;k]

         valr =       w(chf_ix[i+ioff;j+joff;k+koff],lvar)
         slor = delta2w(chf_ix[i+ioff;j+joff;k+koff],lvar)

         vall =       w(chf_ix[i-ioff;j-joff;k-koff],lvar)
         slol = delta2w(chf_ix[i-ioff;j-joff;k-koff],lvar)

         dwl = vall + fourth*slol
         dwr = valr - fourth*slor

         delta4wc(chf_ix[i;j;k],lvar) = two3rd*(dwr - dwl)

         chf_enddo

c     perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

         if (haslo .ne. 0) then
            chf_multido[lobox;i;j;k]
            delta4wc(chf_ix[i;j;k],lvar) = delta2w(chf_ix[i;j;k],lvar)
            chf_enddo
         endif

         if (hashi .ne. 0) then
            chf_multido[hibox;i;j;k]
            delta4wc(chf_ix[i;j;k],lvar) = delta2w(chf_ix[i;j;k],lvar)
            chf_enddo
         endif
      enddo

      return
      end
cccccccccccccccccccc
      subroutine applyflat(
     &     chf_fra[dw],
     &     chf_const_fra1[flattening],
     &     chf_const_int[numslopes],
     &     chf_box[box])

      integer chf_ddecl[i;j;k],lvar

c     apply the flattening coefficient
      do lvar = 0, numslopes - 1
         chf_multido[box;i;j;k]
         dw(chf_ix[i;j;k],lvar) = flattening(chf_ix[i;j;k])
     &        * dw(chf_ix[i;j;k],lvar)
         chf_enddo
      enddo

      return
      end
cccccccccccccccc
      subroutine incsource(
     &     chf_fra[prim],
     &     chf_const_fra[source],
     &     chf_const_real[scale],
     &     chf_box[dcalc])

      integer chf_ddecl[i;j;k], iv
      real_t increment

      do iv = 0,chf_ncomp[prim] - 1
         chf_multido[dcalc;i;j;k]

         increment = scale*source(chf_ix[i;j;k], iv)
         prim(chf_ix[i;j;k], iv) = prim(chf_ix[i;j;k], iv) + increment

         chf_enddo
      enddo

      return
      end
cccccccccccccccc
      subroutine vllimiter(
     &     chf_fra[slopeprim],
     &     chf_const_fra[slopeleft],
     &     chf_const_fra[sloperigh],
     &     chf_box[dcalc])

      integer chf_ddecl[i;j;k], iv
      real_t dql, dqr, dqlim

      do iv = 0,chf_ncomp[slopeprim] - 1
         chf_multido[dcalc;i;j;k]

         dql   = slopeleft(chf_ix[i;j;k], iv)
         dqr   = sloperigh(chf_ix[i;j;k], iv)
c centered diff comes in this way for second order
         dqlim = slopeprim(chf_ix[i;j;k], iv)

         call pointvllimiter(dqlim, dql, dqr)

         slopeprim(chf_ix[i;j;k],iv) = dqlim

         chf_enddo
      enddo

      return
      end
cccccccccccccccc
      subroutine pointvllimiter(
     &     chf_real[dqlim],
     &     chf_const_real[dql],
     &     chf_const_real[dqr])

      real_t dqc

      dqc = dqlim
      dqlim = min(two*abs(dql),two*abs(dqr))
      dqlim = min(dqlim, abs(dqc))
      if (dql*dqr .lt. zero)  then
         dqlim = zero
      else
         dqlim = dqlim*sign(one, dql)
      endif

      return
      end
cccccccccccccccc
        subroutine divuedge(
     &    chf_fra1[divu],
     &    chf_const_int[facedir],
     &    chf_box[lobox],
     &    chf_const_int[haslo],
     &    chf_box[hibox],
     &    chf_const_int[hashi])

      integer chf_ddecl[i;j;k],chf_ddecl[ioff;joff;koff]

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      if (haslo .eq. 1) then
         chf_multido[lobox;i;j;k]
         divu(chf_ix[i;j;k]) = divu(chf_ix[i+ioff;j+joff;k+koff])
         chf_enddo
      endif

      if (hashi .eq. 1) then
         chf_multido[hibox;i;j;k]
         divu(chf_ix[i;j;k]) = divu(chf_ix[i-ioff;j-joff;k-koff])
         chf_enddo
      endif

      return
      end
cccccccccccccccc
        subroutine avefluxtoface(
     &    chf_fra1[faceflux],
     &    chf_const_fra1[ccflux],
     &    chf_const_int[facedir],
     &    chf_box[facebox])

      integer chf_ddecl[i;j;k],chf_ddecl[ioff;joff;koff]

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      chf_multido[facebox;i;j;k]

      faceflux(chf_ix[i;j;k]) = half*(
     &     ccflux(chf_ix[i       ;j       ;k       ]) +
     &     ccflux(chf_ix[i - ioff;j - joff;k - koff]))

      chf_enddo

      return
      end
cccccccccccccccc
        subroutine divuoned(
     &    chf_fra1[divu],
     &    chf_const_fra1[velnorm],
     &    chf_const_int[facedir],
     &    chf_box[centerbox])

      integer chf_ddecl[i;j;k],chf_ddecl[ioff;joff;koff]

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      chf_multido[centerbox;i;j;k]

      divu(chf_ix[i;j;k]) =
     &     velnorm(chf_ix[i       ;j       ;k       ]) -
     &     velnorm(chf_ix[i - ioff;j - joff;k - koff])

      chf_enddo

      return
      end
cccccccccccccccc
        subroutine divutran(
     &    chf_fra1[divu],
     &    chf_const_fra1[slopevel],
     &    chf_const_int[facedir],
     &    chf_box[centerbox])

      integer chf_ddecl[i;j;k],chf_ddecl[ioff;joff;koff]

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      chf_multido[centerbox;i;j;k]

      divu(chf_ix[i;j;k]) = divu(chf_ix[i;j;k])+ half*(
     &     slopevel(chf_ix[i     ;j     ;k     ]) +
     &     slopevel(chf_ix[i-ioff;j-joff;k-koff]))

      chf_enddo

      return
      end
cccccccccccccccc
        subroutine artvisc(
     &     chf_fra[f],
     &     chf_const_fra[u],
     &     chf_const_fra1[divu],
     &     chf_const_real[coeff],
     &     chf_const_int[idir],
     &     chf_box[box],
     &     chf_const_int[numcons],
     &     chf_const_real[dx])

        integer chf_ddecl[i   ; j   ; k   ]
        integer chf_ddecl[ioff; joff; koff]
        integer iv

        real_t fc,dv,s1,s2

        chf_dterm[
        ioff = chf_id(0,idir);
        joff = chf_id(1,idir);
        koff = chf_id(2,idir)]

        do iv = 0,numcons - 1
          chf_multido[box;i;j;k]
            fc = f   (chf_ix[i     ;j     ;k     ],iv)
            dv = divu(chf_ix[i     ;j     ;k     ])
            s1 = u   (chf_ix[i     ;j     ;k     ],iv)
            s2 = u   (chf_ix[i-ioff;j-joff;k-koff],iv)

            f(chf_ix[i;j;k],iv) = fc - coeff*max(-dv, 0.d0)*(s1-s2)
          chf_enddo
        enddo

        return
        end
cccccccccccccccc
      subroutine update(
     &     chf_box[dcalc],
     &     chf_fra[state],
     &     chf_const_fra[flux],
     &     chf_const_int[facedir],
     &     chf_const_int[nconserved],
     &     chf_const_real[dtbydx])

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]

      integer spacedim,iv

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      spacedim = CH_SPACEDIM

      do iv = 0,nconserved - 1
         chf_multido[dcalc;i;j;k]

         state(chf_ix[i;j;k],iv) = state(chf_ix[i;j;k],iv) -
     &        dtbydx *
     &        ( flux(chf_ix[i+ioff;j+joff;k+koff],iv)
     &        - flux(chf_ix[i     ;j     ;k     ],iv))
         chf_enddo
      enddo

      return
      end

cccccccccccccccc
      subroutine divergef(
     &     chf_box[dcalc],
     &     chf_fra[divf],
     &     chf_const_fra[flux],
     &     chf_const_int[facedir],
     &     chf_const_int[nconserved],
     &     chf_const_real[dx])

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]
      integer spacedim,iv

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      spacedim = CH_SPACEDIM

      do iv = 0,nconserved - 1

         chf_multido[dcalc;i;j;k]

         divf(chf_ix[i;j;k],iv) = divf(chf_ix[i;j;k],iv) +
     &        (flux(chf_ix[i+ioff;j+joff;k+koff],iv)
     &        -flux(chf_ix[i     ;j     ;k     ],iv))/dx

         chf_enddo

      enddo

      return
      end
cccccccccccccccc
      subroutine regupdate(
     &     chf_box[dcalc],
     &     chf_fra[consstate],
     &     chf_const_fra[divf],
     &     chf_const_int[nconserved],
     &     chf_const_real[dt])

      integer chf_ddecl[i; j; k]
      integer iv

      do iv = 0,nconserved - 1

         chf_multido[dcalc;i;j;k]

         consstate(chf_ix[i;j;k],iv) = consstate(chf_ix[i;j;k],iv)
     &        - dt*divf(chf_ix[i;j;k],iv)

         chf_enddo

      enddo

      return
      end
cccccccccccccccc
