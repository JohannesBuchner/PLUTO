C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

C     --------------------------------------------------------------
C     vol weighted sum
C     if p==0,
C     norm returned is Max(abs(a_src, input a_norm)) over
C     uncovered regions.  otherwise,
C     returns norm+ sum(a_src(iv,comp)**p)  of component comp of a_src
C     weighted by local volume fraction and
C     also returns volume of uncovered regions.
C     Only uncovered regions count here.
C     if (idoirr== 1) then irregular cells are included
C     if (idoreg== 1) then  regular cells are included
C     NORM AND VOLUME NEED TO BE ZEROED BEFORE THEY GET HERE
C     --------------------------------------------------------------
#include "CONSTANTS.H"

      subroutine VOLWGTSUM(
     &     CHF_CONST_FRA[src],
     &     CHF_CONST_FRA[volfrac],
     &     CHF_CONST_REAL[norm],
     &     CHF_CONST_REAL[volume],
     &     CHF_CONST_INT[comp],
     &     CHF_CONST_INT[pval],
     &     CHF_CONST_INT[idoreg],
     &     CHF_CONST_INT[idoirr],
     &     CHF_BOX[region]
     &     )

      integer CHF_DDECL[i;j;k]
      integer ncompsrc
      REAL_T eps, rabs, vfrac
      logical isreg, iscov, isirr, usethis, useirr, usereg

      ncompsrc = CHF_NCOMP[src]
      if(pval .lt. 0) then
C     bogus norm type
         call MAYDAY_ERROR
      endif

      if(ncompsrc .le. comp) then
C     incompatible fab and comp
         call MAYDAY_ERROR()
      endif

C     ACTUNG!!!!!
C     these do NOT get done because this norm is additive
C     norm = zero
C     volume = zero
      eps = 1.0e-9
      usereg = (idoreg .eq. 1)
      useirr = (idoirr .eq. 1)

C     loop over all cells
      CHF_MULTIDO[region; i; j; k]

C     determine whether cell is regular, irregular or covered
C     by checking the volume fraction
      vfrac = volfrac(CHF_IX[i;j;k],0)
      iscov = (vfrac .lt. eps)
      isreg = (abs(one-vfrac) .lt. eps)
      isirr = (.not. isreg).and.(.not. iscov)

C     determine whether this cell gets counted
      usethis = ((isreg .and. usereg).or.(isirr .and. useirr))

C     compute whether to use this cell
      if(usethis) then
         if(pval .eq. 0) then
            rabs  = abs(src(CHF_IX[i;j;k],comp))
            norm  = max(norm,  rabs)
         elseif(pval .eq. 1) then
            rabs  = abs(src(CHF_IX[i;j;k],comp))
            norm  = norm + vfrac*rabs
         elseif(pval .eq. 2) then
            rabs  = src(CHF_IX[i;j;k],comp)*src(CHF_IX[i;j;k],comp)
            norm  = norm + vfrac*rabs
         else
            call MAYDAY_ERROR()
         endif
         volume = volume + vfrac
      endif

      CHF_ENDDO

      return
      end

C     --------------------------------------------------------------
C     adds src to dest over region and puts it into dest
C     --------------------------------------------------------------
      subroutine ADDTWOFAB(
     &     CHF_FRA[dst],
     &     CHF_CONST_FRA[src],
     &     CHF_BOX[region],
     &     CHF_INT[srccomp],
     &     CHF_INT[destcomp],
     &     CHF_INT[numcomp]
     &     )

      integer D_DECL(i,j,k)
      integer nsrc, ndest,ncompsrc, ncompdst

      ncompsrc = CHF_NCOMP[src]
      ncompdst = CHF_NCOMP[dst]
      if(((srccomp+numcomp).gt.ncompsrc).or.
     &   ((destcomp+numcomp).gt. ncompdst)) then
C     incompatible fabs input
         call MAYDAY_ERROR()
      endif

      ndest = destcomp
      do nsrc = srccomp, srccomp+numcomp-1
         CHF_MULTIDO[region; i; j; k]

         dst(CHF_IX[i;j;k],ndest) =
     &        dst(CHF_IX[i;j;k],ndest) +
     &        src(CHF_IX[i;j;k],nsrc)

         CHF_ENDDO
         ndest = ndest + 1
      enddo

      return
      end

C     --------------------------------------------------------------
C     adds scale*src to dest over region and puts it into dest
C     --------------------------------------------------------------
      subroutine SCALEADDTWOFAB(
     &     CHF_FRA[dst],
     &     CHF_CONST_FRA[src],
     &     CHF_CONST_REAL[scale],
     &     CHF_BOX[region],
     &     CHF_INT[srccomp],
     &     CHF_INT[destcomp],
     &     CHF_INT[numcomp]
     &     )

      integer D_DECL(i,j,k)
      integer nsrc, ndest, ncompsrc, ncompdst

      ncompsrc = CHF_NCOMP[src]
      ncompdst = CHF_NCOMP[dst]
      if(((srccomp+numcomp).gt.ncompsrc).or.
     &   ((destcomp+numcomp).gt. ncompdst)) then
C     incompatible fabs input
         call MAYDAY_ERROR()
      endif

      ndest = destcomp
      do nsrc = srccomp, srccomp + numcomp-1
         CHF_MULTIDO[region; i; j; k]

         dst(CHF_IX[i;j;k],ndest) =
     &        dst(CHF_IX[i;j;k],ndest) +
     &        src(CHF_IX[i;j;k],nsrc) * scale

         CHF_ENDDO
         ndest = ndest + 1
      enddo

      return
      end

C     --------------------------------------------------------------
C     assigns dst = Ax + By
C     --------------------------------------------------------------
      subroutine AXBYFAB(
     &     CHF_FRA[dst],
     &     CHF_CONST_FRA[x],
     &     CHF_CONST_FRA[y],
     &     CHF_CONST_REAL[a],
     &     CHF_CONST_REAL[b],
     &     CHF_BOX[region],
     &     CHF_INT[srccomp],
     &     CHF_INT[destcomp],
     &     CHF_INT[numcomp]
     &     )

      integer D_DECL(i,j,k)
      integer nsrc, ndest, ncompsrc, ncompdst

      ncompsrc = CHF_NCOMP[x]
      ncompdst = CHF_NCOMP[dst]
      if(((srccomp+numcomp).gt.ncompsrc).or.
     &   ((destcomp+numcomp).gt. ncompdst)) then
C     incompatible fabs input
         call MAYDAY_ERROR()
      endif

      ndest = destcomp
      do nsrc = srccomp, srccomp + numcomp-1
         CHF_MULTIDO[region; i; j; k]

         dst(CHF_IX[i;j;k],ndest) =
     &        x(CHF_IX[i;j;k],nsrc) * a
     &      + y(CHF_IX[i;j;k],nsrc) * b

         CHF_ENDDO
         ndest = ndest + 1
      enddo

      return
      end

C     --------------------------------------------------------------
C     assigns dst = Ax + By
C     --------------------------------------------------------------
      subroutine AXBYFABCOMP(
     &     CHF_FRA[dst],
     &     CHF_CONST_FRA[x],
     &     CHF_CONST_FRA[y],
     &     CHF_CONST_REAL[a],
     &     CHF_CONST_REAL[b],
     &     CHF_CONST_INT[destcomp],
     &     CHF_CONST_INT[xcomp],
     &     CHF_CONST_INT[ycomp],
     &     CHF_BOX[region]
     &     )

      integer D_DECL(i,j,k)

      CHF_MULTIDO[region; i; j; k]

      dst(CHF_IX[i;j;k],destcomp) =
     &     x(CHF_IX[i;j;k],xcomp) * a
     &     + y(CHF_IX[i;j;k],ycomp) * b

      CHF_ENDDO

      return
      end

C     --------------------------------------------------------------
C     subtracts src from dest over region and puts it into dest
C     --------------------------------------------------------------
      subroutine SUBTRACTTWOFAB(
     &     CHF_FRA[dst],
     &     CHF_CONST_FRA[src],
     &     CHF_BOX[region],
     &     CHF_INT[srccomp],
     &     CHF_INT[destcomp],
     &     CHF_INT[numcomp]
     &     )

      integer CHF_DDECL[i;j;k]
      integer nsrc, ndest,ncompsrc, ncompdst

      ncompsrc = CHF_NCOMP[src]
      ncompdst = CHF_NCOMP[dst]
      if(((srccomp+numcomp).gt.ncompsrc).or.
     &     ((destcomp+numcomp).gt. ncompdst)) then
C     incompatible fabs input
         call MAYDAY_ERROR()
      endif

      ndest = destcomp
      do nsrc = srccomp, srccomp + numcomp - 1
         CHF_MULTIDO[region; i; j; k]

         dst(CHF_IX[i;j;k],ndest) =
     &        dst(CHF_IX[i;j;k],ndest) -
     &        src(CHF_IX[i;j;k],nsrc)

         CHF_ENDDO
         ndest = ndest + 1
      enddo

      return
      end

C     --------------------------------------------------------------
C     multiplies src by dest over region and puts it into dest
C     --------------------------------------------------------------
      subroutine MULTIPLYTWOFAB(
     &     CHF_FRA[dst],
     &     CHF_CONST_FRA[src],
     &     CHF_BOX[region],
     &     CHF_INT[srccomp],
     &     CHF_INT[destcomp],
     &     CHF_INT[numcomp]
     &     )

      integer CHF_DDECL[i;j;k]
      integer nsrc, ndest,ncompsrc, ncompdst

      ncompsrc = CHF_NCOMP[src]
      ncompdst = CHF_NCOMP[dst]
      if(((srccomp+numcomp).gt.ncompsrc).or.
     &   ((destcomp+numcomp).gt. ncompdst)) then
C     incompatible fabs input
         call MAYDAY_ERROR()
      endif

      ndest = destcomp
      do nsrc = srccomp, srccomp + numcomp - 1
         CHF_MULTIDO[region; i; j; k]

         dst(CHF_IX[i;j;k],ndest) =
     &        dst(CHF_IX[i;j;k],ndest)*
     &        src(CHF_IX[i;j;k],nsrc)

         CHF_ENDDO
         ndest = ndest + 1
      enddo

      return
      end

C     --------------------------------------------------------------
C     divides dest by src over region and puts it into dest
C     --------------------------------------------------------------
      subroutine DIVIDETWOFAB(
     &     CHF_FRA[dst],
     &     CHF_CONST_FRA[src],
     &     CHF_BOX[region],
     &     CHF_INT[srccomp],
     &     CHF_INT[destcomp],
     &     CHF_INT[numcomp]
     &     )

      integer CHF_DDECL[i;j;k]
      integer nsrc, ndest,ncompsrc, ncompdst

      ncompsrc = CHF_NCOMP[src]
      ncompdst = CHF_NCOMP[dst]
      if(((srccomp+numcomp).gt.ncompsrc).or.
     &   ((destcomp+numcomp).gt. ncompdst)) then
C     incompatible fabs input
         call MAYDAY_ERROR()
      endif

      ndest = destcomp
      do nsrc = srccomp, srccomp + numcomp - 1
         CHF_MULTIDO[region; i; j; k]

         dst(CHF_IX[i;j;k],ndest) =
     &        dst(CHF_IX[i;j;k],ndest)/
     &        src(CHF_IX[i;j;k],nsrc)

         CHF_ENDDO
         ndest = ndest + 1
      enddo

      return
      end

C     --------------------------------------------------------------
C     subtracts src from dest over region and puts it into dest
C     --------------------------------------------------------------
      subroutine SUBTRACTFABR(
     &     CHF_FRA[dst],
     &     CHF_CONST_REAL[src],
     &     CHF_BOX[region]
     &     )

      integer CHF_DDECL[i;j;k]
      integer n, ncompdst

      ncompdst = CHF_NCOMP[dst]

      do n = 0, ncompdst - 1
         CHF_MULTIDO[region; i; j; k]

         dst(CHF_IX[i;j;k],n) =
     &        dst(CHF_IX[i;j;k],n) - src

         CHF_ENDDO
      enddo

      return
      end

C     --------------------------------------------------------------
C     adds src to dest over region and puts it into dest
C     --------------------------------------------------------------
      subroutine ADDFABR(
     &     CHF_FRA[dst],
     &     CHF_CONST_REAL[src],
     &     CHF_BOX[region]
     &     )

      integer CHF_DDECL[i;j;k]
      integer n, ncompdst

      ncompdst = CHF_NCOMP[dst]

      do n = 0, ncompdst - 1
         CHF_MULTIDO[region; i; j; k]

         dst(CHF_IX[i;j;k],n) =
     &        dst(CHF_IX[i;j;k],n) + src

         CHF_ENDDO
      enddo

      return
      end

C     --------------------------------------------------------------
C     multiplies src by dest over region and puts it into dest
C     --------------------------------------------------------------
      subroutine MULTIPLYFABR(
     &     CHF_FRA[dst],
     &     CHF_CONST_REAL[src],
     &     CHF_BOX[region]
     &     )

      integer CHF_DDECL[i;j;k]
      integer n,ncompdst

      ncompdst = CHF_NCOMP[dst]

      do n = 0, ncompdst - 1
         CHF_MULTIDO[region; i; j; k]

         dst(CHF_IX[i;j;k],n) =
     &        dst(CHF_IX[i;j;k],n) * src

         CHF_ENDDO
      enddo

      return
      end

C     --------------------------------------------------------------
C     divides dest by src over region and puts it into dest
C     --------------------------------------------------------------
      subroutine DIVIDEFABR(
     &     CHF_FRA[dst],
     &     CHF_CONST_REAL[src],
     &     CHF_BOX[region]
     &     )

      integer CHF_DDECL[i;j;k]
      integer n,ncompdst

      ncompdst = CHF_NCOMP[dst]

      do n = 0, ncompdst - 1
         CHF_MULTIDO[region; i; j; k]

         dst(CHF_IX[i;j;k],n) =
     &        dst(CHF_IX[i;j;k],n)/src

         CHF_ENDDO
      enddo

      return
      end

C
C=======================================================
C     DOTPRODUCT
C     takes the dot product between two fabs over all components
C     R = Sum_ijkn(a(i,j,k,n)*b(i,j,k,n))
C
C     => inputs,  <= outputs
C     dotprodout <=  result R
C     afab        => a
C     bfab        => b
C     region      => box over which to do the sum
C     icomp       => which component to use
C
C     Warning: afab, bfab must have the same number
C     of components and span region.
C
C     dtgraves march 21, 1999
C=======================================================

      subroutine EBDOTPRODUCT(
     &     CHF_REAL[dotprodout],
     &     CHF_CONST_FRA[afab],
     &     CHF_CONST_FRA[bfab],
     &     CHF_CONST_FRA[volfrac],
     &     CHF_BOX[region],
     &     CHF_CONST_INT[icomp])

      integer CHF_DDECL[i;j;k], ncomp
      REAL_T eps

      if(icomp .lt. 0) then
C     bogus icomp
         call MAYDAY_ERROR()
      endif
      ncomp = CHF_NCOMP[afab]
      if(ncomp .le. icomp) then
C     afab does not have enough components
         call MAYDAY_ERROR()
      endif
      ncomp = CHF_NCOMP[bfab]
      if(ncomp .le. icomp) then
C     bfab does not have enough components
         call MAYDAY_ERROR()
      endif

      dotprodout = zero
      eps = 1.0e-10

      CHF_MULTIDO[region; i; j; k]

      if(volfrac(CHF_IX[i;j;k],0) .gt. eps) then
         dotprodout = dotprodout +
     &        afab(CHF_IX[i;j;k],icomp)*bfab(CHF_IX[i;j;k],icomp)
      endif

      CHF_ENDDO

      return
      end

C     -------------------------------------
C     Returns the maximum value in the FAB.
C     -------------------------------------
      subroutine MAXFAB(
     &     CHF_REAL[aval],
     &     CHF_CONST_FRA[afab],
     &     CHF_BOX[region],
     &     CHF_CONST_INT[acomp]
     &     )

      integer CHF_DDECL[i;j;k]

      CHF_MULTIDO[region; i; j; k]
        aval = max(aval, afab(CHF_IX[i;j;k],acomp))
      CHF_ENDDO

      return
      end

C     -------------------------------------
C     Returns the minimum value in the FAB.
C     -------------------------------------
      subroutine MINFAB(
     &     CHF_REAL[aval],
     &     CHF_CONST_FRA[afab],
     &     CHF_BOX[region],
     &     CHF_CONST_INT[acomp]
     &     )

      integer CHF_DDECL[i;j;k]

      CHF_MULTIDO[region; i; j; k]
        aval = min(aval, afab(CHF_IX[i;j;k],acomp))
      CHF_ENDDO

      return
      end

