#ifdef CH_LANG_CC
/*
 *      _______              __
 *     / ___/ /  ___  __ _  / /  ___
 *    / /__/ _ \/ _ \/  V \/ _ \/ _ \
 *    \___/_//_/\___/_/_/_/_.__/\___/
 *    Please refer to Copyright.txt, in Chombo's root directory.
 */
#endif

#include "FortranNameMacro.H"
  // Generated by lib/util/multidim/make_FortranNameMacro_H.sh, which is called
  // in turn by the bootstrap script.

//
// Yes, the include guards are here and not at the top of the file.  That's because
// the multidim stuff needs special handling.
//
#ifndef _FORT_PROTO_H_
#define _FORT_PROTO_H_

#include "REAL.H"
#include "SPACE.H"
#include "BaseNamespaceHeader.H"

#ifdef DOXYGEN
/// Used to declare a fortran routine in a portable way
/** @ingroup macros

 */
#define FORTRAN_NAME( NAME ,name )

/// Used in ChomboFortran to write dimension-independent loops
/** @ingroup macros
CHF_MULTIDO is used to iterate over a box in a dimension independent
fashion by setting up nested Fortran do loops and CHF_ENDDO is used to
terminate those do loops correctly.  Specifically,
CHF_MULTIDO[box;i;j;k] will generate a do loop for  i
nested inside a do loop for  j and, in 3D, this will be nested inside
a do loop for k.  The i loop will go from first element of the
low corner of box to the first element of the high corner of box.
Similarly, the {\tt j} loop will use the second element and, in 3D, the
 k loop will use the third element.  CHF_ENDDO will end all the do
loops set up by  CHF_MULTIDO.

Here is an example using these macros:

\code
      subroutine LOOP(CHF_FRA1[array],CHF_BOX[box])

      integer CHF_DDECL[i;j;k]
      integer productsum

      productsum = 0
      CHF_MULTIDO[box;i;j;k]
        productsum = productsum + i*j*k
        array(CHF_IX[i;j;k]) = productsum
      CHF_ENDDO

      return
      end
\endcode

see the section of the Chombo Design document about Chombo Fortran for
a more detailed use of macros in Fortran

*/
#define CHF_MULTIDO(box, i, j, k)

/** @ingroup macros */
#define CHF_ENDDO

#else

class chfptr
{
public:
  int i ;
  //XXX for debugging
  //XXXchfptr(int a):i(a){std::cout << "constructing chfptr " << &i << std::endl;}
  //XXX~chfptr() {std::cout << "destructing chfptr " << &i << std::endl;}
  chfptr(int a):i(a)
  {
  }

  operator const int*() const
  {
    return &i;
  }
};

#define CHFPTR(a) (const int*)chfptr(a)
#define CHFPTR1(alo,ahi) \
  (const int*)chfptr(alo),(const int*)chfptr(ahi)
#define CHFPTR2(alo,blo,ahi,bhi) \
  (const int*)chfptr(alo),(const int*)chfptr(blo), \
  (const int*)chfptr(ahi),(const int*)chfptr(bhi)
#define CHFPTR3(alo,blo,clo,ahi,bhi,chi) \
  (const int*)chfptr(alo),(const int*)chfptr(blo),(const int*)chfptr(clo), \
  (const int*)chfptr(ahi),(const int*)chfptr(bhi),(const int*)chfptr(chi)
#define CHFPTR4(alo,blo,clo,dlo,ahi,bhi,chi,dhi) \
  (const int*)chfptr(alo),(const int*)chfptr(blo),(const int*)chfptr(clo),(const int*)chfptr(dlo), \
  (const int*)chfptr(ahi),(const int*)chfptr(bhi),(const int*)chfptr(chi),(const int*)chfptr(dhi)
#define CHFPTR5(alo,blo,clo,dlo,elo,ahi,bhi,chi,dhi,ehi) \
  (const int*)chfptr(alo),(const int*)chfptr(blo),(const int*)chfptr(clo),(const int*)chfptr(dlo),(const int*)chfptr(elo), \
  (const int*)chfptr(ahi),(const int*)chfptr(bhi),(const int*)chfptr(chi),(const int*)chfptr(dhi),(const int*)chfptr(ehi)
#define CHFPTR6(alo,blo,clo,dlo,elo,flo,ahi,bhi,chi,dhi,ehi,fhi) \
  (const int*)chfptr(alo),(const int*)chfptr(blo),(const int*)chfptr(clo),(const int*)chfptr(dlo),(const int*)chfptr(elo),(const int*)chfptr(flo), \
  (const int*)chfptr(ahi),(const int*)chfptr(bhi),(const int*)chfptr(chi),(const int*)chfptr(dhi),(const int*)chfptr(ehi),(const int*)chfptr(fhi)
#define CHFPTR7(alo,blo,clo,dlo,elo,flo,glo,ahi,bhi,chi,dhi,ehi,fhi,ghi) \
  (const int*)chfptr(alo),(const int*)chfptr(blo),(const int*)chfptr(clo),(const int*)chfptr(dlo),(const int*)chfptr(elo),(const int*)chfptr(flo),(const int*)chfptr(glo), \
  (const int*)chfptr(ahi),(const int*)chfptr(bhi),(const int*)chfptr(chi),(const int*)chfptr(dhi),(const int*)chfptr(ehi),(const int*)chfptr(fhi),(const int*)chfptr(ghi)

#define ARCHFPTR1(anm) CHFPTR1(anm.lowerBound(0), \
                               anm.upperBound(0))
#define ARCHFPTR2(anm) CHFPTR2(anm.lowerBound(0),anm.lowerBound(1), \
                               anm.upperBound(0),anm.upperBound(1))
#define ARCHFPTR3(anm) CHFPTR3(anm.lowerBound(0),anm.lowerBound(1),anm.lowerBound(2), \
                               anm.upperBound(0),anm.upperBound(1),anm.upperBound(2))
#define ARCHFPTR4(anm) CHFPTR4(anm.lowerBound(0),anm.lowerBound(1),anm.lowerBound(2),anm.lowerBound(3), \
                               anm.upperBound(0),anm.upperBound(1),anm.upperBound(2),anm.upperBound(3))
#define ARCHFPTR5(anm) CHFPTR5(anm.lowerBound(0),anm.lowerBound(1),anm.lowerBound(2),anm.lowerBound(3),anm.lowerBound(4), \
                               anm.upperBound(0),anm.upperBound(1),anm.upperBound(2),anm.upperBound(3),anm.upperBound(4))
#define ARCHFPTR6(anm) CHFPTR6(anm.lowerBound(0),anm.lowerBound(1),anm.lowerBound(2),anm.lowerBound(3),anm.lowerBound(4),anm.lowerBound(5), \
                               anm.upperBound(0),anm.upperBound(1),anm.upperBound(2),anm.upperBound(3),anm.upperBound(4),anm.upperBound(5))
#define ARCHFPTR7(anm) CHFPTR7(anm.lowerBound(0),anm.lowerBound(1),anm.lowerBound(2),anm.lowerBound(3),anm.lowerBound(4),anm.lowerBound(5),anm.lowerBound(6), \
                               anm.upperBound(0),anm.upperBound(1),anm.upperBound(2),anm.upperBound(3),anm.upperBound(4),anm.upperBound(5),anm.upperBound(6))

//[Note: macros appended with "_X" are required just to expand an argument]
#define DIMARGp_X(rank, anm)  DIMARG ## rank ## p(anm)
#define DIMARG1p( anm ) const int* const i ## anm ## lo0, \
                        const int* const i ## anm ## hi0
#define DIMARG2p( anm ) const int* const i ## anm ## lo0, \
                        const int* const i ## anm ## lo1, \
                        const int* const i ## anm ## hi0, \
                        const int* const i ## anm ## hi1
#define DIMARG3p( anm ) const int* const i ## anm ## lo0, \
                        const int* const i ## anm ## lo1, \
                        const int* const i ## anm ## lo2, \
                        const int* const i ## anm ## hi0, \
                        const int* const i ## anm ## hi1, \
                        const int* const i ## anm ## hi2
#define DIMARG4p( anm ) const int* const i ## anm ## lo0, \
                        const int* const i ## anm ## lo1, \
                        const int* const i ## anm ## lo2, \
                        const int* const i ## anm ## lo3, \
                        const int* const i ## anm ## hi0, \
                        const int* const i ## anm ## hi1, \
                        const int* const i ## anm ## hi2, \
                        const int* const i ## anm ## hi3
#define DIMARG5p( anm ) const int* const i ## anm ## lo0, \
                        const int* const i ## anm ## lo1, \
                        const int* const i ## anm ## lo2, \
                        const int* const i ## anm ## lo3, \
                        const int* const i ## anm ## lo4, \
                        const int* const i ## anm ## hi0, \
                        const int* const i ## anm ## hi1, \
                        const int* const i ## anm ## hi2, \
                        const int* const i ## anm ## hi3, \
                        const int* const i ## anm ## hi4
#define DIMARG6p( anm ) const int* const i ## anm ## lo0, \
                        const int* const i ## anm ## lo1, \
                        const int* const i ## anm ## lo2, \
                        const int* const i ## anm ## lo3, \
                        const int* const i ## anm ## lo4, \
                        const int* const i ## anm ## lo5, \
                        const int* const i ## anm ## hi0, \
                        const int* const i ## anm ## hi1, \
                        const int* const i ## anm ## hi2, \
                        const int* const i ## anm ## hi3, \
                        const int* const i ## anm ## hi4, \
                        const int* const i ## anm ## hi5
#define DIMARG7p( anm ) const int* const i ## anm ## lo0, \
                        const int* const i ## anm ## lo1, \
                        const int* const i ## anm ## lo2, \
                        const int* const i ## anm ## lo3, \
                        const int* const i ## anm ## lo4, \
                        const int* const i ## anm ## lo5, \
                        const int* const i ## anm ## lo6, \
                        const int* const i ## anm ## hi0, \
                        const int* const i ## anm ## hi1, \
                        const int* const i ## anm ## hi2, \
                        const int* const i ## anm ## hi3, \
                        const int* const i ## anm ## hi4, \
                        const int* const i ## anm ## hi5, \
                        const int* const i ## anm ## hi6

#define DIMARGt_X(rank, anm)  DIMARG ## rank ## t(anm)
#define DIMARG1t( anm ) i ## anm ## lo0, \
                        i ## anm ## hi0
#define DIMARG2t( anm ) i ## anm ## lo0, \
                        i ## anm ## lo1, \
                        i ## anm ## hi0, \
                        i ## anm ## hi1
#define DIMARG3t( anm ) i ## anm ## lo0, \
                        i ## anm ## lo1, \
                        i ## anm ## lo2, \
                        i ## anm ## hi0, \
                        i ## anm ## hi1, \
                        i ## anm ## hi2
#define DIMARG4t( anm ) i ## anm ## lo0, \
                        i ## anm ## lo1, \
                        i ## anm ## lo2, \
                        i ## anm ## lo3, \
                        i ## anm ## hi0, \
                        i ## anm ## hi1, \
                        i ## anm ## hi2, \
                        i ## anm ## hi3
#define DIMARG5t( anm ) i ## anm ## lo0, \
                        i ## anm ## lo1, \
                        i ## anm ## lo2, \
                        i ## anm ## lo3, \
                        i ## anm ## lo4, \
                        i ## anm ## hi0, \
                        i ## anm ## hi1, \
                        i ## anm ## hi2, \
                        i ## anm ## hi3, \
                        i ## anm ## hi4
#define DIMARG6t( anm ) i ## anm ## lo0, \
                        i ## anm ## lo1, \
                        i ## anm ## lo2, \
                        i ## anm ## lo3, \
                        i ## anm ## lo4, \
                        i ## anm ## lo5, \
                        i ## anm ## hi0, \
                        i ## anm ## hi1, \
                        i ## anm ## hi2, \
                        i ## anm ## hi3, \
                        i ## anm ## hi4, \
                        i ## anm ## hi5
#define DIMARG7t( anm ) i ## anm ## lo0, \
                        i ## anm ## lo1, \
                        i ## anm ## lo2, \
                        i ## anm ## lo3, \
                        i ## anm ## lo4, \
                        i ## anm ## lo5, \
                        i ## anm ## lo6, \
                        i ## anm ## hi0, \
                        i ## anm ## hi1, \
                        i ## anm ## hi2, \
                        i ## anm ## hi3, \
                        i ## anm ## hi4, \
                        i ## anm ## hi5, \
                        i ## anm ## hi6

// Application array dimensions
#define CHF_ARRAY_X(rank, ...) CHFPTR ## rank(__VA_ARGS__)
#define CHF_CHARRAY_X(rank, name) ARCHFPTR ## rank(name)

// To specify the array rank as a function of SpaceDim
#if CH_SPACEDIM==1
# define RANK_SPACEDIM_PLUS_0 1
# define RANK_SPACEDIM_PLUS_1 2
# define RANK_SPACEDIM_PLUS_2 3
# define RANK_SPACEDIM_PLUS_3 4
# define RANK_SPACEDIM_PLUS_4 5
# define RANK_SPACEDIM_PLUS_5 6
# define RANK_SPACEDIM_PLUS_6 7
#elif CH_SPACEDIM==2
# define RANK_SPACEDIM_PLUS_0 2
# define RANK_SPACEDIM_PLUS_1 3
# define RANK_SPACEDIM_PLUS_2 4
# define RANK_SPACEDIM_PLUS_3 5
# define RANK_SPACEDIM_PLUS_4 6
# define RANK_SPACEDIM_PLUS_5 7
#elif CH_SPACEDIM==3
# define RANK_SPACEDIM_PLUS_0 3
# define RANK_SPACEDIM_PLUS_1 4
# define RANK_SPACEDIM_PLUS_2 5
# define RANK_SPACEDIM_PLUS_3 6
# define RANK_SPACEDIM_PLUS_4 7
#elif CH_SPACEDIM==4
# define RANK_SPACEDIM_PLUS_0 4
# define RANK_SPACEDIM_PLUS_1 5
# define RANK_SPACEDIM_PLUS_2 6
# define RANK_SPACEDIM_PLUS_3 7
#elif CH_SPACEDIM==5
# define RANK_SPACEDIM_PLUS_0 5
# define RANK_SPACEDIM_PLUS_1 6
# define RANK_SPACEDIM_PLUS_2 7
#elif CH_SPACEDIM==6
# define RANK_SPACEDIM_PLUS_0 6
# define RANK_SPACEDIM_PLUS_1 7
#endif

#endif

// ChomboFortran declaration macros for Application code

// primitive data types

/** @ingroup macros */
#define CHF_INT( i ) &i
/** @ingroup macros */
#define CHF_CONST_INT( i ) &i
/** @ingroup macros */
#define CHF_REAL( r ) &r
/** @ingroup macros */
#define CHF_CONST_REAL( r ) &r
/** @ingroup macros */
#define CHF_COMPLEX( c ) &c
/** @ingroup macros */
#define CHF_CONST_COMPLEX( c ) &c
/** @ingroup macros */
#define CHF_I1D(       ia,dimen ) ia,(const int*)chfptr(dimen-1)
/** @ingroup macros */
#define CHF_CONST_I1D( ia,dimen ) ia,(const int*)chfptr(dimen-1)
/** @ingroup macros */
#define CHF_R1D(       ra,dimen ) ra,(const int*)chfptr(dimen-1)
/** @ingroup macros */
#define CHF_CONST_R1D( ra,dimen ) ra,(const int*)chfptr(dimen-1)
/** @ingroup macros */
#define CHF_C1D(       ra,dimen ) ra,(const int*)chfptr(dimen-1)
/** @ingroup macros */
#define CHF_CONST_C1D( ra,dimen ) ra,(const int*)chfptr(dimen-1)

/** @ingroup macros */
#define CHF_IARRAY(rank, ia, ...) ia,CHF_ARRAY_X(rank, __VA_ARGS__)
/** @ingroup macros */
#define CHF_CONST_IARRAY(rank, ia, ...) ia,CHF_ARRAY_X(rank, __VA_ARGS__)
/** @ingroup macros */
#define CHF_RARRAY(rank, ia, ...) ia,CHF_ARRAY_X(rank, __VA_ARGS__)
/** @ingroup macros */
#define CHF_CONST_RARRAY(rank, ia, ...) ia,CHF_ARRAY_X(rank, __VA_ARGS__)
/** @ingroup macros */
#define CHF_CARRAY(rank, ia, ...) ia,CHF_ARRAY_X(rank, __VA_ARGS__)
/** @ingroup macros */
#define CHF_CONST_CARRAY(rank, ia, ...) ia,CHF_ARRAY_X(rank, __VA_ARGS__)

// Chombo data types

/** @ingroup macros */
#define CHF_INTVECT( a ) a.dataPtr( )
/** @ingroup macros */
#define CHF_CONST_INTVECT( a ) a.dataPtr( )
/** @ingroup macros */
#define CHF_REALVECT( a ) a.dataPtr( )
/** @ingroup macros */
#define CHF_CONST_REALVECT( a ) a.dataPtr( )
/** @ingroup macros */
#define CHF_COMPLEXVECT( a ) a.dataPtr( )
/** @ingroup macros */
#define CHF_CONST_COMPLEXVECT( a ) a.dataPtr( )
/** @ingroup macros */
#define CHF_VI(       v ) &v[0],(const int*)chfptr(v.size()-1)
/** @ingroup macros */
#define CHF_CONST_VI( v ) &v[0],(const int*)chfptr(v.size()-1)
/** @ingroup macros */
#define CHF_VR(       v ) &v[0],(const int*)chfptr(v.size()-1)
/** @ingroup macros */
#define CHF_CONST_VR( v ) &v[0],(const int*)chfptr(v.size()-1)
/** @ingroup macros */
#define CHF_VC(       v ) &v[0],(const int*)chfptr(v.size()-1)
/** @ingroup macros */
#define CHF_CONST_VC( v ) &v[0],(const int*)chfptr(v.size()-1)

/** @ingroup macros */
#define CHF_BOX( b ) D_DECL6( &b.loVect()[0] \
                             ,&b.loVect()[1] \
                             ,&b.loVect()[2] \
                             ,&b.loVect()[3] \
                             ,&b.loVect()[4] \
                             ,&b.loVect()[5] ) \
                    ,D_DECL6( &b.hiVect()[0] \
                             ,&b.hiVect()[1] \
                             ,&b.hiVect()[2] \
                             ,&b.hiVect()[3] \
                             ,&b.hiVect()[4] \
                             ,&b.hiVect()[5] )

#define CHF_BOX_SHIFT( b , iv) D_DECL6( CHFPTR(b.loVect()[0] - iv[0]),  \
                                       CHFPTR(b.loVect()[1] - iv[1]),  \
                                       CHFPTR(b.loVect()[2] - iv[2]), \
                                       CHFPTR(b.loVect()[3] - iv[3]),  \
                                       CHFPTR(b.loVect()[4] - iv[4]),  \
                                       CHFPTR(b.loVect()[5] - iv[5]))  \
                              ,D_DECL6( CHFPTR(b.hiVect()[0] - iv[0]), \
                                       CHFPTR(b.hiVect()[1] - iv[1]),  \
                                       CHFPTR(b.hiVect()[2] - iv[2]),  \
                                       CHFPTR(b.hiVect()[3] - iv[3]), \
                                       CHFPTR(b.hiVect()[4] - iv[4]),  \
                                       CHFPTR(b.hiVect()[5] - iv[5]))

/** @ingroup macros */
#define CHF_FIA( a ) a.dataPtr( 0 ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] ) \
                     ,a.nCompPtr()

/** @ingroup macros */
#define CHF_FIA_SHIFT( a, iv )               \
  a.dataPtr(0),                              \
  D_DECL6( CHFPTR(a.loVect()[0] - iv[0]),    \
           CHFPTR(a.loVect()[1] - iv[1]),    \
           CHFPTR(a.loVect()[2] - iv[2]),    \
           CHFPTR(a.loVect()[3] - iv[3]),    \
           CHFPTR(a.loVect()[4] - iv[4]),    \
           CHFPTR(a.loVect()[5] - iv[5]) ),  \
  D_DECL6( CHFPTR(a.hiVect()[0] - iv[0]),    \
           CHFPTR(a.hiVect()[1] - iv[1]),    \
           CHFPTR(a.hiVect()[2] - iv[2]),    \
           CHFPTR(a.hiVect()[3] - iv[3]),    \
           CHFPTR(a.hiVect()[4] - iv[4]),    \
           CHFPTR(a.hiVect()[5] - iv[5]) ),  \
  a.nCompPtr()

/** @ingroup macros */
#define CHF_FRA( a ) a.dataPtr( 0 ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] ) \
                     ,a.nCompPtr()

/** @ingroup macros */
#define CHF_FRA_SHIFT( a , iv) a.dataPtr( 0 ),               \
                     D_DECL6( CHFPTR(a.loVect()[0] - iv[0]),  \
                             CHFPTR(a.loVect()[1] - iv[1]),   \
                             CHFPTR(a.loVect()[2] - iv[2]),   \
                             CHFPTR(a.loVect()[3] - iv[3]),  \
                             CHFPTR(a.loVect()[4] - iv[4]),   \
                             CHFPTR(a.loVect()[5] - iv[5]))   \
                    ,D_DECL6( CHFPTR(a.hiVect()[0] - iv[0]),  \
                             CHFPTR(a.hiVect()[1] - iv[1]),   \
                             CHFPTR(a.hiVect()[2] - iv[2]),   \
                             CHFPTR(a.hiVect()[3] - iv[3]),  \
                             CHFPTR(a.hiVect()[4] - iv[4]),   \
                             CHFPTR(a.hiVect()[5] - iv[5]))   \
                     ,a.nCompPtr()

/** @ingroup macros */
#define CHF_FCA( a ) a.dataPtr( 0 ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] ) \
                     ,a.nCompPtr()

/** @ingroup macros */
#define CHF_CONST_FIA( a ) a.dataPtr( 0 ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2]  \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] ) \
                     ,a.nCompPtr()

/** @ingroup macros */
#define CHF_CONST_FIA_SHIFT( a, iv )         \
  a.dataPtr(0),                              \
  D_DECL6( CHFPTR(a.loVect()[0] - iv[0]),    \
           CHFPTR(a.loVect()[1] - iv[1]),    \
           CHFPTR(a.loVect()[2] - iv[2]),    \
           CHFPTR(a.loVect()[3] - iv[3]),    \
           CHFPTR(a.loVect()[4] - iv[4]),    \
           CHFPTR(a.loVect()[5] - iv[5]) ),  \
  D_DECL6( CHFPTR(a.hiVect()[0] - iv[0]),    \
           CHFPTR(a.hiVect()[1] - iv[1]),    \
           CHFPTR(a.hiVect()[2] - iv[2]),    \
           CHFPTR(a.hiVect()[3] - iv[3]),    \
           CHFPTR(a.hiVect()[4] - iv[4]),    \
           CHFPTR(a.hiVect()[5] - iv[5]) ),  \
  a.nCompPtr()

/** @ingroup macros */
#define CHF_CONST_FRA( a ) a.dataPtr( 0 ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] ) \
                     ,a.nCompPtr()

/** @ingroup macros */
#define CHF_CONST_FRA_SHIFT( a , iv) a.dataPtr( 0 ),          \
                     D_DECL6( CHFPTR(a.loVect()[0] - iv[0]),  \
                             CHFPTR(a.loVect()[1] - iv[1]),   \
                             CHFPTR(a.loVect()[2] - iv[2]),   \
                             CHFPTR(a.loVect()[3] - iv[3]),   \
                             CHFPTR(a.loVect()[4] - iv[4]),   \
                             CHFPTR(a.loVect()[5] - iv[5]))   \
                    ,D_DECL6( CHFPTR(a.hiVect()[0] - iv[0]),  \
                             CHFPTR(a.hiVect()[1] - iv[1]),   \
                             CHFPTR(a.hiVect()[2] - iv[2]),   \
                             CHFPTR(a.hiVect()[3] - iv[3]),  \
                             CHFPTR(a.hiVect()[4] - iv[4]),   \
                             CHFPTR(a.hiVect()[5] - iv[5]))   \
                     ,a.nCompPtr()

/** @ingroup macros */
#define CHF_CONST_FCA( a ) a.dataPtr( 0 ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] ) \
                     ,a.nCompPtr()

/** @ingroup macros */
#define CHF_FIA1( a,n ) a.dataPtr( n ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] )

/** @ingroup macros */
#define CHF_FIA1_SHIFT( a, n, iv )           \
  a.dataPtr(n),                              \
  D_DECL6( CHFPTR(a.loVect()[0] - iv[0]),    \
           CHFPTR(a.loVect()[1] - iv[1]),    \
           CHFPTR(a.loVect()[2] - iv[2]),    \
           CHFPTR(a.loVect()[3] - iv[3]),    \
           CHFPTR(a.loVect()[4] - iv[4]),    \
           CHFPTR(a.loVect()[5] - iv[5]) ),  \
  D_DECL6( CHFPTR(a.hiVect()[0] - iv[0]),    \
           CHFPTR(a.hiVect()[1] - iv[1]),    \
           CHFPTR(a.hiVect()[2] - iv[2]),    \
           CHFPTR(a.hiVect()[3] - iv[3]),    \
           CHFPTR(a.hiVect()[4] - iv[4]),    \
           CHFPTR(a.hiVect()[5] - iv[5]) )

/** @ingroup macros */
#define CHF_FRA1( a,n ) a.dataPtr( n ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] )

/** @ingroup macros */
#define CHF_FRA1_SHIFT( a, n, iv)            \
  a.dataPtr( 0 ),                            \
  D_DECL6( CHFPTR(a.loVect()[0] - iv[0]),    \
           CHFPTR(a.loVect()[1] - iv[1]),    \
           CHFPTR(a.loVect()[2] - iv[2]),    \
           CHFPTR(a.loVect()[3] - iv[3]),    \
           CHFPTR(a.loVect()[4] - iv[4]),    \
           CHFPTR(a.loVect()[5] - iv[5]) ),  \
  D_DECL6( CHFPTR(a.hiVect()[0] - iv[0]),    \
           CHFPTR(a.hiVect()[1] - iv[1]),    \
           CHFPTR(a.hiVect()[2] - iv[2]),    \
           CHFPTR(a.hiVect()[3] - iv[3]),    \
           CHFPTR(a.hiVect()[4] - iv[4]),    \
           CHFPTR(a.hiVect()[5] - iv[5]) )

/** @ingroup macros */
#define CHF_FCA1( a,n ) a.dataPtr( n ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] )

/** @ingroup macros */
#define CHF_CONST_FIA1( a,n ) a.dataPtr( n ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] )

/** @ingroup macros */
#define CHF_CONST_FIA1_SHIFT( a, n, iv )     \
  a.dataPtr(n),                              \
  D_DECL6( CHFPTR(a.loVect()[0] - iv[0]),    \
           CHFPTR(a.loVect()[1] - iv[1]),    \
           CHFPTR(a.loVect()[2] - iv[2]),    \
           CHFPTR(a.loVect()[3] - iv[3]),    \
           CHFPTR(a.loVect()[4] - iv[4]),    \
           CHFPTR(a.loVect()[5] - iv[5]) ),  \
  D_DECL6( CHFPTR(a.hiVect()[0] - iv[0]),    \
           CHFPTR(a.hiVect()[1] - iv[1]),    \
           CHFPTR(a.hiVect()[2] - iv[2]),    \
           CHFPTR(a.hiVect()[3] - iv[3]),    \
           CHFPTR(a.hiVect()[4] - iv[4]),    \
           CHFPTR(a.hiVect()[5] - iv[5]) )

/** @ingroup macros */
#define CHF_CONST_FRA1( a,n ) a.dataPtr( n ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[3] \
                             ,&a.loVect()[4] \
                             ,&a.loVect()[5] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] )

/** @ingroup macros */
#define CHF_CONST_FRA1_SHIFT( a, n, iv)      \
  a.dataPtr( 0 ),                            \
  D_DECL6( CHFPTR(a.loVect()[0] - iv[0]),    \
           CHFPTR(a.loVect()[1] - iv[1]),    \
           CHFPTR(a.loVect()[2] - iv[2]),    \
           CHFPTR(a.loVect()[3] - iv[3]),    \
           CHFPTR(a.loVect()[4] - iv[4]),    \
           CHFPTR(a.loVect()[5] - iv[5]) ),  \
  D_DECL6( CHFPTR(a.hiVect()[0] - iv[0]),    \
           CHFPTR(a.hiVect()[1] - iv[1]),    \
           CHFPTR(a.hiVect()[2] - iv[2]),    \
           CHFPTR(a.hiVect()[3] - iv[3]),    \
           CHFPTR(a.hiVect()[4] - iv[4]),    \
           CHFPTR(a.hiVect()[5] - iv[5]) )

/** @ingroup macros */
#define CHF_CONST_FCA1( a,n ) a.dataPtr( n ) \
                     ,D_DECL6( &a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] \
                             ,&a.loVect()[0] \
                             ,&a.loVect()[1] \
                             ,&a.loVect()[2] ) \
                     ,D_DECL6( &a.hiVect()[0] \
                             ,&a.hiVect()[1] \
                             ,&a.hiVect()[2] \
                             ,&a.hiVect()[3] \
                             ,&a.hiVect()[4] \
                             ,&a.hiVect()[5] )

/** @ingroup macros */
#define CHF_ICHARRAY(rank, ia) ia.begin(),CHF_CHARRAY_X(rank, ia)
/** @ingroup macros */
#define CHF_CONST_ICHARRAY(rank, ia) ia.begin(),CHF_CHARRAY_X(rank, ia)
/** @ingroup macros */
#define CHF_RCHARRAY(rank, ra) ra.begin(),CHF_CHARRAY_X(rank, ra)
/** @ingroup macros */
#define CHF_CONST_RCHARRAY(rank, ra) ra.begin(),CHF_CHARRAY_X(rank, ra)
/** @ingroup macros */
#define CHF_CCHARRAY(rank, ra) ra.begin(),CHF_CHARRAY_X(rank, ra)
/** @ingroup macros */
#define CHF_CONST_CCHARRAY(rank, ra) ra.begin(),CHF_CHARRAY_X(rank, ra)
/** @ingroup macros */
#define CHF_VECTOR(ra) ra.begin(),CHF_CHARRAY_X(1, ra)
/** @ingroup macros */
#define CHF_CONST_VECTOR(ra) ra.begin(),CHF_CHARRAY_X(1, ra)
/** @ingroup macros */
#define CHF_MATRIX(ra) ra.begin(),CHF_CHARRAY_X(2, ra)
/** @ingroup macros */
#define CHF_CONST_MATRIX(ra) ra.begin(),CHF_CHARRAY_X(2, ra)

// Macros used in automatically-generated Chombo Fortran prototypes

// primitive data types

#define CHFp_INT( i ) int* const i
#define CHFp_CONST_INT( i ) const int* const i
#define CHFp_REAL( r ) Real* const r
#define CHFp_CONST_REAL( r ) const Real* const r
#define CHFp_COMPLEX( c ) Complex* const c
#define CHFp_CONST_COMPLEX( c ) const Complex* const c
//[NOTE: the *1D macros has 2 args in C++, but just 1 in Fortran]
#define CHFp_I1D(       ia,dimen )        int* const ia, const int* const i ## ia ## hi0
#define CHFp_CONST_I1D( ia,dimen ) const  int* const ia, const int* const i ## ia ## hi0
#define CHFp_R1D(       ra,dimen )       Real* const ra, const int* const i ## ra ## hi0
#define CHFp_CONST_R1D( ra,dimen ) const Real* const ra, const int* const i ## ra ## hi0
#define CHFp_C1D(       ra,dimen )       Complex* const ra, const int* const i ## ra ## hi0
#define CHFp_CONST_C1D( ra,dimen ) const Complex* const ra, const int* const i ## ra ## hi0
//[NOTE: primitive multidimensional arrays cannot depend on SpaceDim]
#define CHFp_IARRAY(      rank, ia, ...)           int* const ia, DIMARG ## rank ## p(ia)
#define CHFp_CONST_IARRAY(rank, ia, ...) const     int* const ia, DIMARG ## rank ## p(ia)
#define CHFp_RARRAY(      rank, ra, ...)          Real* const ra, DIMARG ## rank ## p(ra)
#define CHFp_CONST_RARRAY(rank, ra, ...) const    Real* const ra, DIMARG ## rank ## p(ra)
#define CHFp_CARRAY(      rank, ra, ...)       Complex* const ra, DIMARG ## rank ## p(ra)
#define CHFp_CONST_CARRAY(rank, ra, ...) const Complex* const ra, DIMARG ## rank ## p(ra)

// Chombo data types

#define CHFp_INTVECT( r ) int* const r
#define CHFp_CONST_INTVECT( r ) const int* const r
#define CHFp_REALVECT( r )  Real* const r
#define CHFp_CONST_REALVECT( r ) const Real* const r
#define CHFp_COMPLEXVECT( r )  Complex* const r
#define CHFp_CONST_COMPLEXVECT( r ) const Complex* const r
#define CHFp_VI(       v )        int * const v, const int* const i ## v ## hi0
#define CHFp_CONST_VI( v ) const  int * const v, const int* const i ## v ## hi0
#define CHFp_VR(       v )       Real * const v, const int* const i ## v ## hi0
#define CHFp_CONST_VR( v ) const Real * const v, const int* const i ## v ## hi0
#define CHFp_VC(       v )       Complex * const v, const int* const i ## v ## hi0
#define CHFp_CONST_VC( v ) const Complex * const v, const int* const i ## v ## hi0

#define CHFp_BOX( b ) D_DECL6( const int* const i ## b ## lo0 \
                             ,const int* const i ## b ## lo1 \
                             ,const int* const i ## b ## lo2 \
                             ,const int* const i ## b ## lo3 \
                             ,const int* const i ## b ## lo4 \
                             ,const int* const i ## b ## lo5 ) \
                     ,D_DECL6( const int* const i ## b ## hi0 \
                             ,const int* const i ## b ## hi1 \
                             ,const int* const i ## b ## hi2 \
                             ,const int* const i ## b ## hi3 \
                             ,const int* const i ## b ## hi4 \
                             ,const int* const i ## b ## hi5 )

#define CHFp_FIA( a ) int *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 ) \
                             ,const int* const n ## a ## comp
#define CHFp_FRA( a ) Real *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 ) \
                             ,const int* const n ## a ## comp
#define CHFp_FCA( a ) Complex *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 ) \
                             ,const int* const n ## a ## comp
#define CHFp_CONST_FIA( a ) const int *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             , const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 ) \
                             ,const int* const n ## a ## comp
#define CHFp_CONST_FRA( a ) const Real *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 ) \
                             ,const int* const n ## a ## comp
#define CHFp_CONST_FCA( a ) const Complex *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 ) \
                             ,const int* const n ## a ## comp
#define CHFp_FIA1( a ) int *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 )
#define CHFp_FRA1( a ) Real *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 )
#define CHFp_FCA1( a ) Complex *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 )
#define CHFp_CONST_FIA1( a ) const int *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 )
#define CHFp_CONST_FRA1( a ) const Real *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 )
#define CHFp_CONST_FCA1( a ) const Complex *const a \
                     ,D_DECL6( const int* const i ## a ## lo0 \
                             ,const int* const i ## a ## lo1 \
                             ,const int* const i ## a ## lo2 \
                             ,const int* const i ## a ## lo3 \
                             ,const int* const i ## a ## lo4 \
                             ,const int* const i ## a ## lo5 ) \
                     ,D_DECL6( const int* const i ## a ## hi0 \
                             ,const int* const i ## a ## hi1 \
                             ,const int* const i ## a ## hi2 \
                             ,const int* const i ## a ## hi3 \
                             ,const int* const i ## a ## hi4 \
                             ,const int* const i ## a ## hi5 )

//[NOTE: Chombo multidimensional arrays can depend on SpaceDim]
//[NOTE: CHVector and CHMatrix are converted to CHFp_RCHARRAY
#define CHFp_ICHARRAY(      rank, ia)           int* const ia, DIMARGp_X(rank, ia)
#define CHFp_CONST_ICHARRAY(rank, ia) const     int* const ia, DIMARGp_X(rank, ia)
#define CHFp_RCHARRAY(      rank, ra)          Real* const ra, DIMARGp_X(rank, ra)
#define CHFp_CONST_RCHARRAY(rank, ra) const    Real* const ra, DIMARGp_X(rank, ra)
#define CHFp_CCHARRAY(      rank, ra)       Complex* const ra, DIMARGp_X(rank, ra)
#define CHFp_CONST_CCHARRAY(rank, ra) const Complex* const ra, DIMARGp_X(rank, ra)

#define CHFt_INT( i )  i
#define CHFt_CONST_INT( i )  i
#define CHFt_REAL( r )  r
#define CHFt_CONST_REAL( r )  r
#define CHFt_COMPLEX( c )  c
#define CHFt_CONST_COMPLEX( c )  c
//[NOTE: the *1D macros has 2 args in C++, but just 1 in Fortran]
#define CHFt_I1D(       ia,dimen )         ia,  i ## ia ## hi0
#define CHFt_CONST_I1D( ia,dimen )   ia,  i ## ia ## hi0
#define CHFt_R1D(       ra,dimen )        ra,  i ## ra ## hi0
#define CHFt_CONST_R1D( ra,dimen )  ra,  i ## ra ## hi0
#define CHFt_C1D(       ra,dimen )        ra,  i ## ra ## hi0
#define CHFt_CONST_C1D( ra,dimen )  ra,  i ## ra ## hi0
//[NOTE: primitive multidimensional arrays cannot depend on SpaceDim]
#define CHFt_CONST_IARRAY(rank, ia, ...) ia, DIMARG ## rank ## t(ia)
#define CHFt_IARRAY(      rank, ia, ...) ia, DIMARG ## rank ## t(ia)
#define CHFt_CONST_RARRAY(rank, ra, ...) ra, DIMARG ## rank ## t(ra)
#define CHFt_RARRAY(      rank, ra, ...) ra, DIMARG ## rank ## t(ra)
#define CHFt_CONST_CARRAY(rank, ra, ...) ra, DIMARG ## rank ## t(ra)
#define CHFt_CARRAY(      rank, ra, ...) ra, DIMARG ## rank ## t(ra)

// Chombo data types

#define CHFt_INTVECT( r )  r
#define CHFt_CONST_INTVECT( r )  r
#define CHFt_REALVECT( r )   r
#define CHFt_CONST_REALVECT( r )  r
#define CHFt_COMPLEXVECT( r )   r
#define CHFt_CONST_COMPLEXVECT( r )  r
#define CHFt_VI(       v )       v,  i ## v ## hi0
#define CHFt_CONST_VI( v )  v,  i ## v ## hi0
#define CHFt_VR(       v )       v,  i ## v ## hi0
#define CHFt_CONST_VR( v ) v,  i ## v ## hi0
#define CHFt_VC(       v )      v,  i ## v ## hi0
#define CHFt_CONST_VC( v ) v,  i ## v ## hi0

#define CHFt_BOX( b ) D_DECL6(  i ## b ## lo0 \
                             , i ## b ## lo1 \
                             , i ## b ## lo2 \
                             , i ## b ## lo3 \
                             , i ## b ## lo4 \
                             , i ## b ## lo5 ) \
                     ,D_DECL6(  i ## b ## hi0 \
                             , i ## b ## hi1 \
                             , i ## b ## hi2 \
                             , i ## b ## hi3 \
                             , i ## b ## hi4 \
                             , i ## b ## hi5 )

#define CHFt_FIA( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 ) \
                             , n ## a ## comp
#define CHFt_FRA( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 ) \
                             , n ## a ## comp
#define CHFt_FCA( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 ) \
                             , n ## a ## comp
#define CHFt_CONST_FIA( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 ) \
                             , n ## a ## comp
#define CHFt_CONST_FRA( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 ) \
                             , n ## a ## comp
#define CHFt_CONST_FCA( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 ) \
                             , n ## a ## comp
#define CHFt_FIA1( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 )
#define CHFt_FRA1( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 )
#define CHFt_FCA1( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 )
#define CHFt_CONST_FIA1( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 )
#define CHFt_CONST_FRA1( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 )
#define CHFt_CONST_FCA1( a ) a \
                     ,D_DECL6(  i ## a ## lo0 \
                             , i ## a ## lo1 \
                             , i ## a ## lo2 \
                             , i ## a ## lo3 \
                             , i ## a ## lo4 \
                             , i ## a ## lo5 ) \
                     ,D_DECL6(  i ## a ## hi0 \
                             , i ## a ## hi1 \
                             , i ## a ## hi2 \
                             , i ## a ## hi3 \
                             , i ## a ## hi4 \
                             , i ## a ## hi5 )

//[NOTE: Chombo multidimensional arrays can depend on SpaceDim]
//[NOTE: CHVector and CHMatrix are converted to CHFt_RCHARRAY
#define CHFt_CONST_ICHARRAY(rank, ia) ia, DIMARGt_X(rank, ia)
#define CHFt_ICHARRAY(      rank, ia) ia, DIMARGt_X(rank, ia)
#define CHFt_CONST_RCHARRAY(rank, ra) ra, DIMARGt_X(rank, ra)
#define CHFt_RCHARRAY(      rank, ra) ra, DIMARGt_X(rank, ra)
#define CHFt_CONST_CCHARRAY(rank, ra) ra, DIMARGt_X(rank, ra)
#define CHFt_CCHARRAY(      rank, ra) ra, DIMARGt_X(rank, ra)

#include "BaseNamespaceFooter.H"
#endif
