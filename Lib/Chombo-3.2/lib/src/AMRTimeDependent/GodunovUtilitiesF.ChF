C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

      subroutine MINFLATF(
     &     CHF_FRA1[flattening],
     &     CHF_CONST_FRA[zetaDir],
     &     CHF_CONST_FRA[du],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i]
      integer iv
      real_t  sumdu,minflattot,minZetaDir

      CHF_AUTOMULTIDO[box;i]
         sumdu = zero

         do iv = 0,CHF_NCOMP[du] - 1
            sumdu = sumdu + du(CHF_AUTOIX[i],iv)
         enddo

         if (sumdu .lt. zero) then
            minflattot = zetaDir(CHF_AUTOIX[i],0)

            do iv = 1,CHF_NCOMP[du] - 1
               minZetaDir = zetaDir(CHF_AUTOIX[i],iv)
               minflattot = min(minflattot,minZetaDir)
            enddo

            flattening(CHF_AUTOIX[i]) = minflattot
         else
            flattening(CHF_AUTOIX[i]) = one
         endif
      CHF_ENDDO

      return
      end


      subroutine GETDPTWOF(
     &     CHF_FRA1[delta2p],
     &     CHF_CONST_FRA1[delta1p],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]

c     Perform centered average to obtain delta2p in the interior.

      CHF_AUTOID[ioff; idir]

      CHF_AUTOMULTIDO[centerBox; i]
         delta2p(CHF_AUTOIX[i]) = delta1p(CHF_OFFSETIX[i; +ioff])
     &     + delta1p(CHF_OFFSETIX[i; -ioff])
      CHF_ENDDO

c     Perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

      if (hasLo .eq. 1) then
         CHF_AUTOMULTIDO[loBox;i]
            delta2p(CHF_AUTOIX[i]) = delta1p(CHF_OFFSETIX[i; +ioff])
     &                             + delta1p(CHF_AUTOIX[i])
            CHF_ENDDO
         endif

      if (hasHi .eq. 1) then
         CHF_AUTOMULTIDO[hiBox;i]
            delta2p(CHF_AUTOIX[i]) = delta1p(CHF_AUTOIX[i])
     &                             + delta1p(CHF_OFFSETIX[i; -ioff])
         CHF_ENDDO
      endif

      return
      end


      subroutine GETFLATF(
     &     CHF_FRA1[zetaTwiddle],
     &     CHF_CONST_FRA1[delta1p],
     &     CHF_CONST_FRA1[delta2p],
     &     CHF_CONST_REAL[smallp],
     &     CHF_CONST_FRA1[bulkMin],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i]
      real_t d,r0,r1,ratio,strength

#ifdef     CH_USE_FLOAT
      data d  /0.33/
      data r0 /0.75/
      data r1 /0.85/
#endif
#ifdef     CH_USE_DOUBLE
#ifdef  CH_CRAY
      data d  /0.33/
      data r0 /0.75/
      data r1 /0.85/
#else
      data d  /0.33d0/
      data r0 /0.75d0/
      data r1 /0.85d0/
#endif
#endif

c     Perform pointwise operation in the interior.

      CHF_AUTOMULTIDO[box;i]
         strength = abs(delta1p(CHF_AUTOIX[i])/bulkMin(CHF_AUTOIX[i]))

         if (strength .ge. d) then
            ratio =     abs(delta1p(CHF_AUTOIX[i])
     &            / max(abs(delta2p(CHF_AUTOIX[i])),smallp))

            if (ratio .le. r0) then
               zetaTwiddle(CHF_AUTOIX[i]) = one
            else if (ratio .ge. r1) then
               zetaTwiddle(CHF_AUTOIX[i]) = zero
            else
               zetaTwiddle(CHF_AUTOIX[i]) = one - (ratio - r0)/(r1 - r0)
            endif
         else
            zetaTwiddle(CHF_AUTOIX[i]) = one
         endif
      CHF_ENDDO

      return
      end


      subroutine GETGRADF(
     &     CHF_FRA1[du],
     &     CHF_CONST_FRA1[u],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]

      CHF_AUTOID[ioff; idir]

c     Perform first difference calculation in the interior.

      CHF_AUTOMULTIDO[centerBox;i]
         du(CHF_AUTOIX[i]) = half*(u(CHF_OFFSETIX[i; +ioff])
     &                           - u(CHF_OFFSETIX[i; -ioff]))
      CHF_ENDDO

c     Perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

      if (hasLo .eq. 1) then
         CHF_AUTOMULTIDO[loBox;i]
            du(CHF_AUTOIX[i]) = (u(CHF_OFFSETIX[i; +ioff])
     &                         - u(CHF_AUTOIX[i]))
         CHF_ENDDO
      endif

      if (hasHi .eq. 1) then
         CHF_AUTOMULTIDO[hiBox;i]
            du(CHF_AUTOIX[i]) = (u(CHF_AUTOIX[i])
     &                         - u(CHF_OFFSETIX[i; -ioff]))
         CHF_ENDDO
      endif

      return
      end


      subroutine MIN3PTSF(
     &     CHF_FRA1[mindata],
     &     CHF_CONST_FRA1[data],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]

      CHF_AUTOID[ioff; idir]

c     Perform 3 point minimum calculation in the interior.

      CHF_AUTOMULTIDO[centerBox; i]
         mindata(CHF_AUTOIX[i]) = min(data(CHF_AUTOIX[i]),
     &     data(CHF_OFFSETIX[i; +ioff]),
     &     data(CHF_OFFSETIX[i; -ioff]))
      CHF_ENDDO

c     Perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

      if (hasLo .ne. 0) then
         CHF_AUTOMULTIDO[loBox;i]
            mindata(CHF_AUTOIX[i]) = min(data(CHF_AUTOIX[i]),
     &        data(CHF_OFFSETIX[i; +ioff]))
         CHF_ENDDO
      endif

      if (hasHi .ne. 0) then
         CHF_AUTOMULTIDO[hiBox;i]
            mindata(CHF_AUTOIX[i]) = min(data(CHF_AUTOIX[i]),
     &        data(CHF_OFFSETIX[i; -ioff]))
         CHF_ENDDO
      endif

      return
      end


      subroutine SECONDSLOPEDIFFSF(
     &     CHF_FRA[deltaWC],
     &     CHF_FRA[deltaWL],
     &     CHF_FRA[deltaWR],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer lvar
      integer CHF_AUTODECL[ioff]
      real_t dWR,dWL

      CHF_AUTOID[ioff; idir]

      do lvar = 0,numSlopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
            dWR = W(CHF_OFFSETIX[i; +ioff],lvar)
     &        - W(CHF_AUTOIX[i],lvar)
            dWL = W(CHF_AUTOIX[i],lvar)
     &           - W(CHF_OFFSETIX[i; -ioff],lvar)

            deltaWR(CHF_AUTOIX[i],lvar) = dWR
            deltaWL(CHF_AUTOIX[i],lvar) = dWL
            deltaWC(CHF_AUTOIX[i],lvar) = half*(dWR + dWL)
         CHF_ENDDO

c     Perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

         if (hasLo .ne. 0) then
            CHF_AUTOMULTIDO[loBox;i]
               dWR = W(CHF_OFFSETIX[i; +ioff],lvar)
     &           - W(CHF_AUTOIX[i],lvar)
               deltaWC(CHF_AUTOIX[i],lvar) = dWR
               deltaWL(CHF_AUTOIX[i],lvar) = dWR
               deltaWR(CHF_AUTOIX[i],lvar) = dWR
            CHF_ENDDO
         endif

         if (hasHi .ne. 0) then
            CHF_AUTOMULTIDO[hiBox;i]
               dWL = W(CHF_AUTOIX[i],lvar)
     &           - W(CHF_OFFSETIX[i; -ioff],lvar)
               deltaWC(CHF_AUTOIX[i],lvar) = dWL
               deltaWL(CHF_AUTOIX[i],lvar) = dWL
               deltaWR(CHF_AUTOIX[i],lvar) = dWL
            CHF_ENDDO
         endif
      enddo

      return
      end


      subroutine FOURTHSLOPEDIFFSF(
     &     CHF_FRA[delta4WC],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_FRA[delta2W],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]
      integer lvar
      real_t dWR,dWL

      CHF_AUTOID[ioff; idir]

c     Perform first difference calculation in the interior.

      do lvar = 0,numSlopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
            dWR =       W(CHF_OFFSETIX[i; +ioff],lvar)
     &          - delta2W(CHF_OFFSETIX[i; +ioff],lvar)*fourth
            dWL =       W(CHF_OFFSETIX[i; -ioff],lvar)
     &          + delta2W(CHF_OFFSETIX[i; -ioff],lvar)*fourth
            delta4WC(CHF_AUTOIX[i],lvar) = two3rd*(dWR - dWL)
         CHF_ENDDO

c     Perform calculation on the cells adjacent to the domain boundary in
c     current direction, if required.

         if (hasLo .ne. 0) then
            CHF_AUTOMULTIDO[loBox; i]
               delta4WC(CHF_AUTOIX[i],lvar) =
     &           delta2W(CHF_AUTOIX[i],lvar)
            CHF_ENDDO
         endif

         if (hasHi .ne. 0) then
            CHF_AUTOMULTIDO[hiBox; i]
               delta4WC(CHF_AUTOIX[i],lvar) =
     &           delta2W(CHF_AUTOIX[i],lvar)
            CHF_ENDDO
         endif
      enddo

      return
      end


      subroutine APPLYFLATF(
     &     CHF_FRA[dW],
     &     CHF_CONST_FRA1[flattening],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i]
      integer lvar

c     apply the flattening coefficient
      do lvar = 0,numSlopes - 1
         CHF_AUTOMULTIDO[box; i]
            dW(CHF_AUTOIX[i],lvar) = flattening(CHF_AUTOIX[i])
     &        * dW(CHF_AUTOIX[i],lvar)
         CHF_ENDDO
      enddo

      return
      end


      subroutine VANLEERLIMITERF(
     &     CHF_FRA[dW],
     &     CHF_CONST_FRA[dWleft],
     &     CHF_CONST_FRA[dWright],
     &     CHF_CONST_INT[numslopes],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i]
      integer iv
      real_t dWl,dWr,dWc,dWlim

      do iv = 0,numslopes - 1
         CHF_AUTOMULTIDO[box;i]
c     dW comes in with the centered diff value
            dWc = dW     (CHF_AUTOIX[i],iv)
            dWl = dWleft (CHF_AUTOIX[i],iv)
            dWr = dWright(CHF_AUTOIX[i],iv)

            dWlim = min(two*abs(dWl),two*abs(dWr))
            dWlim = min(dWlim,abs(dWc))

            if (dWl * dWr .lt. zero) then
               dWlim = zero
            else
               dWlim = dWlim*sign(one,dWl)
            endif

            dW(CHF_AUTOIX[i],iv) = dWlim
         CHF_ENDDO
      enddo

      return
      end


      subroutine EXTPRESERVINGVANLEERLIMITERF(
     &     CHF_FRA[dW],
     &     CHF_CONST_FRA[dWleft],
     &     CHF_CONST_FRA[dWright],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]
      integer iv
      real_t dWL, dWLL, dWR, dWRR, dWC, dWlim
      real_t dp1, dp2, dpmin
      real_t dW2L, dW2C, dW2R, dW2lim
      real_t sign2, sign1
      real_t cvl, dWvl

      CHF_AUTOID[ioff; idir]

      cvl = five * fourth

      do iv = 0,numslopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
!     dW comes in with the centered diff value
            dWC  = dW     (CHF_AUTOIX[i], iv)
            dWL  = dWleft (CHF_AUTOIX[i], iv)
            dWLL = dWleft (CHF_OFFSETIX[i; -ioff], iv)
            dWR  = dWright(CHF_AUTOIX[i], iv)
            dWRR = dWright(CHF_OFFSETIX[i; +ioff], iv)

!     dWLL = W[i - e] - W[i - 2*e]
!     dWL  = W[i] - W[i - e]
!     dWC  = (W[i + e] - W[i - e]) / 2 = (dWL + dWR) / 2
!     dWR  = W[i + e] - W[i]
!     dWRR = W[i + 2*e] - W[i + e]

            dp1 = dWL * dWR
            dp2 = dWLL * dWRR
            dpmin = min(dp1, dp2)

!     dp1 < 0 means slopes of W in [i-e:i] and [i:i+e] have opp signs
!     dp2 < 0 means slopes of W in [i-2*e:i-e] and [i+e:i+2*e] have opp signs
            if (dpmin .lt. zero) then
!     extremum-preserving van Leer limiter
               dW2L = dWL - dWLL
!     30 Oct 2008:  inserted half here, which I'd forgotten
               dW2C = (dWR - dWL) * half
               dW2R = dWRR - dWR

               sign2 = sign(one, dW2C)
!     Note dW2lim >= 0.
               dW2lim = min(abs(dW2C),
     &              max(sign2*dW2L, zero),
     &              max(sign2*dW2R, zero))

               dWvl = cvl * three * half * dW2lim
!     Note sign2 * dWC, not sign2 * dW2C.
               if (sign2 * dWC .lt. zero) then
                  dWlim = min(dWvl, two * abs(dWL))
               else
                  dWlim = min(dWvl, two * abs(dWR))
               endif
            else
!     conventional van Leer limiter (for dp1 >= 0, because dpmin >=0)
               dWlim = two * min(abs(dWL), abs(dWR))
!     if W is smooth, then |dWC| < dWlim; hence, retain dW[i] = dWC
            endif
            sign1 = sign(one, dWC)
            dW(CHF_AUTOIX[i], iv) = sign1 * min(abs(dWC), dWlim)
          CHF_ENDDO
       enddo

       return
       end


      subroutine PLMNORMALPREDF(
     &     CHF_FRA[dWMinus],
     &     CHF_FRA[dWPlus],
     &     CHF_CONST_FRA[dW],
     &     CHF_CONST_FRA[lambda],
     &     CHF_CONST_REAL[dtbydx],
     &     CHF_CONST_INT[nSlope],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i]
      integer iv
      real_t  lmin, lmax, lambdaK

      do iv = 0,nSlope-1
         CHF_AUTOMULTIDO[box; i]

c     The characteristic analysis is assumed to put the eigenvalues
c     in order from smallest to largest

            lmin = min(lambda(CHF_AUTOIX[i],0       ),zero)
            lmax = max(lambda(CHF_AUTOIX[i],nSlope-1),zero)

            lambdaK = lambda(CHF_AUTOIX[i],iv)

            if (lambdaK .gt. zero) then
               dWMinus(CHF_AUTOIX[i],iv) = dW(CHF_AUTOIX[i],iv) *
     &              (-half) * (one + dtbydx * lmin   )
               dWPlus (CHF_AUTOIX[i],iv) = dW(CHF_AUTOIX[i],iv) *
     &              half * (one - dtbydx * lambdaK)
            elseif (lambdaK .lt. zero) then
               dWMinus(CHF_AUTOIX[i],iv) = dW(CHF_AUTOIX[i],iv) *
     &              (-half) * (one + dtbydx * lambdaK)
               dWPlus (CHF_AUTOIX[i],iv) = dW(CHF_AUTOIX[i],iv) *
     &              half * (one - dtbydx * lmax   )
            else
               dWMinus(CHF_AUTOIX[i],iv) = dW(CHF_AUTOIX[i],iv) *
     &              (-half) * (one + dtbydx * lmin   )
               dWPlus (CHF_AUTOIX[i],iv) = dW(CHF_AUTOIX[i],iv) *
     &              half * (one - dtbydx * lmax   )
            endif
         CHF_ENDDO
      enddo

      return
      end


      subroutine DIVUEDGEF(
     &     CHF_FRA1[divu],
     &     CHF_CONST_FRA1[uNorm],
     &     CHF_CONST_FRA[duTan],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2cHi]
      integer dimTan

      CHF_AUTOID[ioff; idir]
!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]

      CHF_AUTOMULTIDO[centerBox;i]
         divu(CHF_AUTOIX[i]) = uNorm(CHF_OFFSETIX[i; +f2cHi])
     &                       - uNorm(CHF_OFFSETIX[i; +f2cLo])

         do dimTan = 0, CH_SPACEDIM-2
            divu(CHF_AUTOIX[i]) = divu(CHF_AUTOIX[i])
     &           + half*(duTan(CHF_OFFSETIX[i; +f2cHi],dimTan)
     &                 + duTan(CHF_OFFSETIX[i; +f2cLo],dimTan))
         enddo
      CHF_ENDDO

      if (hasLo .eq. 1) then
         CHF_AUTOMULTIDO[loBox;i]
            divu(CHF_AUTOIX[i]) = divu(CHF_OFFSETIX[i; +ioff])
         CHF_ENDDO
      endif

      if (hasHi .eq. 1) then
         CHF_AUTOMULTIDO[hiBox;i]
            divu(CHF_AUTOIX[i]) = divu(CHF_OFFSETIX[i; -ioff])
         CHF_ENDDO
      endif

      return
      end


      subroutine ARTVISCF(
     &    CHF_FRA[F],
     &    CHF_CONST_FRA[U],
     &    CHF_CONST_FRA1[divu],
     &    CHF_CONST_REAL[coeff],
     &    CHF_CONST_INT[idir],
     &    CHF_BOX[fbox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2cHi]
      integer iv
      real_t dv, uLo, uHi

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]

      do iv = 0, CHF_NCOMP[U] - 1
         CHF_AUTOMULTIDO[fbox; i]
            dv = divu(CHF_AUTOIX[i])
            if (dv .lt. zero) then
               uLo = U(CHF_OFFSETIX[i; +f2cLo], iv)
               uHi = U(CHF_OFFSETIX[i; +f2cHi], iv)
               F(CHF_AUTOIX[i], iv) = F(CHF_AUTOIX[i], iv) +
     &              coeff * dv * (uHi - uLo)
            endif
         CHF_ENDDO
      enddo

      return
      end

      subroutine PPMLIMITERF(
     &    CHF_FRA[dWMinus],
     &    CHF_FRA[dWPlus],
     &    CHF_CONST_INT[numSlopes],
     &    CHF_BOX[box])

      integer CHF_AUTODECL[i]
      integer iv
      real_t dWl,dWh,dWc,d2W,s

      do iv = 0, numSlopes - 1
         CHF_AUTOMULTIDO[box; i]
            dWl = dWMinus(CHF_AUTOIX[i], iv)
            dWh = dWPlus (CHF_AUTOIX[i], iv)
            if (dWl * dWh .lt. zero) then
               dWc = (dWh + dWl) * half
               d2W =  dWh - dWl
               s = sign(one,dWc)
               if (dWc * d2W .gt. zero) then
                  dWPlus (CHF_AUTOIX[i],iv) =
     &                 s * min(-two * s * dWl, s * dWh)
               else
                  dWMinus(CHF_AUTOIX[i],iv) =
     &                 s * min(s * dWl, -two * s * dWh)
               endif
            else
               dWPlus (CHF_AUTOIX[i], iv) = zero
               dWMinus(CHF_AUTOIX[i], iv) = zero
            endif
         CHF_ENDDO
      enddo

      return
      end

      subroutine COLELLASEKORALIMITERF(
     &     CHF_FRA[dWMinus],
     &     CHF_FRA[dWPlus],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_FRA[diffW],
     &     CHF_CONST_FRA[d2W],
     &     CHF_CONST_FRA[dW2fcf],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox],
     &     CHF_CONST_REAL[limitC],
     &     CHF_CONST_REAL[eps])

!     This is the NEW limiter (from 17 Aug 2009)
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]
      integer iv
      real_t WC, dWM, dWP, WL, WR, dWL, dWR
      real_t atfcf, d2Wlim, rho
      real_t d2WL, d2WC, d2WR
      real_t sd2WL, sd2WC, sd2WR, sd2fcf
      real_t diffWL, diffWR, dWminA, dWminF
      logical extrem, bigM, bigP

      CHF_AUTOID[ioff; idir]

      do iv = 0,numslopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
!     dWP = W[i + e/2] - W[i]
!     dWM = W[i - e/2] - W[i]
            dWM = dWMinus(CHF_AUTOIX[i], iv)
            dWP = dWPlus (CHF_AUTOIX[i], iv)
            extrem = .false.
            if (dWM * dWP .ge. zero) then
!     face averages are both above or both below the cell average
               extrem = .true.
            else
               bigM = ( abs(dWM) .gt. two * abs(dWP) )
               bigP = ( abs(dWP) .gt. two * abs(dWM) )
!     if neither bigM nor bigP then we are satisfied W is monotone in cell
               if (bigM .or. bigP) then
                  WL  = W(CHF_OFFSETIX[i; -ioff], iv)
                  WC  = W(CHF_AUTOIX[i], iv)
                  WR  = W(CHF_OFFSETIX[i; +ioff], iv)
                  dWL = WC - WL
                  dWR = WR - WC
                  diffWL = diffW(CHF_OFFSETIX[i; -ioff], iv)
                  diffWR = diffW(CHF_OFFSETIX[i; +ioff], iv)
                  dWminA = min(abs(dWL), abs(dWR))
                  dWminF = min(abs(diffWL), abs(diffWR))
!     if dWminA >= dWminF, pick the difference between cell averages.
!     if dWMinF > dWminA, pick the difference across neighboring cells.
                  if ( ( (dWminA .ge. dWminF) .and.
     &                 (dWL * dWR .le. zero) ) .or.
     &                 ( (dWminF .gt. dWminA) .and.
     &                 (diffWL * diffWR .le. zero) ) ) then
                     extrem = .true.
                  else
                     if (bigM) then
                        dWMinus(CHF_AUTOIX[i], iv) = -two * dWP
                     endif
                     if (bigP) then
                        dWPlus (CHF_AUTOIX[i], iv) = -two * dWM
                     endif
                  endif
               endif
            endif
            if (extrem) then
!     W[i] is an extremum, either between faces or between cells
!     New condition added by petermc, 15 May 2010:
!     Apply limiter iff d2WC is NOT between d2WL and d2WR.
               d2WL  = d2W(CHF_OFFSETIX[i; -ioff], iv)
               d2WC  = d2W(CHF_AUTOIX[i], iv)
               d2WR  = d2W(CHF_OFFSETIX[i; +ioff], iv)
               if ((d2WC - d2WL) * (d2WR - d2WC) .lt. zero) then
                  atfcf = dW2fcf(CHF_AUTOIX[i], iv)
                  if (abs(atfcf) .lt. eps) then
                     rho = zero
                  else
                     sd2WL = sign(one, d2WL)
                     sd2WC = sign(one, d2WC)
                     sd2WR = sign(one, d2WR)
                     sd2fcf = sign(one, atfcf)
                     if ((sd2WC .eq. sd2WL) .and.
     &                    (sd2WC .eq. sd2WR) .and.
     &                    (sd2WC .eq. sd2fcf)) then
!     signs are all the same, sd2WC
                        d2Wlim = sd2WC *
     &                       min(abs(atfcf),
     &                       limitC * abs(d2WC),
     &                       limitC * abs(d2WL),
     &                       limitC * abs(d2WR))
                        rho = d2Wlim / atfcf
                     else
!     d2Wlim == 0
                        rho = zero
                     endif
                  endif
                  dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
                  dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
               endif
            endif
         CHF_ENDDO
         if (hasLo .eq. 1) then
            CHF_AUTOMULTIDO[loBox; i]
!     dWP = W[i + e/2] - W[i]
!     dWM = W[i - e/2] - W[i]
               dWM = dWMinus(CHF_AUTOIX[i], iv)
               dWP = dWPlus (CHF_AUTOIX[i], iv)
               extrem = .false.
               if (dWM * dWP .ge. zero) then
!     face averages are both above or both below the cell average
                  extrem = .true.
               else
                  bigM = ( abs(dWM) .gt. two * abs(dWP) )
                  bigP = ( abs(dWP) .gt. two * abs(dWM) )
!     if neither bigM nor bigP then we are satisfied W is monotone in cell
                  if (bigM) then
                     dWMinus(CHF_AUTOIX[i], iv) = -two * dWP
                  endif
                  if (bigP) then
                     dWPlus (CHF_AUTOIX[i], iv) = -two * dWM
                  endif
               endif
!     Changed by petermc, 15 May 2010:
!     If extrem then do nothing.
            CHF_ENDDO
         endif
         if (hasHi .eq. 1) then
            CHF_AUTOMULTIDO[hiBox; i]
               dWM = dWMinus(CHF_AUTOIX[i], iv)
               dWP = dWPlus (CHF_AUTOIX[i], iv)
               extrem = .false.
!     dWP = W[i + e/2] - W[i]
!     dWM = W[i - e/2] - W[i]
               if (dWM * dWP .ge. zero) then
!     face averages are both above or both below the cell average
                  extrem = .true.
               else
                  bigM = ( abs(dWM) .gt. two * abs(dWP) )
                  bigP = ( abs(dWP) .gt. two * abs(dWM) )
!     if neither bigM nor bigP then we are satisfied W is monotone in cell
                  if (bigM) then
                     dWMinus(CHF_AUTOIX[i], iv) = -two * dWP
                  endif
                  if (bigP) then
                     dWPlus (CHF_AUTOIX[i], iv) = -two * dWM
                  endif
               endif
!     Changed by petermc, 15 May 2010:
!     If extrem then do nothing.
            CHF_ENDDO
         endif
      enddo

      return
      end


      subroutine PPMFACEVALUESF(
     &     CHF_FRA[WFace],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_FRA[dW],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2cHi]
      integer iv
      real_t WLeft,WRight

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]

      do iv = 0,numSlopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
            WRight =  W(CHF_OFFSETIX[i; +f2cHi], iv)
     &        - dW(CHF_OFFSETIX[i; +f2cHi],iv) / three

            WLeft  =  W(CHF_OFFSETIX[i; +f2cLo], iv)
     &           + dW(CHF_OFFSETIX[i; +f2cLo], iv) / three

            WFace(CHF_AUTOIX[i], iv) = (WLeft + WRight) * half
         CHF_ENDDO
      enddo

      if (hasLo .eq. 1) then
         do iv = 0,numSlopes-1
            CHF_AUTOMULTIDO[loBox; i]
               WRight =  W(CHF_OFFSETIX[i; +f2cHi],iv)
     &           - dW(CHF_OFFSETIX[i; +f2cHi],iv) * half

               WFace(CHF_AUTOIX[i], iv) = WRight
            CHF_ENDDO
         enddo
      endif

      if (hasHi .eq. 1) then
         do iv = 0,numSlopes-1
            CHF_AUTOMULTIDO[hiBox; i]
               WLeft =  W(CHF_OFFSETIX[i; +f2cLo], iv)
     &           + dW(CHF_OFFSETIX[i; +f2cLo], iv) * half

               WFace(CHF_AUTOIX[i],iv) = WLeft
            CHF_ENDDO
         enddo
      endif

      return
      end


      subroutine PPMNORMALPREDF(
     &     CHF_FRA[dWMinus],
     &     CHF_FRA[dWPlus],
     &     CHF_CONST_FRA[lambda],
     &     CHF_CONST_REAL[dtbydx],
     &     CHF_CONST_INT[nSlope],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i]
      integer iv
      real_t sigMinus,sigPlus,sigmin,sigmax,lambdaK,dWl,dWh

      CHF_AUTOMULTIDO[box; i]

c     The characteristic analysis is assumed to put the eigenvalues
c     in order from smallest to largest

         sigmin = lambda(CHF_AUTOIX[i], 0)*dtbydx
         sigmin = min(sigmin,zero)
         sigmin = -sigmin

         sigmax = lambda(CHF_AUTOIX[i], nSlope-1)*dtbydx
         sigmax = max(sigmax,zero)

         do iv = 0,nSlope - 1
            lambdaK = lambda(CHF_AUTOIX[i], iv)

            if (lambdaK .gt. zero) then
               sigMinus = sigmin
               sigPlus  = lambdaK*dtbydx
            else
               sigMinus = -lambdaK*dtbydx
               sigPlus  = sigmax
            endif

            dWl = dWMinus(CHF_AUTOIX[i],iv)
            dWh = dWPlus (CHF_AUTOIX[i],iv)

            dWMinus(CHF_AUTOIX[i], iv) =
     &           dWl + sigMinus  * ((dWh - dWl)
     &           - (dWh + dWl) * (three - two*sigMinus)) * half

            dWPlus (CHF_AUTOIX[i], iv) =
     &           dWh + sigPlus * ((dWl - dWh)
     &           - (dWh + dWl) * (three - two*sigPlus )) * half
         enddo
      CHF_ENDDO

      return
      end


      subroutine GETSECONDDIFF(
!
!     Returns second-order approximation to second derivative.
!
     &     CHF_FRA[d2W],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]
      integer iv
      real_t WC, WL, WR, dWL, dWR

      CHF_AUTOID[ioff; idir]

      do iv = 0, numslopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
            WL  = W(CHF_OFFSETIX[i; -ioff], iv)
            WC  = W(CHF_AUTOIX[i], iv)
            WR  = W(CHF_OFFSETIX[i; +ioff], iv)
            dWL = WC - WL
            dWR = WR - WC
            d2W(CHF_AUTOIX[i], iv) = dWR - dWL
         CHF_ENDDO
         if (hasLo .eq. 1) then
!     Left-sided coefficients:
!     2, -5,  4, -1   which can be obtained from the sum of
!     1, -2,  1       multiplied by 2, and
!         1, -2,  1   multiplied by -1.
            CHF_AUTOMULTIDO[loBox; i]
               d2W(CHF_AUTOIX[i], iv) =
     &           two * d2W(CHF_OFFSETIX[i; +ioff], iv)
     &           - d2W(CHF_OFFSETIX[i; +2*ioff], iv)
!     This gives only FIRST-order approx to second derivative:
!     &           d2W(CHF_OFFSETIX[i; +ioff], iv)
            CHF_ENDDO
         endif
         if (hasHi .eq. 1) then
!     Right-sided coefficients:
!     -1,  4, -5, 2   which can be obtained from the sum of
!      1, -2,  1      multiplied by -1, and
!          1, -2, 1   multiplied by 2.
            CHF_AUTOMULTIDO[hiBox; i]
               d2W(CHF_AUTOIX[i], iv) =
     &           two * d2W(CHF_OFFSETIX[i; -ioff], iv)
     &           - d2W(CHF_OFFSETIX[i; -2*ioff], iv)
!     This gives only FIRST-order approx to second derivative:
!     &           d2W(CHF_OFFSETIX[i; -ioff], iv)
            CHF_ENDDO
         endif
      enddo

      return
      end


      subroutine GETD2CELL(
     &     CHF_FRA[d2W],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]
      integer lvar
      real_t WL, WR, WC

      CHF_AUTOID[ioff; idir]

      do lvar = 0, numslopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
            WL = W(CHF_OFFSETIX[i; -ioff], lvar)
            WC = W(CHF_AUTOIX[i], lvar)
            WR = W(CHF_OFFSETIX[i; +ioff], lvar)
            d2W(CHF_AUTOIX[i], lvar) = (WR - WC) - (WC - WL)
         CHF_ENDDO
         if (hasLo .eq. 1) then
            CHF_AUTOMULTIDO[loBox; i]
               d2W(CHF_AUTOIX[i], lvar) =
     &           d2W(CHF_OFFSETIX[i; +ioff], lvar)
            CHF_ENDDO
         endif
         if (hasHi .eq. 1) then
            CHF_AUTOMULTIDO[hiBox; i]
               d2W(CHF_AUTOIX[i], lvar) =
     &           d2W(CHF_OFFSETIX[i; -ioff], lvar)
            CHF_ENDDO
         endif
      enddo

      return
      end


      subroutine GETD2LIMFACE(
     &     CHF_FRA[d2Wlim],
     &     CHF_CONST_FRA[d2Wc],
     &     CHF_CONST_FRA[d2Wcfc],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[centerBox],
     &     CHF_CONST_REAL[limitC])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2cHi]
      integer lvar
      real_t d2WL, d2WR, atcfc
      real_t sd2WL, sd2WR, sd2cfc

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]

      do lvar = 0, numslopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
            d2WL  = d2Wc(CHF_OFFSETIX[i; +f2cLo], lvar)
            d2WR  = d2Wc(CHF_OFFSETIX[i; +f2cHi], lvar)
            atcfc = d2Wcfc(CHF_AUTOIX[i], lvar)

            sd2WL = sign(one, d2WL)
            sd2WR = sign(one, d2WR)
            sd2cfc = sign(one, atcfc)

            if ((sd2WL .eq. sd2cfc) .and. (sd2WR .eq. sd2cfc)) then
!     signs are all the same, sd2cfc
               d2Wlim(CHF_AUTOIX[i], lvar) = sd2cfc *
     &              min(limitC * min(abs(d2WL), abs(d2WR)),
     &              abs(atcfc))
            else
               d2Wlim(CHF_AUTOIX[i], lvar) = zero
            endif
         CHF_ENDDO
      enddo

      return
      end


      subroutine COLELLASEKORAFACELIMITER(
     &     CHF_FRA[Wface],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_FRA[d2Wc],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[centerBox],
     &     CHF_CONST_REAL[limitC])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2cHi]
      integer lvar
      real_t Wf, WL, WR, d2Wlim, dp
      real_t dWL, dWR, d2WL, d2WR, d2Wcfc
      real_t sd2WL, sd2WR, sd2cfc

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]

      do lvar = 0, numslopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
            Wf = Wface(CHF_AUTOIX[i], lvar)
            WL = W(CHF_OFFSETIX[i; +f2cLo], lvar)
            WR = W(CHF_OFFSETIX[i; +f2cHi], lvar)
            dWR = WR - Wf
            dWL = Wf - WL
            dp = dWR * dWL
!     dp >= 0 means Wf is between WL and WR.
            if (dp .lt. zero) then
!     Find d2Wlim.
               d2WL  = d2Wc(CHF_OFFSETIX[i; +f2cLo], lvar)
               d2WR  = d2Wc(CHF_OFFSETIX[i; +f2cHi], lvar)
               d2Wcfc = three * (dWR - dWL)
!     New condition added by petermc, 15 May 2010:
!     Apply limiter iff d2Wcfc is NOT between d2WL and d2WR.
               if ((d2Wcfc - d2WL) * (d2WR - d2Wcfc) .lt. zero) then
                  sd2WL = sign(one, d2WL)
                  sd2WR = sign(one, d2WR)
                  sd2cfc = sign(one, d2Wcfc)
                  if ((sd2WL .eq. sd2cfc) .and.
     &                 (sd2WR .eq. sd2cfc)) then
!     signs are all the same, sd2cfc
                     d2Wlim = sd2cfc *
     &                    min(limitC * min(abs(d2WL), abs(d2WR)),
     &                    abs(d2Wcfc))
                  else
                     d2Wlim = zero
                  endif
!     petermc, 1 May 2009, changed from /three to /six :
!     ERROR in equation (19) in Colella & Sekora,
!     "A Limiter for PPM that Preserves Accuracy at Smooth Extrema"
!     should be 6, not 3.
                  Wface(CHF_AUTOIX[i], lvar) =
     &                 (WL + WR) * half - d2Wlim / six
               endif
            endif
         CHF_ENDDO
      enddo

      return
      end


      subroutine FOURTHINTERPFACES(
     &     CHF_FRA[Wface],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_BOX[nextLoBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_BOX[nextHiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2c1Lo]
      integer CHF_AUTODECL[f2c2Lo]
      integer CHF_AUTODECL[f2c3Lo]
      integer CHF_AUTODECL[f2cHi]
      integer CHF_AUTODECL[f2c1Hi]
      integer CHF_AUTODECL[f2c2Hi]
      integer CHF_AUTODECL[f2c3Hi]
      integer lvar
      real_t WL, WR, WLL, WRR, WLLL, WRRR, WLLLL, WRRRR

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
      CHF_AUTOID[f2c1Lo; idir; -2]
      CHF_AUTOID[f2c2Lo; idir; -3]
      CHF_AUTOID[f2c3Lo; idir; -4]

!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]
      CHF_AUTOID[f2c1Hi; idir; 1]
      CHF_AUTOID[f2c2Hi; idir; 2]
      CHF_AUTOID[f2c3Hi; idir; 3]

      do lvar = 0, numslopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
            WLL = W(CHF_OFFSETIX[i; +f2c1Lo], lvar)
            WL  = W(CHF_OFFSETIX[i; +f2cLo],  lvar)
            WR  = W(CHF_OFFSETIX[i; +f2cHi],  lvar)
            WRR = W(CHF_OFFSETIX[i; +f2c1Hi], lvar)
            Wface(CHF_AUTOIX[i], lvar) =
     &           (seven * (WL + WR) - (WLL + WRR)) / twelve
         CHF_ENDDO
         if (hasLo .eq. 1) then
            CHF_AUTOMULTIDO[loBox; i]
               WR    = W(CHF_OFFSETIX[i; +f2cHi], lvar)
               WRR   = W(CHF_OFFSETIX[i; +f2c1Hi], lvar)
               WRRR  = W(CHF_OFFSETIX[i; +f2c2Hi], lvar)
               WRRRR = W(CHF_OFFSETIX[i; +f2c3Hi], lvar)
               Wface(CHF_AUTOIX[i], lvar) =
     &              (((twenty + five)*WR - (twenty + three)*WRR)
     &              + ((ten + three)*WRRR - three*WRRRR)) / twelve
            CHF_ENDDO
            CHF_AUTOMULTIDO[nextLoBox; i]
               WL   = W(CHF_OFFSETIX[i; +f2cLo],  lvar)
               WR   = W(CHF_OFFSETIX[i; +f2cHi],  lvar)
               WRR  = W(CHF_OFFSETIX[i; +f2c1Hi], lvar)
               WRRR = W(CHF_OFFSETIX[i; +f2c2Hi], lvar)
               Wface(CHF_AUTOIX[i], lvar) =
     &              (three*WL + (ten + three)*WR - five*WRR + WRRR) /
     &              twelve
            CHF_ENDDO
         endif
         if (hasHi .eq. 1) then
            CHF_AUTOMULTIDO[hiBox; i]
               WL    = W(CHF_OFFSETIX[i; +f2cLo],  lvar)
               WLL   = W(CHF_OFFSETIX[i; +f2c1Lo], lvar)
               WLLL  = W(CHF_OFFSETIX[i; +f2c2Lo], lvar)
               WLLLL = W(CHF_OFFSETIX[i; +f2c3Lo], lvar)
               Wface(CHF_AUTOIX[i], lvar) =
     &              (((twenty + five)*WL - (twenty + three)*WLL)
     &              + ((ten + three)*WLLL - three*WLLLL)) / twelve
            CHF_ENDDO
            CHF_AUTOMULTIDO[nextHiBox; i]
               WR   = W(CHF_OFFSETIX[i; +f2cHi],  lvar)
               WL   = W(CHF_OFFSETIX[i; +f2cLo],  lvar)
               WLL  = W(CHF_OFFSETIX[i; +f2c1Lo], lvar)
               WLLL = W(CHF_OFFSETIX[i; +f2c2Lo], lvar)
               Wface(CHF_AUTOIX[i], lvar) =
     &              (three*WR + (ten + three)*WL - five*WLL + WLLL) /
     &                twelve
            CHF_ENDDO
         endif
      enddo

      return
      end


      subroutine SECONDINTERPFACES(
     &     CHF_FRA[Wface],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2c1Lo]
      integer CHF_AUTODECL[f2c2Lo]
      integer CHF_AUTODECL[f2c3Lo]
      integer CHF_AUTODECL[f2cHi]
      integer CHF_AUTODECL[f2c1Hi]
      integer CHF_AUTODECL[f2c2Hi]
      integer CHF_AUTODECL[f2c3Hi]
      integer lvar
      real_t WL, WR, WLL, WRR, WLLL, WRRR, WLLLL, WRRRR

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
      CHF_AUTOID[f2c1Lo; idir; -2]

!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]
      CHF_AUTOID[f2c1Hi; idir; 1]

      do lvar = 0, numslopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
            WLL = W(CHF_OFFSETIX[i; +f2c1Lo], lvar)
            WL  = W(CHF_OFFSETIX[i; +f2cLo],  lvar)
            WR  = W(CHF_OFFSETIX[i; +f2cHi],  lvar)
            WRR = W(CHF_OFFSETIX[i; +f2c1Hi], lvar)
            Wface(CHF_AUTOIX[i], lvar) = (WL + WR) / two
         CHF_ENDDO
         if (hasLo .eq. 1) then
            CHF_AUTOMULTIDO[loBox; i]
               WR  = W(CHF_OFFSETIX[i; +f2cHi], lvar)
               WRR = W(CHF_OFFSETIX[i; +f2c1Hi], lvar)
               Wface(CHF_AUTOIX[i], lvar) = (three*WR - WRR) / two
            CHF_ENDDO
         endif
         if (hasHi .eq. 1) then
            CHF_AUTOMULTIDO[hiBox; i]
               WL  = W(CHF_OFFSETIX[i; +f2cLo],  lvar)
               WLL = W(CHF_OFFSETIX[i; +f2c1Lo], lvar)
               Wface(CHF_AUTOIX[i], lvar) = (three*WL - WLL) / two
            CHF_ENDDO
         endif
      enddo

      return
      end


      subroutine PPMFOURTHFACE(
     &     CHF_FRA[Wface],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_FRA[d2W],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2c1Lo]
      integer CHF_AUTODECL[f2c2Lo]
      integer CHF_AUTODECL[f2c3Lo]
      integer CHF_AUTODECL[f2cHi]
      integer CHF_AUTODECL[f2c1Hi]
      integer CHF_AUTODECL[f2c2Hi]
      integer CHF_AUTODECL[f2c3Hi]
      integer iv
      real_t WL, WLL, WLLL, WLLLL
      real_t WR, WRR, WRRR, WRRRR
      real_t d2WL, d2WR
      real_t c0, c1, c2, c3

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
      CHF_AUTOID[f2c1Lo; idir; -2]
      CHF_AUTOID[f2c2Lo; idir; -3]
      CHF_AUTOID[f2c3Lo; idir; -4]

!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]
      CHF_AUTOID[f2c1Hi; idir; 1]
      CHF_AUTOID[f2c2Hi; idir; 2]
      CHF_AUTOID[f2c3Hi; idir; 3]

      c0 = twenty + seven
      c1 = -(twenty + eight)
      c2 = ten + seven
      c3 = -four

      do iv = 0, numslopes - 1
         CHF_AUTOMULTIDO[centerBox; i]
            WL =     W(CHF_OFFSETIX[i; +f2cLo], iv)
            WR =     W(CHF_OFFSETIX[i; +f2cHi], iv)
            d2WL = d2W(CHF_OFFSETIX[i; +f2cLo], iv)
            d2WR = d2W(CHF_OFFSETIX[i; +f2cHi], iv)
            Wface(CHF_AUTOIX[i], iv) = (WL + WR) * half
     &           - (d2WL + d2WR) / twelve
         CHF_ENDDO
         if (hasLo .eq. 1) then
            CHF_AUTOMULTIDO[loBox; i]
               d2WR = d2W(CHF_OFFSETIX[i; +f2cHi], iv)
               WR   =   W(CHF_OFFSETIX[i; +f2cHi], iv)
               WRR  =   W(CHF_OFFSETIX[i; +f2c1Hi], iv)
               WRRR =   W(CHF_OFFSETIX[i; +f2c2Hi], iv)
               WRRRR =  W(CHF_OFFSETIX[i; +f2c3Hi], iv)
               Wface(CHF_AUTOIX[i], iv) =
     &              (c0*WR + c1*WRR + c2*WRRR + c3*WRRRR - d2WR) /
     &              twelve
            CHF_ENDDO
         endif
         if (hasHi .eq. 1) then
            CHF_AUTOMULTIDO[hiBox; i]
               d2WL = d2W(CHF_OFFSETIX[i; +f2cLo], iv)
               WL   =   W(CHF_OFFSETIX[i; +f2cLo], iv)
               WLL  =   W(CHF_OFFSETIX[i; +f2c1Lo], iv)
               WLLL =   W(CHF_OFFSETIX[i; +f2c2Lo], iv)
               WLLLL =  W(CHF_OFFSETIX[i; +f2c3Lo], iv)
               Wface(CHF_AUTOIX[i], iv) =
     &              (c0*WL + c1*WLL + c2*WLLL + c3*WLLLL - d2WL) /
     &              twelve
            CHF_ENDDO
         endif
      enddo

      return
      end


      subroutine HODIVCOEF(
!     Return high-order divergence coefficients.
!
!     => input, <= outputs
!     divVel <=> dir-face-centered divergence
!     csq     => cell-centered (bulk modulus)/(density)
!     dir     => direction of faces on which divVel lives
!     M0sq    => artificial-viscosity parameter
!     loBox   => cell-centered low box, if hasLo == 1
!     hasLo   => whether loBox exists
!     hiBox   => cell-centered high box, if hasHi == 1
!     hasHi   => whether hiBox exists
!     centerBox => cell-centered central box
!
!     Modified by petermc, 20 June 2011, to work in DIM>3.
!     When this subroutine is called, the centerings of some of the arrays
!     and boxes get changed.  The modification to work in DIM>3 does not
!     change the functionality.
     &     CHF_FRA1[divVel],
     &     CHF_CONST_FRA1[csq],
     &     CHF_CONST_INT[dir],
     &     CHF_CONST_REAL[M0sq],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2cHi]
      integer CHF_AUTODECL[c2fLo]
      integer CHF_AUTODECL[c2fHi]
      real_t csqmin, dvold

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; dir; -1]
!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; dir; 0]

!     +c2fLo from cell to adjacent face on low side (index is same)
      CHF_AUTOID[c2fLo; dir; 0]
!     +c2fHi from cell to adjacent face on high side (index is 1 higher)
      CHF_AUTOID[c2fHi; dir; 1]

c     Compute nonlinear function of divVel on the interior faces.

      CHF_AUTOMULTIDO[centerBox; i]
         csqmin = min(csq(CHF_OFFSETIX[i; +f2cLo]),
     &                csq(CHF_OFFSETIX[i; +f2cHi]) )
         dvold = divVel(CHF_AUTOIX[i])
         divVel(CHF_AUTOIX[i]) = dvold *
     &        min(dvold**2/csqmin/M0sq, one)
      CHF_ENDDO

c     Perform calculation on the cells adjacent to the domain boundary in
c     current direction.

      if (hasLo .ne. 0) then
         CHF_AUTOMULTIDO[loBox; i]
            csqmin = csq(CHF_AUTOIX[i])
            dvold = divVel(CHF_OFFSETIX[i; +c2fLo])
            divVel(CHF_OFFSETIX[i; +c2fLo]) = dvold *
     &           min(dvold**2/csqmin/M0sq, one)
         CHF_ENDDO
      endif

      if (hasHi .ne. 0) then
         CHF_AUTOMULTIDO[hiBox; i]
            csqmin = csq(CHF_AUTOIX[i])
            dvold = divVel(CHF_OFFSETIX[i; +c2fHi])
            divVel(CHF_OFFSETIX[i; +c2fHi]) = dvold *
     &           min(dvold**2/csqmin/M0sq, one)
         CHF_ENDDO
      endif

      return
      end


      subroutine HIGHORDERDIVCO(
     &     CHF_FRA1[divVel],
     &     CHF_CONST_FRA1[csq],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_REAL[M0sq],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[centerBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[f2cLo]
      integer CHF_AUTODECL[f2cHi]
      real_t csqmin, dvold, fac

!     +f2cLo from face to adjacent cell on low side (index is 1 lower)
      CHF_AUTOID[f2cLo; idir; -1]
!     +f2cHi from face to adjacent cell on high side (index is same)
      CHF_AUTOID[f2cHi; idir; 0]

c     Compute nonlinear function of divVel on the interior faces.
      CHF_AUTOMULTIDO[centerBox; i]
         csqmin = min(csq(CHF_OFFSETIX[i; +f2cLo]),
     &                csq(CHF_OFFSETIX[i; +f2cHi]))
         dvold = divVel(CHF_AUTOIX[i])
         fac = dvold**2/csqmin/M0sq
         if (fac .lt. one) then
            divVel(CHF_AUTOIX[i]) = dvold * fac
         endif
      CHF_ENDDO

c     Perform calculation on the cells adjacent to the domain boundary in
c     current direction.
      if (hasLo .ne. 0) then
         CHF_AUTOMULTIDO[loBox; i]
            csqmin = csq(CHF_OFFSETIX[i; +f2cHi])
            dvold = divVel(CHF_AUTOIX[i])
            fac = dvold**2/csqmin/M0sq
            if (fac .lt. one) then
               divVel(CHF_AUTOIX[i]) = dvold * fac
            endif
         CHF_ENDDO
      endif
      if (hasHi .ne. 0) then
         CHF_AUTOMULTIDO[hiBox; i]
            csqmin = csq(CHF_OFFSETIX[i; +f2cLo])
            dvold = divVel(CHF_AUTOIX[i])
            fac = dvold**2/csqmin/M0sq
            if (fac .lt. one) then
               divVel(CHF_AUTOIX[i]) = dvold * fac
            endif
         CHF_ENDDO
      endif

      return
      end


      subroutine CHECKCUBICLIMITERF(
     &     CHF_FRA[dWMinus],
     &     CHF_FRA[dWPlus],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_FRA[d2W],
     &     CHF_CONST_FRA[dW2fcf],
     &     CHF_CONST_INT[numSlopes],
     &     CHF_CONST_INT[idir],
     &     CHF_BOX[loBox],
     &     CHF_BOX[nextLoBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_BOX[nextHiBox],
     &     CHF_CONST_INT[hasHi],
     &     CHF_BOX[innerCenterBox],
     &     CHF_CONST_REAL[limitC],
     &     CHF_CONST_REAL[C3],
     &     CHF_CONST_REAL[eps])
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer iv
      real_t WC, dWM, dWP, WLL, WRR, dWL, dWR
      real_t atfcf, d2Wlim, rho
      real_t d2WLL, d2WL, d2WC, d2WR, d2WRR
      real_t d3WLL, d3WL, d3WR, d3WRR, d3Wmax, d3Wmin
      real_t sd2WL, sd2WC, sd2WR, sd2fcf
      real_t dWavgM, dWavgP
      real_t prodE1, prodE2, prodD3
      logical bigM, bigP

      CHF_AUTOID[ii; idir]

!     Instead of doing loHiCenter, it might be easier to extrapolate
!     to 4th order and then call this.

      do iv = 0,numslopes - 1
         CHF_AUTOMULTIDO[innerCenterBox; i]
!     dWM = W[i - e/2] - W[i] == wfaceLo - wavg == -dwfm
!     dWP = W[i + e/2] - W[i] == wfaceHi - wavg == dwfp
            dWM = dWMinus(CHF_AUTOIX[i], iv)
            dWP = dWPlus (CHF_AUTOIX[i], iv)
            bigM = ( abs(dWM) .gt. two * abs(dWP) )
            bigP = ( abs(dWP) .gt. two * abs(dWM) )
            WLL = W(CHF_OFFSETIX[i; -2*ii], iv)
            WC  = W(CHF_AUTOIX[i], iv)
            WRR = W(CHF_OFFSETIX[i; +2*ii], iv)
            dWavgM = WC - WLL
            dWavgP = WRR - WC
            prodE1 = dWM * dWP
            prodE2 = dWavgM * dWavgP
!     prodExtr1 == dwfm * dwfp == -dWM * dWP == -prodE1
!     prodExtr2 == dWavgM * dWavgP
!     condExtr == (prodExtr1 <= 0) | (prodExtr2 <= 0)
!              == (-prodE1 <= 0) | (prodE2 <= 0)
!     Extremum check.
            if ( (prodE1 .ge. zero) .or. (prodE2 .le. zero)) then
!     This is an extremum.  Check if it is a potential discontinuity,
!     by checking relative sizes and signs of second derivatives.
!     d2WL == d2wm
!     d2WC == d2wm
!     d2WR == d2wp
               d2WL  = d2W(CHF_OFFSETIX[i; -ii], iv)
               d2WC  = d2W(CHF_AUTOIX[i], iv)
               d2WR  = d2W(CHF_OFFSETIX[i; +ii], iv)
               atfcf = dW2fcf(CHF_AUTOIX[i], iv)
!     Set d2Wlim = stuff, if signs are all same; zero, otherwise.
!     Set rho = d2Wlim/d2Wfcf, if |d2Wfcf| >= eps; zero, otherwise.
!     So rho is set to zero unless signs are all same AND |d2Wfcf| >= eps.
               rho = zero
               if (abs(atfcf) .ge. eps) then
                  sd2WL = sign(one, d2WL)
                  sd2WC = sign(one, d2WC)
                  sd2WR = sign(one, d2WR)
                  sd2fcf = sign(one, atfcf)
                  if ( (sd2WL .eq. sd2WC) .and.
     &                 (sd2WR .eq. sd2WC) .and.
     &                 (sd2fcf .eq. sd2WC) ) then
!     Signs are all the same, sd2WC
                     d2Wlim = sd2WC *
     &                    min(abs(atfcf),
     &                    limitC * abs(d2WC),
     &                    limitC * abs(d2WL),
     &                    limitC * abs(d2WR))
                     rho = d2Wlim / atfcf
!     Otherwise, d2Wlim = zero, and rho = zero.
                  endif
               endif
               if (rho .lt. (one - eps)) then
!     Potential discontinuity:
!     Check if well-separated from a small perturbation of a cubic.
                  d2WLL = d2W(CHF_OFFSETIX[i; -2*ii], iv)
                  d2WRR = d2W(CHF_OFFSETIX[i; +2*ii], iv)
!     Third derivatives at faces.
                  d3WLL = d2WL  - d2WLL
                  d3WL  = d2WC  - d2WL
                  d3WR  = d2WR  - d2WC
                  d3WRR = d2WRR - d2WR
                  d3Wmin = min(d3WLL, d3WL, d3WR, d3WRR)
                  d3Wmax = max(d3WLL, d3WL, d3WR, d3WRR)
                  prodD3 = C3 * max(abs(d3Wmax), abs(d3Wmin))
     &                 - abs(d3Wmax - d3Wmin)
!     Is the extremum is located close to where d2W is nearly linear?
                  if (prodD3 .le. zero) then
!     The answer is no.
!     We are well-separated from a cubic, so we can apply the limiter.
!     dwfm * dwfp == -dWM * dWP
                     if (prodE1 .gt. zero) then
!     extrapLo == wfaceLo == wavg - dwfm == wavg + dWM
!     New extrapLo == wavg - dwfm * rho == wavg + dWM * rho
!     Hence new dWM == extrapLo - wavg == dWM * rho

!     extrapHi == wfaceHi == wavg + dwfp == wavg + dWP
!     New extrapHi == wavg + dwfp * rho == wavg + dWP * rho
!     Hence new dWP == extrapHi - wavg == dWP * rho
                        dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
                        dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
                     elseif ( bigM ) then
!     extrapLo == wfaceLo == wavg - dwfm == wavg + dWM
!     New extrapLo == wavg - (2*dwfp*(1 - rho) + dwfm*rho)
!                  == wavg - (2*dWP*(1 - rho) - dWM*rho)
!     Hence new dWM == extrapLo - wavg == dWM * rho - 2*dWP*(1 - rho)
                        dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
     &                       - two * dWP * (one - rho)
                     elseif ( bigP ) then
!     extrapHi == wfaceHi == wavg + dwfp == wavg + dWP
!     New extrapHi == wavg + (2*dwfm*(1 - rho) + dwfp*rho)
!                  == wavg + (-2*dWM*(1 - rho) + dWP*rho)
!     Hence new dWP == extrapHi - wavg = dWP * rho - 2*dWM*(1 - rho)
                        dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
     &                       - two * dWM * (one - rho)
                     endif
                  endif
               endif
            else
!     Not an extremum, so apply PPM limiter.
               if ( bigM ) then
                  dWMinus(CHF_AUTOIX[i], iv) = -two * dWP
               endif
               if ( bigP ) then
                  dWPlus (CHF_AUTOIX[i], iv) = -two * dWM
               endif
            endif
         CHF_ENDDO
!     ==== loBox
         if (hasLo .eq. 1) then
            CHF_AUTOMULTIDO[loBox; i]
               dWM = dWMinus(CHF_AUTOIX[i], iv)
               dWP = dWPlus (CHF_AUTOIX[i], iv)
               bigM = ( abs(dWM) .gt. two * abs(dWP) )
               bigP = ( abs(dWP) .gt. two * abs(dWM) )
               prodE1 = dWM * dWP
               if (prodE1 .ge. zero) then
                  d2WC  = d2W(CHF_AUTOIX[i], iv)
                  d2WR  = d2W(CHF_OFFSETIX[i; +ii], iv)
                  atfcf = dW2fcf(CHF_AUTOIX[i], iv)
                  rho = zero
                  if (abs(atfcf) .ge. eps) then
                     sd2WC = sign(one, d2WC)
                     sd2WR = sign(one, d2WR)
                     sd2fcf = sign(one, atfcf)
                     if ( (sd2WR .eq. sd2WC) .and.
     &                    (sd2fcf .eq. sd2WC) ) then
                        d2Wlim = sd2WC *
     &                       min(abs(atfcf),
     &                       limitC * abs(d2WC),
     &                       limitC * abs(d2WR))
                        rho = d2Wlim / atfcf
                     endif
                  endif
                  if (rho .lt. (one - eps)) then
                     d2WRR = d2W(CHF_OFFSETIX[i; +2*ii], iv)
                     d3WR  = d2WR  - d2WC
                     d3WRR = d2WRR - d2WR
                     d3Wmin = min(d3WR, d3WRR)
                     d3Wmax = max(d3WR, d3WRR)
                     prodD3 = C3 * max(abs(d3Wmax), abs(d3Wmin))
     &                    - abs(d3Wmax - d3Wmin)
                     if (prodD3 .le. zero) then
                        if (prodE1 .gt. zero) then
                           dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
                           dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
                        elseif ( bigM ) then
                           dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
     &                          - two * dWP * (one - rho)
                        elseif ( bigP ) then
                           dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
     &                          - two * dWM * (one - rho)
                        endif
                     endif
                  endif
               else
                  if ( bigM ) then
                     dWMinus(CHF_AUTOIX[i], iv) = -two * dWP
                  endif
                  if ( bigP ) then
                     dWPlus (CHF_AUTOIX[i], iv) = -two * dWM
                  endif
               endif
            CHF_ENDDO
!     ==== nextLoBox
            CHF_AUTOMULTIDO[nextLoBox; i]
               dWM = dWMinus(CHF_AUTOIX[i], iv)
               dWP = dWPlus (CHF_AUTOIX[i], iv)
               bigM = ( abs(dWM) .gt. two * abs(dWP) )
               bigP = ( abs(dWP) .gt. two * abs(dWM) )
               prodE1 = dWM * dWP
               if (prodE1 .ge. zero) then
                  d2WL  = d2W(CHF_OFFSETIX[i; -ii], iv)
                  d2WC  = d2W(CHF_AUTOIX[i], iv)
                  d2WR  = d2W(CHF_OFFSETIX[i; +ii], iv)
                  atfcf = dW2fcf(CHF_AUTOIX[i], iv)
                  rho = zero
                  if (abs(atfcf) .ge. eps) then
                     sd2WL = sign(one, d2WL)
                     sd2WC = sign(one, d2WC)
                     sd2WR = sign(one, d2WR)
                     sd2fcf = sign(one, atfcf)
                     if ( (sd2WL .eq. sd2WC) .and.
     &                    (sd2WR .eq. sd2WC) .and.
     &                    (sd2fcf .eq. sd2WC) ) then
                        d2Wlim = sd2WC *
     &                       min(abs(atfcf),
     &                       limitC * abs(d2WC),
     &                       limitC * abs(d2WL),
     &                       limitC * abs(d2WR))
                        rho = d2Wlim / atfcf
                     endif
                  endif
                  if (rho .lt. (one - eps)) then
                     d2WRR = d2W(CHF_OFFSETIX[i; +2*ii], iv)
                     d3WL  = d2WC  - d2WL
                     d3WR  = d2WR  - d2WC
                     d3WRR = d2WRR - d2WR
                     d3Wmin = min(d3WL, d3WR, d3WRR)
                     d3Wmax = max(d3WL, d3WR, d3WRR)
                     prodD3 = C3 * max(abs(d3Wmax), abs(d3Wmin))
     &                    - abs(d3Wmax - d3Wmin)
                     if (prodD3 .le. zero) then
                        if (prodE1 .gt. zero) then
                           dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
                           dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
                        elseif ( bigM ) then
                           dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
     &                          - two * dWP * (one - rho)
                        elseif ( bigP ) then
                           dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
     &                          - two * dWM * (one - rho)
                        endif
                     endif
                  endif
               else
                  if ( bigM ) then
                     dWMinus(CHF_AUTOIX[i], iv) = -two * dWP
                  endif
                  if ( bigP ) then
                     dWPlus (CHF_AUTOIX[i], iv) = -two * dWM
                  endif
               endif
            CHF_ENDDO
         endif
         if (hasHi .eq. 1) then
!     ==== hiBox
            CHF_AUTOMULTIDO[hiBox; i]
               dWM = dWMinus(CHF_AUTOIX[i], iv)
               dWP = dWPlus (CHF_AUTOIX[i], iv)
               bigM = ( abs(dWM) .gt. two * abs(dWP) )
               bigP = ( abs(dWP) .gt. two * abs(dWM) )
               prodE1 = dWM * dWP
               if (prodE1 .ge. zero) then
                  d2WL  = d2W(CHF_OFFSETIX[i; -ii], iv)
                  d2WC  = d2W(CHF_AUTOIX[i], iv)
                  atfcf = dW2fcf(CHF_AUTOIX[i], iv)
                  rho = zero
                  if (abs(atfcf) .ge. eps) then
                     sd2WL = sign(one, d2WL)
                     sd2WC = sign(one, d2WC)
                     sd2fcf = sign(one, atfcf)
                     if ( (sd2WL .eq. sd2WC) .and.
     &                    (sd2fcf .eq. sd2WC) ) then
                        d2Wlim = sd2WC *
     &                       min(abs(atfcf),
     &                       limitC * abs(d2WC),
     &                       limitC * abs(d2WL))
                        rho = d2Wlim / atfcf
                     endif
                  endif
                  if (rho .lt. (one - eps)) then
                     d2WLL = d2W(CHF_OFFSETIX[i; -2*ii], iv)
                     d3WLL = d2WL  - d2WLL
                     d3WL  = d2WC  - d2WL
                     d3Wmin = min(d3WLL, d3WL)
                     d3Wmax = max(d3WLL, d3WL)
                     prodD3 = C3 * max(abs(d3Wmax), abs(d3Wmin))
     &                    - abs(d3Wmax - d3Wmin)
                     if (prodD3 .le. zero) then
                        if (prodE1 .gt. zero) then
                           dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
                           dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
                        elseif ( bigM ) then
                           dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
     &                          - two * dWP * (one - rho)
                        elseif ( bigP ) then
                           dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
     &                          - two * dWM * (one - rho)
                        endif
                     endif
                  endif
               else
                  if ( bigM ) then
                     dWMinus(CHF_AUTOIX[i], iv) = -two * dWP
                  endif
                  if ( bigP ) then
                     dWPlus (CHF_AUTOIX[i], iv) = -two * dWM
                  endif
               endif

            CHF_ENDDO
!     ==== nextHiBox
            CHF_AUTOMULTIDO[nextHiBox; i]
               dWM = dWMinus(CHF_AUTOIX[i], iv)
               dWP = dWPlus (CHF_AUTOIX[i], iv)
               bigM = ( abs(dWM) .gt. two * abs(dWP) )
               bigP = ( abs(dWP) .gt. two * abs(dWM) )
               prodE1 = dWM * dWP
               if (prodE1 .ge. zero) then
                  d2WL  = d2W(CHF_OFFSETIX[i; -ii], iv)
                  d2WC  = d2W(CHF_AUTOIX[i], iv)
                  d2WR  = d2W(CHF_OFFSETIX[i; +ii], iv)
                  atfcf = dW2fcf(CHF_AUTOIX[i], iv)
                  rho = zero
                  if (abs(atfcf) .ge. eps) then
                     sd2WL = sign(one, d2WL)
                     sd2WC = sign(one, d2WC)
                     sd2WR = sign(one, d2WR)
                     sd2fcf = sign(one, atfcf)
                     if ( (sd2WL .eq. sd2WC) .and.
     &                    (sd2WR .eq. sd2WC) .and.
     &                    (sd2fcf .eq. sd2WC) ) then
                        d2Wlim = sd2WC *
     &                       min(abs(atfcf),
     &                       limitC * abs(d2WC),
     &                       limitC * abs(d2WL),
     &                       limitC * abs(d2WR))
                        rho = d2Wlim / atfcf
                     endif
                  endif
                  if (rho .lt. (one - eps)) then
                     d2WLL = d2W(CHF_OFFSETIX[i; -2*ii], iv)
                     d3WLL = d2WL  - d2WLL
                     d3WL  = d2WC  - d2WL
                     d3WR  = d2WR  - d2WC
                     d3Wmin = min(d3WLL, d3WL, d3WR)
                     d3Wmax = max(d3WLL, d3WL, d3WR)
                     prodD3 = C3 * max(abs(d3Wmax), abs(d3Wmin))
     &                    - abs(d3Wmax - d3Wmin)
                     if (prodD3 .le. zero) then
                        if (prodE1 .gt. zero) then
                           dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
                           dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
                        elseif ( bigM ) then
                           dWMinus(CHF_AUTOIX[i], iv) = dWM * rho
     &                          - two * dWP * (one - rho)
                        elseif ( bigP ) then
                           dWPlus (CHF_AUTOIX[i], iv) = dWP * rho
     &                          - two * dWM * (one - rho)
                        endif
                     endif
                  endif
               else
                  if ( bigM ) then
                     dWMinus(CHF_AUTOIX[i], iv) = -two * dWP
                  endif
                  if ( bigP ) then
                     dWPlus (CHF_AUTOIX[i], iv) = -two * dWM
                  endif
               endif
            CHF_ENDDO
         endif
      enddo

      return
      end
