C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

c--The functions in this file are skipped at DIM=6 because they produce rank 8
c--arrays which are not yet well supported in Fortran or CHArray.  Placing
c--them in a separate file produces a separate header which can be ignored
c--in the cpp file when DIM=6 and therefore not expand macros which don't exist.

c     Rank SpaceDim+2 test for contiguous components
#if CH_SPACEDIM<6
      subroutine rankCHArraySpaceDimPlus2Cont(
     &   CHF_RCHARRAY[RANK_SPACEDIM_PLUS_2, arr],
     &   CHF_CONST_RCHARRAY[RANK_SPACEDIM_PLUS_2, arrc],
     &   CHF_BOX[box])

      integer CHF_AUTODECL[i]
      integer c0, c1
      real_t inc;

      inc = half
      CHF_AUTOMULTIDO[box; i]
         do c1 = CHF_LBOUND[arrc;1], CHF_UBOUND[arrc;1]
            do c0 = CHF_LBOUND[arrc;0], CHF_UBOUND[arrc;0]
               arr(c0, c1, CHF_AUTOIX[i]) =
     &            arrc(c0, c1, CHF_AUTOIX[i]) + inc
               inc = inc + half
            enddo
         enddo
      CHF_ENDDO

      return
      end
#endif

c     Rank SpaceDim+2 test for distributed components
#if CH_SPACEDIM<6
      subroutine rankCHArraySpaceDimPlus2Dist(
     &   CHF_RCHARRAY[RANK_SPACEDIM_PLUS_2, arr],
     &   CHF_CONST_RCHARRAY[RANK_SPACEDIM_PLUS_2, arrc],
     &   CHF_BOX[box],
     &   CHF_CONST_INT[dimc0],
     &   CHF_CONST_INT[dimc1])

      integer CHF_AUTODECL[i]
      integer c0, c1
      real_t inc;

      inc = half
      do c1 = 0, dimc1-1
         do c0 = 0, dimc0-1
            CHF_AUTOMULTIDO[box; i]
               arr(CHF_AUTOIX[i], c0, c1) =
     &            arrc(CHF_AUTOIX[i], c0, c1) + inc
               inc = inc + half
            CHF_ENDDO
         enddo
      enddo

      return
      end
#endif
