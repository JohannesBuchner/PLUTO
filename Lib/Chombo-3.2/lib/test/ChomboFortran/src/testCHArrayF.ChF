C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

c     Rank 1 test
      subroutine rank1CHArray(
     &   CHF_ICHARRAY[1, arr],
     &   CHF_CONST_ICHARRAY[1, arrc])

      integer i0
      integer inc

      inc = 1
      do i0 = CHF_LBOUND[arrc;0], CHF_UBOUND[arrc;0]
         arr(i0) = arrc(i0) + inc
         inc = inc + 1
      enddo

      return
      end

c     Rank 2 test
      subroutine rank2CHArray(
     &   CHF_ICHARRAY[2, arr],
     &   CHF_CONST_ICHARRAY[2, arrc])

      integer i0, i1
      integer inc

      inc = 1
      do i1 = CHF_LBOUND[arrc;1], CHF_UBOUND[arrc;1]
         do i0 = CHF_LBOUND[arrc;0], CHF_UBOUND[arrc;0]
            arr(i0, i1) = arrc(i0, i1) + inc
            inc = inc + 1
         enddo
      enddo

      return
      end

c     Rank 3 test
      subroutine rank3CHArray(
     &   CHF_ICHARRAY[3, arr],
     &   CHF_CONST_ICHARRAY[3, arrc])

      integer i0, i1, i2
      integer inc

      inc = 1
      do i2 = CHF_LBOUND[arrc;2], CHF_UBOUND[arrc;2]
         do i1 = CHF_LBOUND[arrc;1], CHF_UBOUND[arrc;1]
            do i0 = CHF_LBOUND[arrc;0], CHF_UBOUND[arrc;0]
               arr(i0, i1, i2) = arrc(i0, i1, i2) + inc
               inc = inc + 1
            enddo
         enddo
      enddo

      return
      end

c     Rank 4 test
      subroutine rank4CHArray(
     &   CHF_ICHARRAY[4, arr],
     &   CHF_CONST_ICHARRAY[4, arrc])

      integer i0, i1, i2, i3
      integer inc

      inc = 1
      do i3 = CHF_LBOUND[arrc;3], CHF_UBOUND[arrc;3]
         do i2 = CHF_LBOUND[arrc;2], CHF_UBOUND[arrc;2]
            do i1 = CHF_LBOUND[arrc;1], CHF_UBOUND[arrc;1]
               do i0 = CHF_LBOUND[arrc;0], CHF_UBOUND[arrc;0]
                  arr(i0, i1, i2, i3) = arrc(i0, i1, i2, i3) + inc
                  inc = inc + 1
               enddo
            enddo
         enddo
      enddo

      return
      end

c     Rank 5 test
      subroutine rank5CHArray(
     &   CHF_ICHARRAY[5, arr],
     &   CHF_CONST_ICHARRAY[5, arrc])

      integer i0, i1, i2, i3, i4
      integer inc

      inc = 1
      do i4 = CHF_LBOUND[arrc;4], CHF_UBOUND[arrc;4]
         do i3 = CHF_LBOUND[arrc;3], CHF_UBOUND[arrc;3]
            do i2 = CHF_LBOUND[arrc;2], CHF_UBOUND[arrc;2]
               do i1 = CHF_LBOUND[arrc;1], CHF_UBOUND[arrc;1]
                  do i0 = CHF_LBOUND[arrc;0], CHF_UBOUND[arrc;0]
                     arr(i0, i1, i2, i3, i4) =
     &                  arrc(i0, i1, i2, i3, i4) + inc
                     inc = inc + 1
                  enddo
               enddo
            enddo
         enddo
      enddo

      return
      end

c     Rank 6 test
      subroutine rank6CHArray(
     &   CHF_ICHARRAY[6, arr],
     &   CHF_CONST_ICHARRAY[6, arrc])

      integer i0, i1, i2, i3, i4, i5
      integer inc

      inc = 1
      do i5 = CHF_LBOUND[arrc;5], CHF_UBOUND[arrc;5]
         do i4 = CHF_LBOUND[arrc;4], CHF_UBOUND[arrc;4]
            do i3 = CHF_LBOUND[arrc;3], CHF_UBOUND[arrc;3]
               do i2 = CHF_LBOUND[arrc;2], CHF_UBOUND[arrc;2]
                  do i1 = CHF_LBOUND[arrc;1], CHF_UBOUND[arrc;1]
                     do i0 = CHF_LBOUND[arrc;0], CHF_UBOUND[arrc;0]
                        arr(i0, i1, i2, i3, i4, i5) =
     &                     arrc(i0, i1, i2, i3, i4, i5) + inc
                        inc = inc + 1
                     enddo
                  enddo
               enddo
            enddo
         enddo
      enddo

      return
      end

c     Rank 7 test
      subroutine rank7CHArray(
     &   CHF_ICHARRAY[7, arr],
     &   CHF_CONST_ICHARRAY[7, arrc])

      integer i0, i1, i2, i3, i4, i5, i6
      integer inc

      inc = 1
      do i6 = CHF_LBOUND[arrc;6], CHF_UBOUND[arrc;6]
         do i5 = CHF_LBOUND[arrc;5], CHF_UBOUND[arrc;5]
            do i4 = CHF_LBOUND[arrc;4], CHF_UBOUND[arrc;4]
               do i3 = CHF_LBOUND[arrc;3], CHF_UBOUND[arrc;3]
                  do i2 = CHF_LBOUND[arrc;2], CHF_UBOUND[arrc;2]
                     do i1 = CHF_LBOUND[arrc;1], CHF_UBOUND[arrc;1]
                        do i0 = CHF_LBOUND[arrc;0], CHF_UBOUND[arrc;0]
                           arr(i0, i1, i2, i3, i4, i5, i6) =
     &                        arrc(i0, i1, i2, i3, i4, i5, i6) + inc
                           inc = inc + 1
                        enddo
                     enddo
                  enddo
               enddo
            enddo
         enddo
      enddo

      return
      end

c     Rank SpaceDim+1 test for contiguous components
      subroutine rankCHArraySpaceDimPlus1Cont(
     &   CHF_RCHARRAY[RANK_SPACEDIM_PLUS_1, arr],
     &   CHF_CONST_RCHARRAY[RANK_SPACEDIM_PLUS_1, arrc],
     &   CHF_BOX[box])

      integer CHF_AUTODECL[i]
      integer c0
      real_t inc;

      inc = half
      CHF_AUTOMULTIDO[box; i]
         do c0 = CHF_LBOUND[arrc;0], CHF_UBOUND[arrc;0]
            arr(c0, CHF_AUTOIX[i]) = arrc(c0, CHF_AUTOIX[i]) + inc
            inc = inc + half
         enddo
      CHF_ENDDO

      return
      end

c     Rank SpaceDim+1 test for distributed components
      subroutine rankCHArraySpaceDimPlus1Dist(
     &   CHF_RCHARRAY[RANK_SPACEDIM_PLUS_1, arr],
     &   CHF_CONST_RCHARRAY[RANK_SPACEDIM_PLUS_1, arrc],
     &   CHF_BOX[box],
     &   CHF_CONST_INT[dimc0])

      integer CHF_AUTODECL[i]
      integer c0
      real_t inc;

      inc = half
      do c0 = 0, dimc0-1
         CHF_AUTOMULTIDO[box; i]
            arr(CHF_AUTOIX[i], c0) = arrc(CHF_AUTOIX[i], c0) + inc
            inc = inc + half
         CHF_ENDDO
      enddo

      return
      end
