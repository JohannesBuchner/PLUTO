Entered directory ./MultiDim
iv3 = (1,2,3)
...sliced down to (2,3)
...and further sliced down to (3)
iv3 = (1,2,3)
...sliced down to (1,3)
...and further sliced down to (1)
iv3 = (1,2,3)
...sliced down to (1,2)

******* Box slicing *******
Slicing [(1,2,3) (2,3,4)], and obtaining [(2,3) (3,4)]
...and further sliced down to [(3) (4)]
Slicing [(1,2,3) (2,3,4)], and obtaining [(1,3) (2,4)]
...and further sliced down to [(1) (2)]
Slicing [(1,2,3) (2,3,4)], and obtaining [(1,2) (2,3)]

******* BaseFab<int> slicing *******
Slicing [(1,2,3) (2,4,6)];
1 2 
3 4 
5 6 

7 8 
9 10 
11 12 

13 14 
15 16 
17 18 

19 20 
21 22 
23 24 


  along dir=0 at position 1 and obtaining: 
[(2,3) (4,6)];
1 3 5 
7 9 11 
13 15 17 
19 21 23 

...and further sliced, at position 2, down to [(3) (6)];
1 7 13 19 
-------------------------------------------
Slicing [(1,2,3) (2,4,6)];
1 2 
3 4 
5 6 

7 8 
9 10 
11 12 

13 14 
15 16 
17 18 

19 20 
21 22 
23 24 


  along dir=1 at position 2 and obtaining: 
[(1,3) (2,6)];
1 2 
7 8 
13 14 
19 20 

...and further sliced, at position 3, down to [(1) (2)];
1 2 
-------------------------------------------
Slicing [(1,2,3) (2,4,6)];
1 2 
3 4 
5 6 

7 8 
9 10 
11 12 

13 14 
15 16 
17 18 

19 20 
21 22 
23 24 


  along dir=2 at position 3 and obtaining: 
[(1,2) (2,4)];
1 2 
3 4 
5 6 

-------------------------------------------

******* BaseFab<double> slicing *******
Slicing [(1,2,3) (2,4,6)];
1.01 2.02 
3.03 4.04 
5.05 6.06 

7.07 8.08 
9.09 10.1 
11.11 12.12 

13.13 14.14 
15.15 16.16 
17.17 18.18 

19.19 20.2 
21.21 22.22 
23.23 24.24 


  along dir=0 at position 1 and obtaining: 
[(2,3) (4,6)];
1.01 3.03 5.05 
7.07 9.09 11.11 
13.13 15.15 17.17 
19.19 21.21 23.23 

...and further sliced, at position 2, down to [(3) (6)];
1.01 7.07 13.13 19.19 
-------------------------------------------
Slicing [(1,2,3) (2,4,6)];
1.01 2.02 
3.03 4.04 
5.05 6.06 

7.07 8.08 
9.09 10.1 
11.11 12.12 

13.13 14.14 
15.15 16.16 
17.17 18.18 

19.19 20.2 
21.21 22.22 
23.23 24.24 


  along dir=1 at position 2 and obtaining: 
[(1,3) (2,6)];
1.01 2.02 
7.07 8.08 
13.13 14.14 
19.19 20.2 

...and further sliced, at position 3, down to [(1) (2)];
1.01 2.02 
-------------------------------------------
Slicing [(1,2,3) (2,4,6)];
1.01 2.02 
3.03 4.04 
5.05 6.06 

7.07 8.08 
9.09 10.1 
11.11 12.12 

13.13 14.14 
15.15 16.16 
17.17 18.18 

19.19 20.2 
21.21 22.22 
23.23 24.24 


  along dir=2 at position 3 and obtaining: 
[(1,2) (2,4)];
1.01 2.02 
3.03 4.04 
5.05 6.06 

-------------------------------------------
Starting from DisjointBoxLayoutTM<3>:[(1,2,3) (2,3,4)][0] # [(11,2,3) (12,3,4)][0] # 

  sliced down to:[(1,3) (2,4)][0] # [(11,3) (12,4)][0] # 

  injected back to:[(1,2,3) (2,2,4)][0] # [(11,2,3) (12,2,4)][0] # 

  And further sliced:[(11) (12)][0] # [(1) (2)][0] # 

  And injected back to:[(1,3) (2,3)][0] # [(11,3) (12,3)][0] # 

sliceTest finished with status 0
Entered directory ./BoxTools
      Beginning HDF5attributes ...
   HDF5attributes passed
HDF5attributes finished with status 0
      Beginning HDF5boxIO ...
   HDF5boxIO passed
HDF5boxIO finished with status 0
      Beginning HDF5data ...
plan1: 0....[(4,10,10) (4,10,10)][0] # [(5,7,9) (5,7,9)][0] # [(5,7,11) (5,7,11)][0] # [(5,8,7) (5,9,8)][0]
[(5,8,12) (5,9,13)][0] # [(5,10,7) (5,12,8)][0] # [(5,10,12) (5,12,13)][0] # [(5,13,9) (5,13,9)][0]
[(5,13,11) (5,13,11)][0] # [(6,6,8) (6,6,8)][0] # [(6,6,12) (6,7,13)][0] # [(6,7,7) (6,7,7)][0]
[(6,8,5) (7,9,6)][0] # [(6,8,14) (7,9,15)][0] # [(6,10,5) (9,11,6)][0] # [(6,10,14) (9,11,15)][0]
[(6,12,6) (7,13,6)][0] # [(6,12,14) (7,13,14)][0] # [(6,13,7) (6,13,7)][0] # [(6,13,12) (6,14,13)][0]
[(6,14,8) (6,14,8)][0] # [(7,5,9) (7,5,9)][0] # [(7,5,11) (7,5,11)][0] # [(7,6,7) (7,6,7)][0]
[(7,6,13) (7,6,13)][0] # [(7,7,6) (7,7,6)][0] # [(7,7,14) (7,7,14)][0] # [(7,14,7) (7,14,7)][0]
[(7,14,13) (7,14,13)][0] # [(7,15,9) (7,15,9)][0] # [(7,15,11) (7,15,11)][0] # [(8,5,7) (9,5,8)][0]
[(8,5,12) (9,5,13)][0] # [(8,6,5) (9,9,6)][0] # [(8,6,14) (9,9,15)][0] # [(8,12,5) (9,14,6)][0]
[(8,12,14) (9,14,15)][0] # [(8,15,7) (9,15,8)][0] # [(8,15,12) (9,15,13)][0] # [(10,4,10) (10,4,10)][0]
[(10,5,7) (12,5,8)][0] # [(10,5,12) (12,5,13)][0] # [(10,6,5) (11,9,6)][0] # [(10,6,14) (11,9,15)][0]
[(10,10,4) (12,11,5)][0] # [(10,10,15) (12,11,16)][0] # [(10,12,5) (12,13,5)][0] # [(10,12,15) (12,13,15)][0]
[(10,14,6) (10,15,7)][0] # [(10,14,13) (10,15,14)][0] # [(10,16,10) (10,16,10)][0] # [(11,14,6) (12,14,6)][0]
[(11,14,13) (11,15,14)][0] # [(11,15,7) (12,15,8)][0] # [(12,6,6) (13,7,6)][0] # [(12,6,14) (13,7,14)][0]
[(12,8,5) (14,9,6)][0] # [(12,8,14) (14,9,15)][0] # [(12,13,6) (12,13,6)][0] # [(12,13,14) (12,13,14)][0]
[(12,14,14) (12,14,14)][0] # [(12,15,12) (12,15,12)][0] # [(13,5,9) (13,5,9)][0] # [(13,5,11) (13,5,11)][0]
[(13,6,7) (13,6,7)][0] # [(13,6,12) (14,6,13)][0] # [(13,10,5) (13,11,5)][0] # [(13,10,15) (13,11,15)][0]
[(13,12,6) (14,12,6)][0] # [(13,12,13) (13,14,14)][0] # [(13,13,6) (13,14,7)][0] # [(13,15,9) (13,15,9)][0]
[(13,15,11) (13,15,11)][0] # [(14,6,8) (14,6,8)][0] # [(14,7,7) (14,7,7)][0] # [(14,7,13) (14,7,13)][0]
[(14,10,6) (15,11,7)][0] # [(14,10,13) (15,11,14)][0] # [(14,12,14) (14,12,14)][0] # [(14,13,7) (14,13,7)][0]
[(14,13,12) (14,14,13)][0] # [(14,14,8) (14,14,8)][0] # [(15,7,9) (15,7,9)][0] # [(15,7,11) (15,7,11)][0]
[(15,8,7) (15,9,8)][0] # [(15,8,12) (15,9,13)][0] # [(15,12,8) (15,13,9)][0] # [(15,12,12) (15,12,12)][0]
[(15,13,11) (15,13,11)][0] # [(16,10,10) (16,10,10)][0] # 

plan2: 0....[(4,7,6) (4,13,7)][0] # [(4,7,13) (4,13,14)][0] # [(5,10,10) (5,10,10)][0] # [(6,6,10) (7,7,10)][0]
[(6,8,7) (7,9,8)][0] # [(6,8,12) (7,9,13)][0] # [(6,10,7) (6,11,8)][0] # [(6,10,12) (6,11,13)][0]
[(6,12,8) (6,12,8)][0] # [(6,12,12) (6,12,12)][0] # [(6,13,10) (7,14,10)][0] # [(7,7,8) (7,7,8)][0]
[(7,7,12) (7,7,12)][0] # [(7,8,6) (8,12,6)][0] # [(7,8,14) (8,12,14)][0] # [(7,11,7) (7,11,7)][0]
[(7,11,13) (7,11,13)][0] # [(7,12,7) (7,13,8)][0] # [(7,12,12) (7,13,13)][0] # [(8,6,7) (9,7,8)][0]
[(8,6,12) (9,7,13)][0] # [(8,13,7) (9,14,8)][0] # [(8,13,12) (9,14,13)][0] # [(9,7,6) (10,9,6)][0]
[(9,7,14) (10,9,14)][0] # [(9,10,5) (10,11,6)][0] # [(9,10,14) (10,11,15)][0] # [(9,12,6) (10,13,6)][0]
[(9,12,14) (10,13,14)][0] # [(10,5,10) (10,5,10)][0] # [(10,6,7) (10,6,7)][0] # [(10,6,13) (10,6,13)][0]
[(10,14,7) (10,14,7)][0] # [(10,14,13) (10,14,13)][0] # [(10,15,10) (10,15,10)][0] # [(11,6,7) (12,7,8)][0]
[(11,6,12) (12,7,13)][0] # [(11,8,6) (13,12,6)][0] # [(11,8,14) (13,12,14)][0] # [(11,13,7) (11,14,8)][0]
[(11,13,12) (11,14,13)][0] # [(12,13,7) (12,14,8)][0] # [(12,13,12) (12,14,13)][0] # [(13,6,10) (14,7,10)][0]
[(13,7,8) (13,7,8)][0] # [(13,7,12) (13,7,12)][0] # [(13,8,7) (14,9,8)][0] # [(13,8,12) (14,9,13)][0]
[(13,11,7) (13,11,7)][0] # [(13,11,13) (13,11,13)][0] # [(13,12,7) (13,13,8)][0] # [(13,12,12) (13,13,13)][0]
[(13,13,10) (14,14,10)][0] # [(14,10,7) (14,11,8)][0] # [(14,10,12) (14,11,13)][0] # [(14,12,8) (14,12,8)][0]
[(14,12,12) (14,12,12)][0] # [(15,10,10) (15,10,10)][0] # [(16,7,6) (16,13,7)][0] # [(16,7,13) (16,13,14)][0]


readplan1: 0....[(4,10,10) (4,10,10)][0] # [(5,7,9) (5,7,9)][0] # [(5,7,11) (5,7,11)][0] # [(5,8,7) (5,9,8)][0]
[(5,8,12) (5,9,13)][0] # [(5,10,7) (5,12,8)][0] # [(5,10,12) (5,12,13)][0] # [(5,13,9) (5,13,9)][0]
[(5,13,11) (5,13,11)][0] # [(6,6,8) (6,6,8)][0] # [(6,6,12) (6,7,13)][0] # [(6,7,7) (6,7,7)][0]
[(6,8,5) (7,9,6)][0] # [(6,8,14) (7,9,15)][0] # [(6,10,5) (9,11,6)][0] # [(6,10,14) (9,11,15)][0]
[(6,12,6) (7,13,6)][0] # [(6,12,14) (7,13,14)][0] # [(6,13,7) (6,13,7)][0] # [(6,13,12) (6,14,13)][0]
[(6,14,8) (6,14,8)][0] # [(7,5,9) (7,5,9)][0] # [(7,5,11) (7,5,11)][0] # [(7,6,7) (7,6,7)][0]
[(7,6,13) (7,6,13)][0] # [(7,7,6) (7,7,6)][0] # [(7,7,14) (7,7,14)][0] # [(7,14,7) (7,14,7)][0]
[(7,14,13) (7,14,13)][0] # [(7,15,9) (7,15,9)][0] # [(7,15,11) (7,15,11)][0] # [(8,5,7) (9,5,8)][0]
[(8,5,12) (9,5,13)][0] # [(8,6,5) (9,9,6)][0] # [(8,6,14) (9,9,15)][0] # [(8,12,5) (9,14,6)][0]
[(8,12,14) (9,14,15)][0] # [(8,15,7) (9,15,8)][0] # [(8,15,12) (9,15,13)][0] # [(10,4,10) (10,4,10)][0]
[(10,5,7) (12,5,8)][0] # [(10,5,12) (12,5,13)][0] # [(10,6,5) (11,9,6)][0] # [(10,6,14) (11,9,15)][0]
[(10,10,4) (12,11,5)][0] # [(10,10,15) (12,11,16)][0] # [(10,12,5) (12,13,5)][0] # [(10,12,15) (12,13,15)][0]
[(10,14,6) (10,15,7)][0] # [(10,14,13) (10,15,14)][0] # [(10,16,10) (10,16,10)][0] # [(11,14,6) (12,14,6)][0]
[(11,14,13) (11,15,14)][0] # [(11,15,7) (12,15,8)][0] # [(12,6,6) (13,7,6)][0] # [(12,6,14) (13,7,14)][0]
[(12,8,5) (14,9,6)][0] # [(12,8,14) (14,9,15)][0] # [(12,13,6) (12,13,6)][0] # [(12,13,14) (12,13,14)][0]
[(12,14,14) (12,14,14)][0] # [(12,15,12) (12,15,12)][0] # [(13,5,9) (13,5,9)][0] # [(13,5,11) (13,5,11)][0]
[(13,6,7) (13,6,7)][0] # [(13,6,12) (14,6,13)][0] # [(13,10,5) (13,11,5)][0] # [(13,10,15) (13,11,15)][0]
[(13,12,6) (14,12,6)][0] # [(13,12,13) (13,14,14)][0] # [(13,13,6) (13,14,7)][0] # [(13,15,9) (13,15,9)][0]
[(13,15,11) (13,15,11)][0] # [(14,6,8) (14,6,8)][0] # [(14,7,7) (14,7,7)][0] # [(14,7,13) (14,7,13)][0]
[(14,10,6) (15,11,7)][0] # [(14,10,13) (15,11,14)][0] # [(14,12,14) (14,12,14)][0] # [(14,13,7) (14,13,7)][0]
[(14,13,12) (14,14,13)][0] # [(14,14,8) (14,14,8)][0] # [(15,7,9) (15,7,9)][0] # [(15,7,11) (15,7,11)][0]
[(15,8,7) (15,9,8)][0] # [(15,8,12) (15,9,13)][0] # [(15,12,8) (15,13,9)][0] # [(15,12,12) (15,12,12)][0]
[(15,13,11) (15,13,11)][0] # [(16,10,10) (16,10,10)][0] # 

readplan2: 0....[(4,7,6) (4,13,7)][0] # [(4,7,13) (4,13,14)][0] # [(5,10,10) (5,10,10)][0] # [(6,6,10) (7,7,10)][0]
[(6,8,7) (7,9,8)][0] # [(6,8,12) (7,9,13)][0] # [(6,10,7) (6,11,8)][0] # [(6,10,12) (6,11,13)][0]
[(6,12,8) (6,12,8)][0] # [(6,12,12) (6,12,12)][0] # [(6,13,10) (7,14,10)][0] # [(7,7,8) (7,7,8)][0]
[(7,7,12) (7,7,12)][0] # [(7,8,6) (8,12,6)][0] # [(7,8,14) (8,12,14)][0] # [(7,11,7) (7,11,7)][0]
[(7,11,13) (7,11,13)][0] # [(7,12,7) (7,13,8)][0] # [(7,12,12) (7,13,13)][0] # [(8,6,7) (9,7,8)][0]
[(8,6,12) (9,7,13)][0] # [(8,13,7) (9,14,8)][0] # [(8,13,12) (9,14,13)][0] # [(9,7,6) (10,9,6)][0]
[(9,7,14) (10,9,14)][0] # [(9,10,5) (10,11,6)][0] # [(9,10,14) (10,11,15)][0] # [(9,12,6) (10,13,6)][0]
[(9,12,14) (10,13,14)][0] # [(10,5,10) (10,5,10)][0] # [(10,6,7) (10,6,7)][0] # [(10,6,13) (10,6,13)][0]
[(10,14,7) (10,14,7)][0] # [(10,14,13) (10,14,13)][0] # [(10,15,10) (10,15,10)][0] # [(11,6,7) (12,7,8)][0]
[(11,6,12) (12,7,13)][0] # [(11,8,6) (13,12,6)][0] # [(11,8,14) (13,12,14)][0] # [(11,13,7) (11,14,8)][0]
[(11,13,12) (11,14,13)][0] # [(12,13,7) (12,14,8)][0] # [(12,13,12) (12,14,13)][0] # [(13,6,10) (14,7,10)][0]
[(13,7,8) (13,7,8)][0] # [(13,7,12) (13,7,12)][0] # [(13,8,7) (14,9,8)][0] # [(13,8,12) (14,9,13)][0]
[(13,11,7) (13,11,7)][0] # [(13,11,13) (13,11,13)][0] # [(13,12,7) (13,13,8)][0] # [(13,12,12) (13,13,13)][0]
[(13,13,10) (14,14,10)][0] # [(14,10,7) (14,11,8)][0] # [(14,10,12) (14,11,13)][0] # [(14,12,8) (14,12,8)][0]
[(14,12,12) (14,12,12)][0] # [(15,10,10) (15,10,10)][0] # [(16,7,6) (16,13,7)][0] # [(16,7,13) (16,13,14)][0]


[(4,10,10) (4,10,10)][0] # [(5,7,9) (5,7,9)][0] # [(5,7,11) (5,7,11)][0] # [(5,8,7) (5,9,8)][0]
[(5,8,12) (5,9,13)][0] # [(5,10,7) (5,12,8)][0] # [(5,10,12) (5,12,13)][0] # [(5,13,9) (5,13,9)][0]
[(5,13,11) (5,13,11)][0] # [(6,6,8) (6,6,8)][0] # [(6,6,12) (6,7,13)][0] # [(6,7,7) (6,7,7)][0]
[(6,8,5) (7,9,6)][0] # [(6,8,14) (7,9,15)][0] # [(6,10,5) (9,11,6)][0] # [(6,10,14) (9,11,15)][0]
[(6,12,6) (7,13,6)][0] # [(6,12,14) (7,13,14)][0] # [(6,13,7) (6,13,7)][0] # [(6,13,12) (6,14,13)][0]
[(6,14,8) (6,14,8)][0] # [(7,5,9) (7,5,9)][0] # [(7,5,11) (7,5,11)][0] # [(7,6,7) (7,6,7)][0]
[(7,6,13) (7,6,13)][0] # [(7,7,6) (7,7,6)][0] # [(7,7,14) (7,7,14)][0] # [(7,14,7) (7,14,7)][0]
[(7,14,13) (7,14,13)][0] # [(7,15,9) (7,15,9)][0] # [(7,15,11) (7,15,11)][0] # [(8,5,7) (9,5,8)][0]
[(8,5,12) (9,5,13)][0] # [(8,6,5) (9,9,6)][0] # [(8,6,14) (9,9,15)][0] # [(8,12,5) (9,14,6)][0]
[(8,12,14) (9,14,15)][0] # [(8,15,7) (9,15,8)][0] # [(8,15,12) (9,15,13)][0] # [(10,4,10) (10,4,10)][0]
[(10,5,7) (12,5,8)][0] # [(10,5,12) (12,5,13)][0] # [(10,6,5) (11,9,6)][0] # [(10,6,14) (11,9,15)][0]
[(10,10,4) (12,11,5)][0] # [(10,10,15) (12,11,16)][0] # [(10,12,5) (12,13,5)][0] # [(10,12,15) (12,13,15)][0]
[(10,14,6) (10,15,7)][0] # [(10,14,13) (10,15,14)][0] # [(10,16,10) (10,16,10)][0] # [(11,14,6) (12,14,6)][0]
[(11,14,13) (11,15,14)][0] # [(11,15,7) (12,15,8)][0] # [(12,6,6) (13,7,6)][0] # [(12,6,14) (13,7,14)][0]
[(12,8,5) (14,9,6)][0] # [(12,8,14) (14,9,15)][0] # [(12,13,6) (12,13,6)][0] # [(12,13,14) (12,13,14)][0]
[(12,14,14) (12,14,14)][0] # [(12,15,12) (12,15,12)][0] # [(13,5,9) (13,5,9)][0] # [(13,5,11) (13,5,11)][0]
[(13,6,7) (13,6,7)][0] # [(13,6,12) (14,6,13)][0] # [(13,10,5) (13,11,5)][0] # [(13,10,15) (13,11,15)][0]
[(13,12,6) (14,12,6)][0] # [(13,12,13) (13,14,14)][0] # [(13,13,6) (13,14,7)][0] # [(13,15,9) (13,15,9)][0]
[(13,15,11) (13,15,11)][0] # [(14,6,8) (14,6,8)][0] # [(14,7,7) (14,7,7)][0] # [(14,7,13) (14,7,13)][0]
[(14,10,6) (15,11,7)][0] # [(14,10,13) (15,11,14)][0] # [(14,12,14) (14,12,14)][0] # [(14,13,7) (14,13,7)][0]
[(14,13,12) (14,14,13)][0] # [(14,14,8) (14,14,8)][0] # [(15,7,9) (15,7,9)][0] # [(15,7,11) (15,7,11)][0]
[(15,8,7) (15,9,8)][0] # [(15,8,12) (15,9,13)][0] # [(15,12,8) (15,13,9)][0] # [(15,12,12) (15,12,12)][0]
[(15,13,11) (15,13,11)][0] # [(16,10,10) (16,10,10)][0] # 
[(4,10,10) (4,10,10)][0] # [(5,7,9) (5,7,9)][0] # [(5,7,11) (5,7,11)][0] # [(5,8,7) (5,9,8)][0]
[(5,8,12) (5,9,13)][0] # [(5,10,7) (5,12,8)][0] # [(5,10,12) (5,12,13)][0] # [(5,13,9) (5,13,9)][0]
[(5,13,11) (5,13,11)][0] # [(6,6,8) (6,6,8)][0] # [(6,6,12) (6,7,13)][0] # [(6,7,7) (6,7,7)][0]
[(6,8,5) (7,9,6)][0] # [(6,8,14) (7,9,15)][0] # [(6,10,5) (9,11,6)][0] # [(6,10,14) (9,11,15)][0]
[(6,12,6) (7,13,6)][0] # [(6,12,14) (7,13,14)][0] # [(6,13,7) (6,13,7)][0] # [(6,13,12) (6,14,13)][0]
[(6,14,8) (6,14,8)][0] # [(7,5,9) (7,5,9)][0] # [(7,5,11) (7,5,11)][0] # [(7,6,7) (7,6,7)][0]
[(7,6,13) (7,6,13)][0] # [(7,7,6) (7,7,6)][0] # [(7,7,14) (7,7,14)][0] # [(7,14,7) (7,14,7)][0]
[(7,14,13) (7,14,13)][0] # [(7,15,9) (7,15,9)][0] # [(7,15,11) (7,15,11)][0] # [(8,5,7) (9,5,8)][0]
[(8,5,12) (9,5,13)][0] # [(8,6,5) (9,9,6)][0] # [(8,6,14) (9,9,15)][0] # [(8,12,5) (9,14,6)][0]
[(8,12,14) (9,14,15)][0] # [(8,15,7) (9,15,8)][0] # [(8,15,12) (9,15,13)][0] # [(10,4,10) (10,4,10)][0]
[(10,5,7) (12,5,8)][0] # [(10,5,12) (12,5,13)][0] # [(10,6,5) (11,9,6)][0] # [(10,6,14) (11,9,15)][0]
[(10,10,4) (12,11,5)][0] # [(10,10,15) (12,11,16)][0] # [(10,12,5) (12,13,5)][0] # [(10,12,15) (12,13,15)][0]
[(10,14,6) (10,15,7)][0] # [(10,14,13) (10,15,14)][0] # [(10,16,10) (10,16,10)][0] # [(11,14,6) (12,14,6)][0]
[(11,14,13) (11,15,14)][0] # [(11,15,7) (12,15,8)][0] # [(12,6,6) (13,7,6)][0] # [(12,6,14) (13,7,14)][0]
[(12,8,5) (14,9,6)][0] # [(12,8,14) (14,9,15)][0] # [(12,13,6) (12,13,6)][0] # [(12,13,14) (12,13,14)][0]
[(12,14,14) (12,14,14)][0] # [(12,15,12) (12,15,12)][0] # [(13,5,9) (13,5,9)][0] # [(13,5,11) (13,5,11)][0]
[(13,6,7) (13,6,7)][0] # [(13,6,12) (14,6,13)][0] # [(13,10,5) (13,11,5)][0] # [(13,10,15) (13,11,15)][0]
[(13,12,6) (14,12,6)][0] # [(13,12,13) (13,14,14)][0] # [(13,13,6) (13,14,7)][0] # [(13,15,9) (13,15,9)][0]
[(13,15,11) (13,15,11)][0] # [(14,6,8) (14,6,8)][0] # [(14,7,7) (14,7,7)][0] # [(14,7,13) (14,7,13)][0]
[(14,10,6) (15,11,7)][0] # [(14,10,13) (15,11,14)][0] # [(14,12,14) (14,12,14)][0] # [(14,13,7) (14,13,7)][0]
[(14,13,12) (14,14,13)][0] # [(14,14,8) (14,14,8)][0] # [(15,7,9) (15,7,9)][0] # [(15,7,11) (15,7,11)][0]
[(15,8,7) (15,9,8)][0] # [(15,8,12) (15,9,13)][0] # [(15,12,8) (15,13,9)][0] # [(15,12,12) (15,12,12)][0]
[(15,13,11) (15,13,11)][0] # [(16,10,10) (16,10,10)][0] # 

   HDF5data passed
HDF5data finished with status 0
(17,19,23)
(17,19,23)
(17,19,23)
(17,19,23)
(17,19,23)
15 18 23 
01010010
(18,36,36)
(12,0,10)
56
6210
(18,36,36)
(18,36,36)
(23,41,41)
(23,41,41)
(31,49,49)
(18,36,36)
(18,36,36)
(15,18,23)
(15,18,23)
(12,0,10)
(13,16,21)
(-9,-12,-17)
(30,36,46)
(30,36,46)
(90,648,598)
(3,18,13)
(270,11664,7774)
(270,1944,1794)
(6,36,26)
Dividing 10 by (90,648,598)
(0,0,0)
(22,162,149)
(22,162,149)
(22,-162,149)
(22,162,149)
(44,324,298)
(44,324,298)
(132,972,894)
(-34,324,298)
(-34,324,298)
(-34,-314,298)
(-34,-314,298)
(-34,-314,-288)
(-34,-314,-288)
(-29,-314,-288)
(-29,-314,-288)
(-29,-309,-288)
(-29,-309,-288)
(-29,-309,-283)
(-29,-309,-283)
(-26,-291,-270)
(-26,-291,-270)
(-23,-288,-267)
(-23,-288,-267)
(-2,-16,-12)
(-2,-16,-12)
(-1,-8,-6)
(-1,-8,-6)
(1,0,0)
(0,1,0)
(0,0,1)
(0,0,0)
(1,1,1)
IntvectTest finished with status 0
(17.1,19.2,21.3)
(17.1,19.2,21.3)
(17.1,19.2,21.3)
15 18 21.3 
Gonna compare (3.1,18.2,11.9) against (15,18,21.3)
 == 0
 != 1
 < 0
 <= 0
 > 0
 >= 0
 lexLT 1
 lexGT 0
627.57
54.3
5751
(18.1,36.2,33.2)
(18.1,36.2,33.2)
(23.1,41.2,38.2)
(23.1,41.2,38.2)
(31.2,49.3,46.3)
(18.1,36.2,33.2)
(18.1,36.2,33.2)
(15,18,21.3)
(15,18,21.3)
(-8.9,-11.9,-15.2)
(30,36,42.6)
(30,36,42.6)
(93,655.2,506.94)
(3.1,18.2,11.9)
(279,1965.6,1520.82)
(6.51,38.22,24.99)
(0.108602,0.0154151,0.0199235)
(23.25,163.8,126.735)
(23.25,163.8,126.735)
(7.5,9,10.65)
(7.5,9,10.65)
(1.55,9.1,5.95)
0
1
2
2
(15,-19.8,21.3)
(15,-19.8,21.3)
(1,0,0)
(0,1,0)
(0,0,1)
(0,0,0)
(1,1,1)
RealvectTest finished with status 0
      Beginning arrayTest ...
   arrayTest: ArrayTest seems to have passed
arrayTest finished with status 0
      Beginning broadcastTest ...
testing integer broadcast  
testing real broadcast  
testing box broadcast  
testing vector<int> broadcast  
testing vector<Real> broadcast  
testing vector<Box> broadcast  
   broadcastTest: passed all tests
broadcastTest finished with status 0
2D:
Bocks: [(1,1) (3,4)] (node-centered convention)
Domain: [(1,1) (4,5)] (node-centered convention)
--------------------------------------------------
ghosts=(0,1)
Nodes (codim=2; 0):
{
}
domainBoundaryBoxes():
Edges (codim=1; 2):
{
[(1,0) (3,1)]
[(1,4) (3,5)]
}
domainBoundaryBoxes():
{ 2; [(1,0) (3,1)]}
Full boundary box map, periodicdir={
}
  Codim=1
{ 2; [(1,0) (3,1)]}
  Codim=2
Full boundary box map, periodicdir={
0
}
  Codim=1
{ 2; [(1,0) (3,1)]}
  Codim=2
Full boundary box map, periodicdir={
1
}
  Codim=1
  Codim=2
--------------------------------------------------
ghosts=(1,1)
Nodes (codim=2; 4):
{
[(0,0) (1,1)]
[(0,4) (1,5)]
[(3,0) (4,1)]
[(3,4) (4,5)]
}
domainBoundaryBoxes():
{ 0; [(0,0) (1,1)]}
Edges (codim=1; 4):
{
[(0,1) (1,4)]
[(3,1) (4,4)]
[(1,0) (3,1)]
[(1,4) (3,5)]
}
domainBoundaryBoxes():
{ 0; [(0,1) (1,5)]}
{ 2; [(1,0) (4,1)]}
Full boundary box map, periodicdir={
}
  Codim=1
{ 0; [(0,1) (1,5)]}
{ 2; [(1,0) (4,1)]}
  Codim=2
{ 0; [(0,0) (1,1)]}
Full boundary box map, periodicdir={
0
}
  Codim=1
{ 2; [(0,0) (4,1)]}
  Codim=2
Full boundary box map, periodicdir={
1
}
  Codim=1
{ 0; [(0,0) (1,5)]}
  Codim=2
--------------------------------------------------
ghosts=(0,0)
Nodes (codim=2; 0):
{
}
domainBoundaryBoxes():
Edges (codim=1; 0):
{
}
domainBoundaryBoxes():
Full boundary box map, periodicdir={
}
  Codim=1
  Codim=2
Full boundary box map, periodicdir={
0
}
  Codim=1
  Codim=2
Full boundary box map, periodicdir={
1
}
  Codim=1
  Codim=2
-----------------------------------------------------
-----------------------------------------------------

3D:
Bocks: [(1,1,1) (3,4,5)] (node-centered convention)
Domain: [(1,1,1) (4,5,6)] (node-centered convention)
--------------------------------------------------
ghosts=(0,1,1)
Nodes (codim=3; 0):
{
}
domainBoundaryBoxes():
Edges (codim=2; 4):
{
[(1,0,0) (3,1,1)]
[(1,0,5) (3,1,6)]
[(1,4,0) (3,5,1)]
[(1,4,5) (3,5,6)]
}
domainBoundaryBoxes():
{ 8; [(1,0,0) (3,1,1)]}
Faces (codim=1; 4):
{
[(1,0,1) (3,1,5)]
[(1,4,1) (3,5,5)]
[(1,1,0) (3,4,1)]
[(1,1,5) (3,4,6)]
}
domainBoundaryBoxes():
{ 2; [(1,0,1) (3,1,6)]}
{ 4; [(1,1,0) (3,5,1)]}
Full boundary box map, periodicdir={
}
  Codim=1
{ 2; [(1,0,1) (3,1,6)]}
{ 4; [(1,1,0) (3,5,1)]}
  Codim=2
{ 8; [(1,0,0) (3,1,1)]}
  Codim=3
Full boundary box map, periodicdir={
0
}
  Codim=1
{ 2; [(1,0,1) (3,1,6)]}
{ 4; [(1,1,0) (3,5,1)]}
  Codim=2
{ 8; [(1,0,0) (3,1,1)]}
  Codim=3
Full boundary box map, periodicdir={
1
}
  Codim=1
{ 4; [(1,0,0) (3,5,1)]}
  Codim=2
  Codim=3
Full boundary box map, periodicdir={
2
}
  Codim=1
{ 2; [(1,0,0) (3,1,6)]}
  Codim=2
  Codim=3
Full boundary box map, periodicdir={
0
1
}
  Codim=1
{ 4; [(1,0,0) (3,5,1)]}
  Codim=2
  Codim=3
--------------------------------------------------
ghosts=(1,1,1)
Nodes (codim=3; 8):
{
[(0,0,0) (1,1,1)]
[(0,0,5) (1,1,6)]
[(0,4,0) (1,5,1)]
[(0,4,5) (1,5,6)]
[(3,0,0) (4,1,1)]
[(3,0,5) (4,1,6)]
[(3,4,0) (4,5,1)]
[(3,4,5) (4,5,6)]
}
domainBoundaryBoxes():
{ 0; [(0,0,0) (1,1,1)]}
Edges (codim=2; 12):
{
[(0,0,1) (1,1,5)]
[(0,4,1) (1,5,5)]
[(3,0,1) (4,1,5)]
[(3,4,1) (4,5,5)]
[(0,1,0) (1,4,1)]
[(0,1,5) (1,4,6)]
[(3,1,0) (4,4,1)]
[(3,1,5) (4,4,6)]
[(1,0,0) (3,1,1)]
[(1,0,5) (3,1,6)]
[(1,4,0) (3,5,1)]
[(1,4,5) (3,5,6)]
}
domainBoundaryBoxes():
{ 0; [(0,0,1) (1,1,6)]}
{ 4; [(0,1,0) (1,5,1)]}
{ 8; [(1,0,0) (4,1,1)]}
Faces (codim=1; 6):
{
[(0,1,1) (1,4,5)]
[(3,1,1) (4,4,5)]
[(1,0,1) (3,1,5)]
[(1,4,1) (3,5,5)]
[(1,1,0) (3,4,1)]
[(1,1,5) (3,4,6)]
}
domainBoundaryBoxes():
{ 0; [(0,1,1) (1,5,6)]}
{ 2; [(1,0,1) (4,1,6)]}
{ 4; [(1,1,0) (4,5,1)]}
Full boundary box map, periodicdir={
}
  Codim=1
{ 0; [(0,1,1) (1,5,6)]}
{ 2; [(1,0,1) (4,1,6)]}
{ 4; [(1,1,0) (4,5,1)]}
  Codim=2
{ 0; [(0,0,1) (1,1,6)]}
{ 4; [(0,1,0) (1,5,1)]}
{ 8; [(1,0,0) (4,1,1)]}
  Codim=3
{ 0; [(0,0,0) (1,1,1)]}
Full boundary box map, periodicdir={
0
}
  Codim=1
{ 2; [(0,0,1) (4,1,6)]}
{ 4; [(0,1,0) (4,5,1)]}
  Codim=2
{ 8; [(0,0,0) (4,1,1)]}
  Codim=3
Full boundary box map, periodicdir={
1
}
  Codim=1
{ 0; [(0,0,1) (1,5,6)]}
{ 4; [(1,0,0) (4,5,1)]}
  Codim=2
{ 4; [(0,0,0) (1,5,1)]}
  Codim=3
Full boundary box map, periodicdir={
2
}
  Codim=1
{ 0; [(0,1,0) (1,5,6)]}
{ 2; [(1,0,0) (4,1,6)]}
  Codim=2
{ 0; [(0,0,0) (1,1,6)]}
  Codim=3
Full boundary box map, periodicdir={
0
1
}
  Codim=1
{ 4; [(0,0,0) (4,5,1)]}
  Codim=2
  Codim=3
--------------------------------------------------
ghosts=(0,0,1)
Nodes (codim=3; 0):
{
}
domainBoundaryBoxes():
Edges (codim=2; 0):
{
}
domainBoundaryBoxes():
Faces (codim=1; 2):
{
[(1,1,0) (3,4,1)]
[(1,1,5) (3,4,6)]
}
domainBoundaryBoxes():
{ 4; [(1,1,0) (3,4,1)]}
Full boundary box map, periodicdir={
}
  Codim=1
{ 4; [(1,1,0) (3,4,1)]}
  Codim=2
  Codim=3
Full boundary box map, periodicdir={
0
}
  Codim=1
{ 4; [(1,1,0) (3,4,1)]}
  Codim=2
  Codim=3
Full boundary box map, periodicdir={
1
}
  Codim=1
{ 4; [(1,1,0) (3,4,1)]}
  Codim=2
  Codim=3
Full boundary box map, periodicdir={
2
}
  Codim=1
  Codim=2
  Codim=3
Full boundary box map, periodicdir={
0
1
}
  Codim=1
{ 4; [(1,1,0) (3,4,1)]}
  Codim=2
  Codim=3
--------------------------------------------------
ghosts=(0,0,0)
Nodes (codim=3; 0):
{
}
domainBoundaryBoxes():
Edges (codim=2; 0):
{
}
domainBoundaryBoxes():
Faces (codim=1; 0):
{
}
domainBoundaryBoxes():
Full boundary box map, periodicdir={
}
  Codim=1
  Codim=2
  Codim=3
Full boundary box map, periodicdir={
0
}
  Codim=1
  Codim=2
  Codim=3
Full boundary box map, periodicdir={
1
}
  Codim=1
  Codim=2
  Codim=3
Full boundary box map, periodicdir={
2
}
  Codim=1
  Codim=2
  Codim=3
Full boundary box map, periodicdir={
0
1
}
  Codim=1
  Codim=2
  Codim=3
-----------------------------------------------------
-----------------------------------------------------

Chombo, hardcoded SPACEDIM=3:
Chombo box (cell-centered convention): [(1,1,1) (2,3,4)]
Chombo domain (cell-centered convention): [(1,1,1) (3,4,5)]
Periodic direction: -1
Codimension 3:
location index 0: [(0,0,0) (0,0,0)]
location index 1: NULL
location index 2: NULL
location index 3: NULL
location index 4: NULL
location index 5: NULL
location index 6: NULL
location index 7: NULL
Codimension 2:
location index 0: [(0,0,1) (0,0,5)]
location index 1: NULL
location index 2: NULL
location index 3: NULL
location index 4: [(0,1,0) (0,4,0)]
location index 5: NULL
location index 6: NULL
location index 7: NULL
location index 8: [(1,0,0) (3,0,0)]
location index 9: NULL
location index 10: NULL
location index 11: NULL
Codimension 1:
location index 0: [(0,1,1) (0,4,5)]
location index 1: NULL
location index 2: [(1,0,1) (3,0,5)]
location index 3: NULL
location index 4: [(1,1,0) (3,4,0)]
location index 5: NULL
Chombo box (cell-centered convention): [(1,1,1) (2,3,4)]
Chombo domain (cell-centered convention): [(1,1,1) (3,4,5)]
Periodic direction: 0
Codimension 3:
location index 0: NULL
location index 1: NULL
location index 2: NULL
location index 3: NULL
location index 4: NULL
location index 5: NULL
location index 6: NULL
location index 7: NULL
Codimension 2:
location index 0: NULL
location index 1: NULL
location index 2: NULL
location index 3: NULL
location index 4: NULL
location index 5: NULL
location index 6: NULL
location index 7: NULL
location index 8: [(0,0,0) (3,0,0)]
location index 9: NULL
location index 10: NULL
location index 11: NULL
Codimension 1:
location index 0: NULL
location index 1: NULL
location index 2: [(0,0,1) (3,0,5)]
location index 3: NULL
location index 4: [(0,1,0) (3,4,0)]
location index 5: NULL
Chombo box (cell-centered convention): [(1,1,1) (2,3,4)]
Chombo domain (cell-centered convention): [(1,1,1) (3,4,5)]
Periodic direction: 1
Codimension 3:
location index 0: NULL
location index 1: NULL
location index 2: NULL
location index 3: NULL
location index 4: NULL
location index 5: NULL
location index 6: NULL
location index 7: NULL
Codimension 2:
location index 0: NULL
location index 1: NULL
location index 2: NULL
location index 3: NULL
location index 4: [(0,0,0) (0,4,0)]
location index 5: NULL
location index 6: NULL
location index 7: NULL
location index 8: NULL
location index 9: NULL
location index 10: NULL
location index 11: NULL
Codimension 1:
location index 0: [(0,0,1) (0,4,5)]
location index 1: NULL
location index 2: NULL
location index 3: NULL
location index 4: [(1,0,0) (3,4,0)]
location index 5: NULL
Chombo box (cell-centered convention): [(1,1,1) (2,3,4)]
Chombo domain (cell-centered convention): [(1,1,1) (3,4,5)]
Periodic direction: 2
Codimension 3:
location index 0: NULL
location index 1: NULL
location index 2: NULL
location index 3: NULL
location index 4: NULL
location index 5: NULL
location index 6: NULL
location index 7: NULL
Codimension 2:
location index 0: [(0,0,0) (0,0,5)]
location index 1: NULL
location index 2: NULL
location index 3: NULL
location index 4: NULL
location index 5: NULL
location index 6: NULL
location index 7: NULL
location index 8: NULL
location index 9: NULL
location index 10: NULL
location index 11: NULL
Codimension 1:
location index 0: [(0,1,0) (0,4,5)]
location index 1: NULL
location index 2: [(1,0,0) (3,0,5)]
location index 3: NULL
location index 4: NULL
location index 5: NULL
codimensionBoundaryTest finished with status 0
      Beginning copyTest ...
      LoFabCoar:
      (3,0,0)      -4.77
      (3,1,0)      -4.77
      (3,2,0)      -4.77
      (3,3,0)      -4.77
      (7,6,0)      0
      (7,7,0)      0
      (7,8,0)      0
      (7,9,0)      0
      (9,4,0)      0
      (9,5,0)      0
      LoFabFine:
      (-1,4,0)      -2.385
      (-1,5,0)      -2.385
      (-1,6,0)      -2.385
      (-1,7,0)      -2.385
      (-1,8,0)      -2.385
      (-1,9,0)      -2.385
      (-1,10,0)      -2.385
      (-1,11,0)      -2.385
      (-1,12,0)      -2.385
      (3,0,0)      -4.77
      (3,1,0)      -4.77
      (3,2,0)      -4.77
      (3,3,0)      -4.77
      (7,6,0)      0
      (7,7,0)      0
      (7,8,0)      0
      (7,9,0)      0
      (9,4,0)      0
      (9,5,0)      0
   copyTest passed all tests
copyTest finished with status 0
      Beginning domainSplitTest ...
domain = [(0,0,0) (99,99,99)]
max box size = 25
boxes = 
[(86,86,86) (99,99,99)]
[(86,86,74) (99,99,85)]
[(86,86,50) (99,99,73)]
[(86,86,36) (99,99,49)]
[(86,86,24) (99,99,35)]
[(86,86,0) (99,99,23)]
[(86,74,86) (99,85,99)]
[(86,74,74) (99,85,85)]
[(86,74,50) (99,85,73)]
[(86,74,36) (99,85,49)]
[(86,74,24) (99,85,35)]
[(86,74,0) (99,85,23)]
[(86,50,86) (99,73,99)]
[(86,50,74) (99,73,85)]
[(86,50,50) (99,73,73)]
[(86,50,36) (99,73,49)]
[(86,50,24) (99,73,35)]
[(86,50,0) (99,73,23)]
[(86,36,86) (99,49,99)]
[(86,36,74) (99,49,85)]
[(86,36,50) (99,49,73)]
[(86,36,36) (99,49,49)]
[(86,36,24) (99,49,35)]
[(86,36,0) (99,49,23)]
[(86,24,86) (99,35,99)]
[(86,24,74) (99,35,85)]
[(86,24,50) (99,35,73)]
[(86,24,36) (99,35,49)]
[(86,24,24) (99,35,35)]
[(86,24,0) (99,35,23)]
[(86,0,86) (99,23,99)]
[(86,0,74) (99,23,85)]
[(86,0,50) (99,23,73)]
[(86,0,36) (99,23,49)]
[(86,0,24) (99,23,35)]
[(86,0,0) (99,23,23)]
[(74,86,86) (85,99,99)]
[(74,86,74) (85,99,85)]
[(74,86,50) (85,99,73)]
[(74,86,36) (85,99,49)]
[(74,86,24) (85,99,35)]
[(74,86,0) (85,99,23)]
[(74,74,86) (85,85,99)]
[(74,74,74) (85,85,85)]
[(74,74,50) (85,85,73)]
[(74,74,36) (85,85,49)]
[(74,74,24) (85,85,35)]
[(74,74,0) (85,85,23)]
[(74,50,86) (85,73,99)]
[(74,50,74) (85,73,85)]
[(74,50,50) (85,73,73)]
[(74,50,36) (85,73,49)]
[(74,50,24) (85,73,35)]
[(74,50,0) (85,73,23)]
[(74,36,86) (85,49,99)]
[(74,36,74) (85,49,85)]
[(74,36,50) (85,49,73)]
[(74,36,36) (85,49,49)]
[(74,36,24) (85,49,35)]
[(74,36,0) (85,49,23)]
[(74,24,86) (85,35,99)]
[(74,24,74) (85,35,85)]
[(74,24,50) (85,35,73)]
[(74,24,36) (85,35,49)]
[(74,24,24) (85,35,35)]
[(74,24,0) (85,35,23)]
[(74,0,86) (85,23,99)]
[(74,0,74) (85,23,85)]
[(74,0,50) (85,23,73)]
[(74,0,36) (85,23,49)]
[(74,0,24) (85,23,35)]
[(74,0,0) (85,23,23)]
[(50,86,86) (73,99,99)]
[(50,86,74) (73,99,85)]
[(50,86,50) (73,99,73)]
[(50,86,36) (73,99,49)]
[(50,86,24) (73,99,35)]
[(50,86,0) (73,99,23)]
[(50,74,86) (73,85,99)]
[(50,74,74) (73,85,85)]
[(50,74,50) (73,85,73)]
[(50,74,36) (73,85,49)]
[(50,74,24) (73,85,35)]
[(50,74,0) (73,85,23)]
[(50,50,86) (73,73,99)]
[(50,50,74) (73,73,85)]
[(50,50,50) (73,73,73)]
[(50,50,36) (73,73,49)]
[(50,50,24) (73,73,35)]
[(50,50,0) (73,73,23)]
[(50,36,86) (73,49,99)]
[(50,36,74) (73,49,85)]
[(50,36,50) (73,49,73)]
[(50,36,36) (73,49,49)]
[(50,36,24) (73,49,35)]
[(50,36,0) (73,49,23)]
[(50,24,86) (73,35,99)]
[(50,24,74) (73,35,85)]
[(50,24,50) (73,35,73)]
[(50,24,36) (73,35,49)]
[(50,24,24) (73,35,35)]
[(50,24,0) (73,35,23)]
[(50,0,86) (73,23,99)]
[(50,0,74) (73,23,85)]
[(50,0,50) (73,23,73)]
[(50,0,36) (73,23,49)]
[(50,0,24) (73,23,35)]
[(50,0,0) (73,23,23)]
[(36,86,86) (49,99,99)]
[(36,86,74) (49,99,85)]
[(36,86,50) (49,99,73)]
[(36,86,36) (49,99,49)]
[(36,86,24) (49,99,35)]
[(36,86,0) (49,99,23)]
[(36,74,86) (49,85,99)]
[(36,74,74) (49,85,85)]
[(36,74,50) (49,85,73)]
[(36,74,36) (49,85,49)]
[(36,74,24) (49,85,35)]
[(36,74,0) (49,85,23)]
[(36,50,86) (49,73,99)]
[(36,50,74) (49,73,85)]
[(36,50,50) (49,73,73)]
[(36,50,36) (49,73,49)]
[(36,50,24) (49,73,35)]
[(36,50,0) (49,73,23)]
[(36,36,86) (49,49,99)]
[(36,36,74) (49,49,85)]
[(36,36,50) (49,49,73)]
[(36,36,36) (49,49,49)]
[(36,36,24) (49,49,35)]
[(36,36,0) (49,49,23)]
[(36,24,86) (49,35,99)]
[(36,24,74) (49,35,85)]
[(36,24,50) (49,35,73)]
[(36,24,36) (49,35,49)]
[(36,24,24) (49,35,35)]
[(36,24,0) (49,35,23)]
[(36,0,86) (49,23,99)]
[(36,0,74) (49,23,85)]
[(36,0,50) (49,23,73)]
[(36,0,36) (49,23,49)]
[(36,0,24) (49,23,35)]
[(36,0,0) (49,23,23)]
[(24,86,86) (35,99,99)]
[(24,86,74) (35,99,85)]
[(24,86,50) (35,99,73)]
[(24,86,36) (35,99,49)]
[(24,86,24) (35,99,35)]
[(24,86,0) (35,99,23)]
[(24,74,86) (35,85,99)]
[(24,74,74) (35,85,85)]
[(24,74,50) (35,85,73)]
[(24,74,36) (35,85,49)]
[(24,74,24) (35,85,35)]
[(24,74,0) (35,85,23)]
[(24,50,86) (35,73,99)]
[(24,50,74) (35,73,85)]
[(24,50,50) (35,73,73)]
[(24,50,36) (35,73,49)]
[(24,50,24) (35,73,35)]
[(24,50,0) (35,73,23)]
[(24,36,86) (35,49,99)]
[(24,36,74) (35,49,85)]
[(24,36,50) (35,49,73)]
[(24,36,36) (35,49,49)]
[(24,36,24) (35,49,35)]
[(24,36,0) (35,49,23)]
[(24,24,86) (35,35,99)]
[(24,24,74) (35,35,85)]
[(24,24,50) (35,35,73)]
[(24,24,36) (35,35,49)]
[(24,24,24) (35,35,35)]
[(24,24,0) (35,35,23)]
[(24,0,86) (35,23,99)]
[(24,0,74) (35,23,85)]
[(24,0,50) (35,23,73)]
[(24,0,36) (35,23,49)]
[(24,0,24) (35,23,35)]
[(24,0,0) (35,23,23)]
[(0,86,86) (23,99,99)]
[(0,86,74) (23,99,85)]
[(0,86,50) (23,99,73)]
[(0,86,36) (23,99,49)]
[(0,86,24) (23,99,35)]
[(0,86,0) (23,99,23)]
[(0,74,86) (23,85,99)]
[(0,74,74) (23,85,85)]
[(0,74,50) (23,85,73)]
[(0,74,36) (23,85,49)]
[(0,74,24) (23,85,35)]
[(0,74,0) (23,85,23)]
[(0,50,86) (23,73,99)]
[(0,50,74) (23,73,85)]
[(0,50,50) (23,73,73)]
[(0,50,36) (23,73,49)]
[(0,50,24) (23,73,35)]
[(0,50,0) (23,73,23)]
[(0,36,86) (23,49,99)]
[(0,36,74) (23,49,85)]
[(0,36,50) (23,49,73)]
[(0,36,36) (23,49,49)]
[(0,36,24) (23,49,35)]
[(0,36,0) (23,49,23)]
[(0,24,86) (23,35,99)]
[(0,24,74) (23,35,85)]
[(0,24,50) (23,35,73)]
[(0,24,36) (23,35,49)]
[(0,24,24) (23,35,35)]
[(0,24,0) (23,35,23)]
[(0,0,86) (23,23,99)]
[(0,0,74) (23,23,85)]
[(0,0,50) (23,23,73)]
[(0,0,36) (23,23,49)]
[(0,0,24) (23,23,35)]
[(0,0,0) (23,23,23)]
box sizes = 
14   14   14   
14   14   12   
14   14   24   
14   14   14   
14   14   12   
14   14   24   
14   12   14   
14   12   12   
14   12   24   
14   12   14   
14   12   12   
14   12   24   
14   24   14   
14   24   12   
14   24   24   
14   24   14   
14   24   12   
14   24   24   
14   14   14   
14   14   12   
14   14   24   
14   14   14   
14   14   12   
14   14   24   
14   12   14   
14   12   12   
14   12   24   
14   12   14   
14   12   12   
14   12   24   
14   24   14   
14   24   12   
14   24   24   
14   24   14   
14   24   12   
14   24   24   
12   14   14   
12   14   12   
12   14   24   
12   14   14   
12   14   12   
12   14   24   
12   12   14   
12   12   12   
12   12   24   
12   12   14   
12   12   12   
12   12   24   
12   24   14   
12   24   12   
12   24   24   
12   24   14   
12   24   12   
12   24   24   
12   14   14   
12   14   12   
12   14   24   
12   14   14   
12   14   12   
12   14   24   
12   12   14   
12   12   12   
12   12   24   
12   12   14   
12   12   12   
12   12   24   
12   24   14   
12   24   12   
12   24   24   
12   24   14   
12   24   12   
12   24   24   
24   14   14   
24   14   12   
24   14   24   
24   14   14   
24   14   12   
24   14   24   
24   12   14   
24   12   12   
24   12   24   
24   12   14   
24   12   12   
24   12   24   
24   24   14   
24   24   12   
24   24   24   
24   24   14   
24   24   12   
24   24   24   
24   14   14   
24   14   12   
24   14   24   
24   14   14   
24   14   12   
24   14   24   
24   12   14   
24   12   12   
24   12   24   
24   12   14   
24   12   12   
24   12   24   
24   24   14   
24   24   12   
24   24   24   
24   24   14   
24   24   12   
24   24   24   
14   14   14   
14   14   12   
14   14   24   
14   14   14   
14   14   12   
14   14   24   
14   12   14   
14   12   12   
14   12   24   
14   12   14   
14   12   12   
14   12   24   
14   24   14   
14   24   12   
14   24   24   
14   24   14   
14   24   12   
14   24   24   
14   14   14   
14   14   12   
14   14   24   
14   14   14   
14   14   12   
14   14   24   
14   12   14   
14   12   12   
14   12   24   
14   12   14   
14   12   12   
14   12   24   
14   24   14   
14   24   12   
14   24   24   
14   24   14   
14   24   12   
14   24   24   
12   14   14   
12   14   12   
12   14   24   
12   14   14   
12   14   12   
12   14   24   
12   12   14   
12   12   12   
12   12   24   
12   12   14   
12   12   12   
12   12   24   
12   24   14   
12   24   12   
12   24   24   
12   24   14   
12   24   12   
12   24   24   
12   14   14   
12   14   12   
12   14   24   
12   14   14   
12   14   12   
12   14   24   
12   12   14   
12   12   12   
12   12   24   
12   12   14   
12   12   12   
12   12   24   
12   24   14   
12   24   12   
12   24   24   
12   24   14   
12   24   12   
12   24   24   
24   14   14   
24   14   12   
24   14   24   
24   14   14   
24   14   12   
24   14   24   
24   12   14   
24   12   12   
24   12   24   
24   12   14   
24   12   12   
24   12   24   
24   24   14   
24   24   12   
24   24   24   
24   24   14   
24   24   12   
24   24   24   
24   14   14   
24   14   12   
24   14   24   
24   14   14   
24   14   12   
24   14   24   
24   12   14   
24   12   12   
24   12   24   
24   12   14   
24   12   12   
24   12   24   
24   24   14   
24   24   12   
24   24   24   
24   24   14   
24   24   12   
24   24   24   
   domainSplitTest domainSplit thin domain test: passed
   domainSplitTest: passed all tests
domainSplitTest finished with status 0
      Beginning fabTest ...
      fabTest: fab::initial setval 1 passed
      fabTest: fab::initial setval 2 passed
      fabTest: fab::setval passed
      fabTest: fab::operator*= passed
      fabTest: fab::operator+= passed
      fabTest: fab::operator-= passed
      fabTest: fab::operator/= passed
      fabTest: fab::norm(0) passed
      fabTest: fab::norm(1) passed
      fabTest: fab::norm(2) passed
      fabTest: fab::dotProduct 1 passed
      fabTest: fab::dotProduct 2 passed
      fabTest: fab aliasing passed
      fabTest: fab::linearIn/Out passed
   fabTest: FArrayBox passed all tests
fabTest finished with status 0
      Beginning gatherTest ...
      testing integer gather 
      loclInt = 42
      correctInt = 42
      allInts[0] = 42
      testing real gather 
      testing vector<int> gather 
      testing vector<Real> gather 
      testing Box gather 
      loclBox = [(0,0,0) (0,0,0)]
      correctBox = [(0,0,0) (0,0,0)]
      allBox[0] = [(0,0,0) (0,0,0)]
      testing vector<Box> gather 
      testing IntVectSet gather 
      IntVectSet test passed.
   gatherTest: passed all tests
gatherTest finished with status 0
      Beginning ivsfabTest ...
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
7.5  
0  
1  
2  
3  
4  
5  
6  
7  
8  
9  
10  
11  
12  
13  
14  
15  
16  
17  
18  
19  
20  
21  
22  
23  
   ivsfabTest: passed all tests
ivsfabTest finished with status 0
(3,4)
(8,9,10,11)
(4.1,5.2,6.3)
multidimTest finished with status 0
      Beginning newIVSTest ...
testIVS
ivs1:
      : IntVects in the IVS are:
      (0,0,0)  (0,1,0)  
ivs2:
      : IntVects in the IVS are:
      (0,0,0)  (0,1,0)  
ivs1 union with ivs2
      : IntVects in the IVS are:
      (0,0,0)  (0,1,0)  
   newIVSTest: passed all tests
newIVSTest finished with status 0
      Beginning scopingTest ...
   scopingTest: passed all tests
scopingTest finished with status 0
      Beginning testBox ...
      test box 1: [(0,0,0) (7,7,7)]
      test box 2: [(12,12,4) (15,15,15)]
      empty null box: [(1,1,1) (0,0,0)]
   box tests passed.
testBox finished with status 0
      Beginning testIntVectSet ...
   testIntVectSet: IntVectSet passed periodic ProblemDomain test
   testIntVectSet: IntVectSet passed the add/remove Box test
   testIntVectSet: IntVectSet passed the intersect/remove Box test
   testIntVectSet: IntVectSet passed the every IntVect in the Box test
   testIntVectSet: IntVectSet passed the disjoint intersection test
   testIntVectSet: IntVectSet passed the remove IntVect test
   testIntVectSet: IntVectSet passed the remove/add IntVect test
   testIntVectSet: IntVectSet passed the union domain test
   testIntVectSet: IntVectSet passed the shift domain test
   testIntVectSet: IntVectSet passed the refine domain test
   testIntVectSet: IntVectSet passed the intersection domain test
   testIntVectSet: IntVectSet passed the intersection tests
   testIntVectSet: IntVectSet passed the TreeIntVectSet intersection domain test
   testIntVectSet: IntVectSet passed the TreeIntVectSet intersection tests
   testIntVectSet: IntVectSet passed the TreeIntVectSet linearization test
   testIntVectSet: IntVectSet passed the TreeIntVectSet union linearization test
   testIntVectSet: IntVectSet passed the empty TreeIntVectSet linearization test
   testIntVectSet passed all tests
testIntVectSet finished with status 0
      Beginning testLoadBalance
      test1: 1 processors, total load 45, efficiency 100%, assignments are
      0{1}->0 1{2}->0 2{3}->0 3{4}->0 4{5}->0 5{6}->0 6{7}->0 7{8}->0 8{9}->0 
      test1: 2 processors, total load 45, efficiency 95%, assignments are
      0{1}->0 1{2}->0 2{3}->1 3{4}->1 4{5}->0 5{6}->0 6{7}->1 7{8}->1 8{9}->0 
      test1: 4 processors, total load 45, efficiency 91%, assignments are
      0{1}->0 1{2}->0 2{3}->1 3{4}->2 4{5}->3 5{6}->3 6{7}->2 7{8}->1 8{9}->0 
   testLoadBalance passed test 1.
      test2: 3 processors, total load 34, efficiency 91%, assignments are
      0{7}->1 1{6}->0 2{5}->2 3{4}->1 4{4}->2 5{3}->2 6{3}->0 7{2}->0 
      test2: 4 processors, total load 34, efficiency 88%, assignments are
      0{7}->0 1{6}->1 2{5}->2 3{4}->3 4{4}->3 5{3}->1 6{3}->2 7{2}->0 
   testLoadBalance passed test 2.
      test3: 3 processors, total load 28, efficiency 90%, assignments are
      0{1}->0 1{1}->2 2{1}->1 3{1}->0 4{1}->2 5{3}->2 6{3}->1 7{1}->1 8{8}->0 9{2}->1 10{1}->2 11{1}->1 12{1}->2 13{1}->1 14{1}->2 15{1}->2 
   testLoadBalance passed test 3.
   testLoadBalance: passed all tests.
testLoadBalance finished with status 0
      Beginning testMeshRefine ...
      Domains --------
      [(0,0,0) (11,11,11)]
      [(0,0,0) (23,23,23)]
      [(0,0,0) (47,47,47)]
      ----------------
      Meshes --------
      ([(0,0,0) (11,11,11)])

      ([(0,0,0) (9,9,9)]
       [(10,4,4) (15,15,15)])

      ([(0,0,0) (19,19,19)]
       [(20,8,8) (31,31,31)])
      ----------------
      testing makePNDs() with Base=1, Top=2, BufferSize=1.  Should return ok.

      [(0,0,0) (11,11,11)] 
      [(0,0,0) (9,9,9)] [(10,4,4) (15,15,15)] 
      [(22,10,10) (29,29,29)] [(18,10,10) (21,17,17)] [(0,0,0) (17,17,17)]       ----------------
   testMeshRefinePND test (buffer=1): passed lower corner == 0  test.

      testing makePNDs() with Base=1, Top=2, BufferSize=2.  Should return ok.

      [(0,0,0) (11,11,11)] 
      [(0,0,0) (9,9,9)] [(10,4,4) (15,15,15)] 
      [(24,12,12) (27,27,27)] [(16,12,12) (23,15,15)] [(0,0,0) (15,15,15)]       ----------------
   testMeshRefinePND test (buffer=2): passed lower corner == 0  test.

      testMeshRefine: testing regrid with Base=0,Top=0, scalar IVS w/ 1 tag.
      testMeshRefine: Should return 1 box on level 1 and one box on level 2
      Tags -----------
      [(2,2,2) (2,2,2)]
      ----------------
      New Meshes --------
      ([(0,0,0) (11,11,11)])

      ([(2,2,2) (7,7,7)])

      ([(8,8,8) (11,11,11)])
      -------------------
   testMeshRefine: regrid function passed single tag, scalar IVS test.

      testMeshRefine: testing regrid() with a circle of tags, FillRatio=0.5.
      testMeshRefine: Should return ok.
      Tags -----------
      [(4,7,7) (4,7,7)]
[(7,4,7) (7,4,7)]
[(6,7,7) (6,7,7)]
[(7,6,7) (7,6,7)]
[(7,7,6) (7,7,6)]
[(5,6,8) (5,6,8)]
[(5,7,9) (5,7,9)]
[(5,7,11) (5,7,11)]
[(6,5,8) (6,5,8)]
[(7,5,9) (7,5,9)]
[(7,5,11) (7,5,11)]
[(6,6,8) (6,6,8)]
[(4,7,13) (4,7,13)]
[(5,6,12) (5,6,12)]
[(6,5,12) (6,5,12)]
[(7,4,13) (7,4,13)]
[(6,6,12) (6,6,12)]
[(6,7,13) (6,7,13)]
[(7,6,13) (7,6,13)]
[(7,7,14) (7,7,14)]
[(3,10,7) (3,10,7)]
[(5,9,7) (5,9,7)]
[(5,10,7) (5,10,7)]
[(5,11,7) (5,11,7)]
[(7,9,5) (7,9,5)]
[(6,8,6) (6,8,6)]
[(6,9,6) (6,9,6)]
[(7,8,6) (7,8,6)]
[(7,10,5) (7,10,5)]
[(7,11,5) (7,11,5)]
[(6,10,6) (6,10,6)]
[(6,11,6) (6,11,6)]
[(4,13,7) (4,13,7)]
[(6,12,6) (6,12,6)]
[(6,13,7) (6,13,7)]
[(7,12,6) (7,12,6)]
[(7,13,6) (7,13,6)]
[(7,14,7) (7,14,7)]
[(3,10,13) (3,10,13)]
[(4,8,8) (4,8,8)]
[(4,9,9) (4,9,9)]
[(5,8,8) (5,8,8)]
[(4,9,11) (4,9,11)]
[(4,11,9) (4,11,9)]
[(4,10,10) (4,10,10)]
[(4,11,11) (4,11,11)]
[(4,8,12) (4,8,12)]
[(5,8,12) (5,8,12)]
[(5,9,13) (5,9,13)]
[(5,10,13) (5,10,13)]
[(5,11,13) (5,11,13)]
[(6,8,14) (6,8,14)]
[(6,9,14) (6,9,14)]
[(7,8,14) (7,8,14)]
[(7,9,15) (7,9,15)]
[(6,10,14) (6,10,14)]
[(6,11,14) (6,11,14)]
[(7,10,15) (7,10,15)]
[(7,11,15) (7,11,15)]
[(4,12,8) (4,12,8)]
[(5,12,8) (5,12,8)]
[(5,13,9) (5,13,9)]
[(5,13,11) (5,13,11)]
[(5,14,8) (5,14,8)]
[(6,14,8) (6,14,8)]
[(6,15,8) (6,15,8)]
[(7,15,9) (7,15,9)]
[(7,15,11) (7,15,11)]
[(4,12,12) (4,12,12)]
[(4,13,13) (4,13,13)]
[(5,12,12) (5,12,12)]
[(5,14,12) (5,14,12)]
[(6,13,13) (6,13,13)]
[(6,12,14) (6,12,14)]
[(7,12,14) (7,12,14)]
[(7,13,14) (7,13,14)]
[(6,14,12) (6,14,12)]
[(6,15,12) (6,15,12)]
[(7,14,13) (7,14,13)]
[(10,3,7) (10,3,7)]
[(9,5,7) (9,5,7)]
[(9,7,5) (9,7,5)]
[(8,6,6) (8,6,6)]
[(8,7,6) (8,7,6)]
[(9,6,6) (9,6,6)]
[(10,5,7) (10,5,7)]
[(11,5,7) (11,5,7)]
[(10,7,5) (10,7,5)]
[(11,7,5) (11,7,5)]
[(10,6,6) (10,6,6)]
[(11,6,6) (11,6,6)]
[(13,4,7) (13,4,7)]
[(12,6,6) (12,6,6)]
[(12,7,6) (12,7,6)]
[(13,6,7) (13,6,7)]
[(13,7,6) (13,7,6)]
[(14,7,7) (14,7,7)]
[(10,3,13) (10,3,13)]
[(8,4,8) (8,4,8)]
[(8,5,8) (8,5,8)]
[(9,4,9) (9,4,9)]
[(9,4,11) (9,4,11)]
[(11,4,9) (11,4,9)]
[(10,4,10) (10,4,10)]
[(11,4,11) (11,4,11)]
[(8,4,12) (8,4,12)]
[(8,5,12) (8,5,12)]
[(9,5,13) (9,5,13)]
[(8,6,14) (8,6,14)]
[(8,7,14) (8,7,14)]
[(9,6,14) (9,6,14)]
[(9,7,15) (9,7,15)]
[(10,5,13) (10,5,13)]
[(11,5,13) (11,5,13)]
[(10,6,14) (10,6,14)]
[(10,7,15) (10,7,15)]
[(11,6,14) (11,6,14)]
[(11,7,15) (11,7,15)]
[(12,4,8) (12,4,8)]
[(12,5,8) (12,5,8)]
[(13,5,9) (13,5,9)]
[(13,5,11) (13,5,11)]
[(14,5,8) (14,5,8)]
[(14,6,8) (14,6,8)]
[(15,6,8) (15,6,8)]
[(15,7,9) (15,7,9)]
[(15,7,11) (15,7,11)]
[(12,4,12) (12,4,12)]
[(12,5,12) (12,5,12)]
[(13,4,13) (13,4,13)]
[(13,6,13) (13,6,13)]
[(12,6,14) (12,6,14)]
[(12,7,14) (12,7,14)]
[(13,7,14) (13,7,14)]
[(14,5,12) (14,5,12)]
[(14,6,12) (14,6,12)]
[(14,7,13) (14,7,13)]
[(15,6,12) (15,6,12)]
[(8,8,5) (8,8,5)]
[(8,9,5) (8,9,5)]
[(9,8,5) (9,8,5)]
[(9,9,5) (9,9,5)]
[(8,10,5) (8,10,5)]
[(8,11,5) (8,11,5)]
[(9,10,5) (9,10,5)]
[(9,11,5) (9,11,5)]
[(10,8,5) (10,8,5)]
[(10,9,5) (10,9,5)]
[(11,8,5) (11,8,5)]
[(11,9,5) (11,9,5)]
[(10,10,4) (10,10,4)]
[(10,11,5) (10,11,5)]
[(11,10,5) (11,10,5)]
[(11,11,5) (11,11,5)]
[(8,12,5) (8,12,5)]
[(9,12,5) (9,12,5)]
[(9,13,5) (9,13,5)]
[(8,13,6) (8,13,6)]
[(8,14,6) (8,14,6)]
[(9,14,6) (9,14,6)]
[(9,15,7) (9,15,7)]
[(10,12,5) (10,12,5)]
[(10,13,5) (10,13,5)]
[(11,12,5) (11,12,5)]
[(11,13,5) (11,13,5)]
[(10,14,6) (10,14,6)]
[(10,15,7) (10,15,7)]
[(11,14,6) (11,14,6)]
[(11,15,7) (11,15,7)]
[(12,8,5) (12,8,5)]
[(12,9,5) (12,9,5)]
[(13,9,5) (13,9,5)]
[(13,8,6) (13,8,6)]
[(12,10,5) (12,10,5)]
[(12,11,5) (12,11,5)]
[(13,10,5) (13,10,5)]
[(13,11,5) (13,11,5)]
[(14,8,6) (14,8,6)]
[(14,9,6) (14,9,6)]
[(15,9,7) (15,9,7)]
[(14,10,6) (14,10,6)]
[(14,11,6) (14,11,6)]
[(15,10,7) (15,10,7)]
[(15,11,7) (15,11,7)]
[(12,12,5) (12,12,5)]
[(12,13,6) (12,13,6)]
[(13,12,6) (13,12,6)]
[(13,13,6) (13,13,6)]
[(12,14,6) (12,14,6)]
[(13,14,7) (13,14,7)]
[(14,12,6) (14,12,6)]
[(14,13,7) (14,13,7)]
[(8,8,15) (8,8,15)]
[(8,9,15) (8,9,15)]
[(9,8,15) (9,8,15)]
[(9,9,15) (9,9,15)]
[(8,10,15) (8,10,15)]
[(8,11,15) (8,11,15)]
[(9,10,15) (9,10,15)]
[(9,11,15) (9,11,15)]
[(10,8,15) (10,8,15)]
[(10,9,15) (10,9,15)]
[(11,8,15) (11,8,15)]
[(11,9,15) (11,9,15)]
[(10,11,15) (10,11,15)]
[(11,10,15) (11,10,15)]
[(11,11,15) (11,11,15)]
[(8,15,8) (8,15,8)]
[(8,12,15) (8,12,15)]
[(8,13,14) (8,13,14)]
[(9,12,15) (9,12,15)]
[(9,13,15) (9,13,15)]
[(8,15,12) (8,15,12)]
[(9,15,13) (9,15,13)]
[(8,14,14) (8,14,14)]
[(9,14,14) (9,14,14)]
[(10,12,15) (10,12,15)]
[(10,13,15) (10,13,15)]
[(11,12,15) (11,12,15)]
[(11,13,15) (11,13,15)]
[(10,15,13) (10,15,13)]
[(11,15,13) (11,15,13)]
[(10,14,14) (10,14,14)]
[(11,14,14) (11,14,14)]
[(15,8,8) (15,8,8)]
[(12,8,15) (12,8,15)]
[(12,9,15) (12,9,15)]
[(13,8,14) (13,8,14)]
[(13,9,15) (13,9,15)]
[(12,10,15) (12,10,15)]
[(12,11,15) (12,11,15)]
[(13,10,15) (13,10,15)]
[(13,11,15) (13,11,15)]
[(15,8,12) (15,8,12)]
[(15,9,13) (15,9,13)]
[(14,8,14) (14,8,14)]
[(14,9,14) (14,9,14)]
[(15,10,13) (15,10,13)]
[(15,11,13) (15,11,13)]
[(14,10,14) (14,10,14)]
[(14,11,14) (14,11,14)]
[(12,15,8) (12,15,8)]
[(13,15,9) (13,15,9)]
[(13,15,11) (13,15,11)]
[(15,12,8) (15,12,8)]
[(15,13,9) (15,13,9)]
[(15,13,11) (15,13,11)]
[(14,14,8) (14,14,8)]
[(14,15,8) (14,15,8)]
[(15,14,8) (15,14,8)]
[(12,12,15) (12,12,15)]
[(12,13,14) (12,13,14)]
[(13,12,14) (13,12,14)]
[(13,13,14) (13,13,14)]
[(12,15,12) (12,15,12)]
[(13,14,13) (13,14,13)]
[(12,14,14) (12,14,14)]
[(14,13,13) (14,13,13)]
[(15,12,12) (15,12,12)]
[(14,12,14) (14,12,14)]
[(14,14,12) (14,14,12)]
[(14,15,12) (14,15,12)]
[(15,14,12) (15,14,12)]
[(10,10,16) (10,10,16)]
[(7,16,7) (7,16,7)]
[(7,16,13) (7,16,13)]
[(10,17,7) (10,17,7)]
[(13,16,7) (13,16,7)]
[(8,16,8) (8,16,8)]
[(9,16,9) (9,16,9)]
[(9,16,11) (9,16,11)]
[(11,16,9) (11,16,9)]
[(10,16,10) (10,16,10)]
[(11,16,11) (11,16,11)]
[(8,16,12) (8,16,12)]
[(10,17,13) (10,17,13)]
[(12,16,8) (12,16,8)]
[(12,16,12) (12,16,12)]
[(13,16,13) (13,16,13)]
[(16,7,7) (16,7,7)]
[(16,7,13) (16,7,13)]
[(17,10,7) (17,10,7)]
[(16,13,7) (16,13,7)]
[(16,8,8) (16,8,8)]
[(16,9,9) (16,9,9)]
[(16,9,11) (16,9,11)]
[(16,11,9) (16,11,9)]
[(16,10,10) (16,10,10)]
[(16,11,11) (16,11,11)]
[(16,8,12) (16,8,12)]
[(17,10,13) (17,10,13)]
[(16,12,8) (16,12,8)]
[(16,12,12) (16,12,12)]
[(16,13,13) (16,13,13)]
      ----------------
      New Meshes --------
      ([(0,0,0) (11,11,11)])

      ([(0,0,0) (23,23,23)])

      ([(24,20,30) (27,25,31)]
       [(20,20,30) (23,27,33)]
       [(28,28,24) (31,31,25)]
       [(32,24,24) (33,27,27)]
       [(30,24,24) (31,25,25)]
       [(28,24,26) (29,27,29)]
       [(34,20,26) (35,21,27)]
       [(28,20,26) (31,23,29)]
       [(30,26,22) (31,27,23)]
       [(32,20,20) (33,23,23)]
       [(26,32,26) (27,33,27)]
       [(24,28,26) (27,29,29)]
       [(20,34,26) (21,35,27)]
       [(20,28,26) (23,31,29)]
       [(24,24,28) (27,27,29)]
       [(26,30,22) (27,31,23)]
       [(24,30,24) (25,33,25)]
       [(20,32,20) (23,33,23)]
       [(30,26,16) (31,29,19)]
       [(32,26,14) (33,27,15)]
       [(28,26,14) (29,31,17)]
       [(32,22,16) (33,25,19)]
       [(34,20,14) (35,21,15)]
       [(30,22,14) (31,25,17)]
       [(28,22,12) (29,25,13)]
       [(28,20,12) (31,21,15)]
       [(26,30,18) (27,31,19)]
       [(24,30,16) (25,33,17)]
       [(22,32,18) (23,33,19)]
       [(26,32,14) (27,33,15)]
       [(24,28,12) (27,29,15)]
       [(20,34,14) (21,35,15)]
       [(20,28,12) (23,31,15)]
       [(24,24,12) (27,27,13)]
       [(24,20,10) (27,25,11)]
       [(20,20,8) (23,27,11)]
       [(30,18,26) (31,19,27)]
       [(32,14,26) (33,15,27)]
       [(26,16,28) (29,19,31)]
       [(26,14,26) (29,15,29)]
       [(32,16,22) (33,19,25)]
       [(30,16,24) (31,17,25)]
       [(30,14,22) (31,15,23)]
       [(28,10,24) (31,13,25)]
       [(26,8,26) (27,13,27)]
       [(26,10,22) (27,11,23)]
       [(20,12,28) (25,19,31)]
       [(24,8,24) (25,11,25)]
       [(22,10,26) (23,11,27)]
       [(20,6,26) (21,11,27)]
       [(20,8,20) (23,9,23)]
       [(32,16,16) (33,19,19)]
       [(30,16,16) (31,17,17)]
       [(30,18,14) (31,19,15)]
       [(30,14,18) (31,15,19)]
       [(32,14,14) (33,15,15)]
       [(28,14,14) (29,15,15)]
       [(26,16,10) (29,19,13)]
       [(26,14,12) (27,15,13)]
       [(28,10,16) (31,13,17)]
       [(26,10,18) (27,11,19)]
       [(26,8,14) (27,13,15)]
       [(20,12,10) (25,19,13)]
       [(24,8,16) (25,11,17)]
       [(22,8,18) (23,9,19)]
       [(22,10,14) (23,11,15)]
       [(20,6,14) (21,11,15)]
       [(16,24,28) (19,29,31)]
       [(12,24,28) (15,27,29)]
       [(12,20,28) (19,23,31)]
       [(18,30,26) (19,31,27)]
       [(16,30,24) (17,33,25)]
       [(18,32,22) (19,33,23)]
       [(14,32,26) (15,33,27)]
       [(12,30,24) (13,31,25)]
       [(14,30,22) (15,31,23)]
       [(14,28,26) (15,29,27)]
       [(12,26,24) (13,29,27)]
       [(10,28,24) (11,29,25)]
       [(8,26,26) (9,27,27)]
       [(10,26,22) (11,27,23)]
       [(8,24,24) (11,25,25)]
       [(6,20,26) (11,23,27)]
       [(8,20,20) (9,23,23)]
       [(18,32,18) (19,33,19)]
       [(16,30,16) (17,33,17)]
       [(18,30,14) (19,31,15)]
       [(12,30,16) (15,31,19)]
       [(14,32,14) (15,33,15)]
       [(14,28,14) (15,29,15)]
       [(12,26,14) (13,29,17)]
       [(16,24,10) (19,29,13)]
       [(12,24,12) (15,27,13)]
       [(12,20,10) (19,23,13)]
       [(10,26,16) (11,29,19)]
       [(8,26,14) (9,27,15)]
       [(8,24,16) (11,25,17)]
       [(8,22,18) (9,23,19)]
       [(6,20,14) (11,23,15)]
       [(16,14,28) (19,19,31)]
       [(18,10,26) (19,13,29)]
       [(16,12,28) (17,13,29)]
       [(12,16,28) (15,19,31)]
       [(14,12,26) (15,15,29)]
       [(12,14,26) (13,15,27)]
       [(10,18,26) (11,19,27)]
       [(8,14,26) (9,15,27)]
       [(14,8,26) (15,9,27)]
       [(18,8,22) (19,9,23)]
       [(16,8,24) (17,11,25)]
       [(10,16,24) (11,17,25)]
       [(8,16,22) (9,19,25)]
       [(14,10,22) (15,11,23)]
       [(12,10,24) (13,13,25)]
       [(10,12,22) (11,15,25)]
       [(18,8,18) (19,9,19)]
       [(16,8,16) (17,11,17)]
       [(10,16,16) (11,17,17)]
       [(8,16,16) (9,19,19)]
       [(14,10,18) (15,11,19)]
       [(12,10,16) (13,13,17)]
       [(10,12,16) (11,15,19)]
       [(16,14,10) (19,19,13)]
       [(18,10,12) (19,13,15)]
       [(16,12,12) (17,13,13)]
       [(12,16,10) (15,19,13)]
       [(14,12,12) (15,15,15)]
       [(12,14,14) (13,15,15)]
       [(10,18,14) (11,19,15)]
       [(8,14,14) (9,15,15)]
       [(14,8,14) (15,9,15)])
      -------------------
   testMeshRefine: BRMeshRefine::regrid passed circle-tags test.

      testMeshRefine: testing regrid() with a circle of tags, FillRatio=0.5, baseLevel = 0, blockFactor =4.
      testMeshRefine: Should return ok.
      Tags -----------
      [(4,7,7) (4,7,7)]
[(7,4,7) (7,4,7)]
[(6,7,7) (6,7,7)]
[(7,6,7) (7,6,7)]
[(7,7,6) (7,7,6)]
[(5,6,8) (5,6,8)]
[(5,7,9) (5,7,9)]
[(5,7,11) (5,7,11)]
[(6,5,8) (6,5,8)]
[(7,5,9) (7,5,9)]
[(7,5,11) (7,5,11)]
[(6,6,8) (6,6,8)]
[(4,7,13) (4,7,13)]
[(5,6,12) (5,6,12)]
[(6,5,12) (6,5,12)]
[(7,4,13) (7,4,13)]
[(6,6,12) (6,6,12)]
[(6,7,13) (6,7,13)]
[(7,6,13) (7,6,13)]
[(7,7,14) (7,7,14)]
[(3,10,7) (3,10,7)]
[(5,9,7) (5,9,7)]
[(5,10,7) (5,10,7)]
[(5,11,7) (5,11,7)]
[(7,9,5) (7,9,5)]
[(6,8,6) (6,8,6)]
[(6,9,6) (6,9,6)]
[(7,8,6) (7,8,6)]
[(7,10,5) (7,10,5)]
[(7,11,5) (7,11,5)]
[(6,10,6) (6,10,6)]
[(6,11,6) (6,11,6)]
[(4,13,7) (4,13,7)]
[(6,12,6) (6,12,6)]
[(6,13,7) (6,13,7)]
[(7,12,6) (7,12,6)]
[(7,13,6) (7,13,6)]
[(7,14,7) (7,14,7)]
[(3,10,13) (3,10,13)]
[(4,8,8) (4,8,8)]
[(4,9,9) (4,9,9)]
[(5,8,8) (5,8,8)]
[(4,9,11) (4,9,11)]
[(4,11,9) (4,11,9)]
[(4,10,10) (4,10,10)]
[(4,11,11) (4,11,11)]
[(4,8,12) (4,8,12)]
[(5,8,12) (5,8,12)]
[(5,9,13) (5,9,13)]
[(5,10,13) (5,10,13)]
[(5,11,13) (5,11,13)]
[(6,8,14) (6,8,14)]
[(6,9,14) (6,9,14)]
[(7,8,14) (7,8,14)]
[(7,9,15) (7,9,15)]
[(6,10,14) (6,10,14)]
[(6,11,14) (6,11,14)]
[(7,10,15) (7,10,15)]
[(7,11,15) (7,11,15)]
[(4,12,8) (4,12,8)]
[(5,12,8) (5,12,8)]
[(5,13,9) (5,13,9)]
[(5,13,11) (5,13,11)]
[(5,14,8) (5,14,8)]
[(6,14,8) (6,14,8)]
[(6,15,8) (6,15,8)]
[(7,15,9) (7,15,9)]
[(7,15,11) (7,15,11)]
[(4,12,12) (4,12,12)]
[(4,13,13) (4,13,13)]
[(5,12,12) (5,12,12)]
[(5,14,12) (5,14,12)]
[(6,13,13) (6,13,13)]
[(6,12,14) (6,12,14)]
[(7,12,14) (7,12,14)]
[(7,13,14) (7,13,14)]
[(6,14,12) (6,14,12)]
[(6,15,12) (6,15,12)]
[(7,14,13) (7,14,13)]
[(10,3,7) (10,3,7)]
[(9,5,7) (9,5,7)]
[(9,7,5) (9,7,5)]
[(8,6,6) (8,6,6)]
[(8,7,6) (8,7,6)]
[(9,6,6) (9,6,6)]
[(10,5,7) (10,5,7)]
[(11,5,7) (11,5,7)]
[(10,7,5) (10,7,5)]
[(11,7,5) (11,7,5)]
[(10,6,6) (10,6,6)]
[(11,6,6) (11,6,6)]
[(13,4,7) (13,4,7)]
[(12,6,6) (12,6,6)]
[(12,7,6) (12,7,6)]
[(13,6,7) (13,6,7)]
[(13,7,6) (13,7,6)]
[(14,7,7) (14,7,7)]
[(10,3,13) (10,3,13)]
[(8,4,8) (8,4,8)]
[(8,5,8) (8,5,8)]
[(9,4,9) (9,4,9)]
[(9,4,11) (9,4,11)]
[(11,4,9) (11,4,9)]
[(10,4,10) (10,4,10)]
[(11,4,11) (11,4,11)]
[(8,4,12) (8,4,12)]
[(8,5,12) (8,5,12)]
[(9,5,13) (9,5,13)]
[(8,6,14) (8,6,14)]
[(8,7,14) (8,7,14)]
[(9,6,14) (9,6,14)]
[(9,7,15) (9,7,15)]
[(10,5,13) (10,5,13)]
[(11,5,13) (11,5,13)]
[(10,6,14) (10,6,14)]
[(10,7,15) (10,7,15)]
[(11,6,14) (11,6,14)]
[(11,7,15) (11,7,15)]
[(12,4,8) (12,4,8)]
[(12,5,8) (12,5,8)]
[(13,5,9) (13,5,9)]
[(13,5,11) (13,5,11)]
[(14,5,8) (14,5,8)]
[(14,6,8) (14,6,8)]
[(15,6,8) (15,6,8)]
[(15,7,9) (15,7,9)]
[(15,7,11) (15,7,11)]
[(12,4,12) (12,4,12)]
[(12,5,12) (12,5,12)]
[(13,4,13) (13,4,13)]
[(13,6,13) (13,6,13)]
[(12,6,14) (12,6,14)]
[(12,7,14) (12,7,14)]
[(13,7,14) (13,7,14)]
[(14,5,12) (14,5,12)]
[(14,6,12) (14,6,12)]
[(14,7,13) (14,7,13)]
[(15,6,12) (15,6,12)]
[(8,8,5) (8,8,5)]
[(8,9,5) (8,9,5)]
[(9,8,5) (9,8,5)]
[(9,9,5) (9,9,5)]
[(8,10,5) (8,10,5)]
[(8,11,5) (8,11,5)]
[(9,10,5) (9,10,5)]
[(9,11,5) (9,11,5)]
[(10,8,5) (10,8,5)]
[(10,9,5) (10,9,5)]
[(11,8,5) (11,8,5)]
[(11,9,5) (11,9,5)]
[(10,10,4) (10,10,4)]
[(10,11,5) (10,11,5)]
[(11,10,5) (11,10,5)]
[(11,11,5) (11,11,5)]
[(8,12,5) (8,12,5)]
[(9,12,5) (9,12,5)]
[(9,13,5) (9,13,5)]
[(8,13,6) (8,13,6)]
[(8,14,6) (8,14,6)]
[(9,14,6) (9,14,6)]
[(9,15,7) (9,15,7)]
[(10,12,5) (10,12,5)]
[(10,13,5) (10,13,5)]
[(11,12,5) (11,12,5)]
[(11,13,5) (11,13,5)]
[(10,14,6) (10,14,6)]
[(10,15,7) (10,15,7)]
[(11,14,6) (11,14,6)]
[(11,15,7) (11,15,7)]
[(12,8,5) (12,8,5)]
[(12,9,5) (12,9,5)]
[(13,9,5) (13,9,5)]
[(13,8,6) (13,8,6)]
[(12,10,5) (12,10,5)]
[(12,11,5) (12,11,5)]
[(13,10,5) (13,10,5)]
[(13,11,5) (13,11,5)]
[(14,8,6) (14,8,6)]
[(14,9,6) (14,9,6)]
[(15,9,7) (15,9,7)]
[(14,10,6) (14,10,6)]
[(14,11,6) (14,11,6)]
[(15,10,7) (15,10,7)]
[(15,11,7) (15,11,7)]
[(12,12,5) (12,12,5)]
[(12,13,6) (12,13,6)]
[(13,12,6) (13,12,6)]
[(13,13,6) (13,13,6)]
[(12,14,6) (12,14,6)]
[(13,14,7) (13,14,7)]
[(14,12,6) (14,12,6)]
[(14,13,7) (14,13,7)]
[(8,8,15) (8,8,15)]
[(8,9,15) (8,9,15)]
[(9,8,15) (9,8,15)]
[(9,9,15) (9,9,15)]
[(8,10,15) (8,10,15)]
[(8,11,15) (8,11,15)]
[(9,10,15) (9,10,15)]
[(9,11,15) (9,11,15)]
[(10,8,15) (10,8,15)]
[(10,9,15) (10,9,15)]
[(11,8,15) (11,8,15)]
[(11,9,15) (11,9,15)]
[(10,11,15) (10,11,15)]
[(11,10,15) (11,10,15)]
[(11,11,15) (11,11,15)]
[(8,15,8) (8,15,8)]
[(8,12,15) (8,12,15)]
[(8,13,14) (8,13,14)]
[(9,12,15) (9,12,15)]
[(9,13,15) (9,13,15)]
[(8,15,12) (8,15,12)]
[(9,15,13) (9,15,13)]
[(8,14,14) (8,14,14)]
[(9,14,14) (9,14,14)]
[(10,12,15) (10,12,15)]
[(10,13,15) (10,13,15)]
[(11,12,15) (11,12,15)]
[(11,13,15) (11,13,15)]
[(10,15,13) (10,15,13)]
[(11,15,13) (11,15,13)]
[(10,14,14) (10,14,14)]
[(11,14,14) (11,14,14)]
[(15,8,8) (15,8,8)]
[(12,8,15) (12,8,15)]
[(12,9,15) (12,9,15)]
[(13,8,14) (13,8,14)]
[(13,9,15) (13,9,15)]
[(12,10,15) (12,10,15)]
[(12,11,15) (12,11,15)]
[(13,10,15) (13,10,15)]
[(13,11,15) (13,11,15)]
[(15,8,12) (15,8,12)]
[(15,9,13) (15,9,13)]
[(14,8,14) (14,8,14)]
[(14,9,14) (14,9,14)]
[(15,10,13) (15,10,13)]
[(15,11,13) (15,11,13)]
[(14,10,14) (14,10,14)]
[(14,11,14) (14,11,14)]
[(12,15,8) (12,15,8)]
[(13,15,9) (13,15,9)]
[(13,15,11) (13,15,11)]
[(15,12,8) (15,12,8)]
[(15,13,9) (15,13,9)]
[(15,13,11) (15,13,11)]
[(14,14,8) (14,14,8)]
[(14,15,8) (14,15,8)]
[(15,14,8) (15,14,8)]
[(12,12,15) (12,12,15)]
[(12,13,14) (12,13,14)]
[(13,12,14) (13,12,14)]
[(13,13,14) (13,13,14)]
[(12,15,12) (12,15,12)]
[(13,14,13) (13,14,13)]
[(12,14,14) (12,14,14)]
[(14,13,13) (14,13,13)]
[(15,12,12) (15,12,12)]
[(14,12,14) (14,12,14)]
[(14,14,12) (14,14,12)]
[(14,15,12) (14,15,12)]
[(15,14,12) (15,14,12)]
[(10,10,16) (10,10,16)]
[(7,16,7) (7,16,7)]
[(7,16,13) (7,16,13)]
[(10,17,7) (10,17,7)]
[(13,16,7) (13,16,7)]
[(8,16,8) (8,16,8)]
[(9,16,9) (9,16,9)]
[(9,16,11) (9,16,11)]
[(11,16,9) (11,16,9)]
[(10,16,10) (10,16,10)]
[(11,16,11) (11,16,11)]
[(8,16,12) (8,16,12)]
[(10,17,13) (10,17,13)]
[(12,16,8) (12,16,8)]
[(12,16,12) (12,16,12)]
[(13,16,13) (13,16,13)]
[(16,7,7) (16,7,7)]
[(16,7,13) (16,7,13)]
[(17,10,7) (17,10,7)]
[(16,13,7) (16,13,7)]
[(16,8,8) (16,8,8)]
[(16,9,9) (16,9,9)]
[(16,9,11) (16,9,11)]
[(16,11,9) (16,11,9)]
[(16,10,10) (16,10,10)]
[(16,11,11) (16,11,11)]
[(16,8,12) (16,8,12)]
[(17,10,13) (17,10,13)]
[(16,12,8) (16,12,8)]
[(16,12,12) (16,12,12)]
[(16,13,13) (16,13,13)]
      ----------------
      New Meshes --------
      ([(0,0,0) (11,11,11)])

      ([(0,0,0) (19,19,19)])

      ([(16,28,24) (31,35,31)]
       [(28,8,24) (35,27,31)]
       [(16,16,28) (27,27,35)]
       [(20,4,24) (27,15,31)]
       [(16,8,24) (19,15,31)]
       [(8,24,24) (15,35,31)]
       [(8,16,24) (15,23,31)]
       [(4,20,24) (7,23,27)]
       [(8,8,24) (15,15,31)]
       [(28,24,16) (35,31,23)]
       [(24,28,16) (27,35,23)]
       [(28,24,12) (35,27,15)]
       [(24,24,8) (27,35,15)]
       [(28,16,16) (35,23,23)]
       [(24,16,8) (35,23,15)]
       [(24,8,12) (35,15,23)]
       [(16,28,12) (23,35,23)]
       [(16,8,16) (23,11,23)]
       [(16,4,8) (23,27,15)]
       [(8,24,12) (15,35,23)]
       [(8,16,16) (11,23,23)]
       [(4,16,8) (15,23,15)]
       [(8,8,12) (15,15,23)])
      -------------------
   testMeshRefine: BRMeshRefine::regrid passed circle-tags test.

      Testing negative box indices

      Domains --------------
      [(-4,-4,-4) (9,9,9)]
      [(-8,-8,-8) (19,19,19)]
      [(-16,-16,-16) (39,39,39)]
      ----------------------
      Meshes ---------------

      ([(-4,-4,-4) (9,9,9)])

      ([(-4,-4,-4) (7,7,7)]
       [(8,2,2) (13,13,13)])

      ([(-8,-8,-8) (15,15,15)]
       [(16,4,4) (27,27,27)])

      ----------------------
      New Meshes --------
      [(-4,-4,-4) (9,9,9)] 
      [(-4,-4,-4) (7,7,7)] [(8,2,2) (13,13,13)] 
      [(20,8,8) (23,23,23)] [(12,8,8) (19,11,11)] [(-4,-4,-4) (11,11,11)]       ----------------
   testMeshRefine negative lower corner test (buffer=2): passed lower corner = -4  test.
   testMeshRefine variable nRef (4,2) test: passed
   testMeshRefine: passed all tests status = 0
testMeshRefine finished with status 0
      Beginning testParmParse ...
      testParmParse: testing query functions
      ParmParse dumpTable() before testQuery():
(N,1)            foo1 ::  (=,1)
(N,1)            foo2 ::  (=,2.25)
(N,1)            foo2 ::  (=,2.5)
(N,1)            foo3 ::  (=,3)
(N,3)            foo4 ::  (=,4) (=,5) (=,6)
(N,1)            foo5 ::  (=,hello)
(N,3)            foo6 ::  (=,man) (=,plan) (=,canal)
(N,3)            foo7 ::  (=,7) (=,8) (=,9)
(N,1)        foobool1 ::  (=,true)
(N,1)        foobool2 ::  (=,1)
(N,1)        foobool3 ::  (=,false)
(N,1)        foobool4 ::  (=,0)
(N,1)        foobool5 ::  (=,TRUE)
(N,1)        foobool6 ::  (=,FALSE)
      testParmParse: query int foo1 = 1
      testParmParse: query Real foo2 = 2.5
      testParmParse: std::string pp.countname(foo2) = 2
      testParmParse: query Real foo3 = 3
      testParmParse: queryarr std::vector<Real> foo4 = 
      [0] = 4
      [1] = 5
      [2] = 6
      testParmParse: query std::string foo5 = 'hello'
      testParmParse: queryarr std::vector<std::string> foo6 =
      [0] = 'man'
      [1] = 'plan'
      [2] = 'canal'
      testParmParse: queryarr std::vector<int> foo7 =
      [0] = 7
      [1] = 8
      [2] = 9
      testParmParse: query foobool1: input=true,  expected result true,  result = true
      testParmParse: query foobool2: input=1,     expected result true,  result = true
      testParmParse: query foobool3: input=false, expected result false, result = false
      testParmParse: query foobool4: input=0,     expected result false, result = false
      testParmParse: query foobool5: input=TRUE,  expected result true,  result = true
      testParmParse: query foobool6: input=FALSE, expected result false, result = false
      testParmParse: testing get functions
      ParmParse dumpTable() before testGet():
(N,1)            foo1 ::  (=,1)
(N,1)            foo2 ::  (=,2.25)
(N,1)            foo2 ::  (=,2.5)
(N,1)            foo3 ::  (=,3)
(N,3)            foo4 ::  (=,4) (=,5) (=,6)
(N,1)            foo5 ::  (=,hello)
(N,3)            foo6 ::  (=,man) (=,plan) (=,canal)
(N,3)            foo7 ::  (=,7) (=,8) (=,9)
(N,1)        foobool1 ::  (=,true)
(N,1)        foobool2 ::  (=,1)
(N,1)        foobool3 ::  (=,false)
(N,1)        foobool4 ::  (=,0)
(N,1)        foobool5 ::  (=,TRUE)
(N,1)        foobool6 ::  (=,FALSE)
      testParmParse: get int foo1 = 1
      testParmParse: get Real foo2 = 2.5
      testParmParse: std::string pp.countname(foo2) = 2
      testParmParse: get Real foo3 = 3
      testParmParse: queryarr std::vector<Real> foo4 = 
      [0] = 4
      [1] = 5
      [2] = 6
      testParmParse: get std::string foo5 = 'hello'
      testParmParse: getarr std::vector<std::string> foo6 =
      [0] = 'man'
      [1] = 'plan'
      [2] = 'canal'
      testParmParse: getarr std::vector<int> foo7 =
      [0] = 7
      [1] = 8
      [2] = 9
   testParmParse: ParmParse tests passed.
testParmParse finished with status 0
   testPeriodic: passed all tests status = 0
testPeriodic finished with status 0
      Beginning testRealVect ...
   testRealVect: RealVect passed the operator/(RV,R) test
   testRealVect: RealVect passed the operator/(R,RV) test
   testRealVect: RealVect passed the operator/(RV,RV) test
   testRealVect passed all tests
testRealVect finished with status 0
      Beginning testTreeIntVectSet ...

      testTreeIntVectSet passed.
testTreeIntVectSet finished with status 0
   Beginning testComplex ...
      before: c = (123.457,765.432)
      after: c = (765.432,123.457)
   testComplex: passed all tests, status = 0
test_complex finished with status 0
 Testing class pout
  testing accessors and manipulators ... 2 passed.
  testing serial pout() is std::cout ... passed.
  testing that pout() is initialized in good state ... 4 passed.
  testing that pout() works ... ***_this_is_test_line_1_***
5 passed.
 Completed 12 tests, all passed.
test_parstream finished with status 0
Entered directory ./AMRTools
      Beginning quadCFInterpTest ...
      dblCoar:
      DisjointBoxLayout closed
[(0,0,0) (7,15,15)][0] # [(8,0,0) (15,7,15)][0] # [(8,8,0) (15,15,15)][0] # 

      dblFine:
      DisjointBoxLayout closed
[(0,8,0) (15,25,31)][0] # [(8,0,0) (19,7,31)][0] # [(16,12,0) (23,19,31)][0] # [(20,8,0) (31,11,31)][0]


   quadCFInterpTest: passed. 
quadCFInterpTest finished with status 0
      Beginning testPWL ...
      refinement ratio = 2
      coarse problem domain = [(0,0,0) (11,11,3)]
      fine problem domain = [(0,0,0) (23,23,7)]
      num coarse grids = 2
      coarse grids: 
      0: [(0,0,0) (5,9,3)]
      1: [(6,2,0) (11,11,3)]
      num fine grids = 3
      fine grids: 
      0: [(2,4,0) (7,11,7)]
      1: [(6,12,0) (23,17,7)]
      2: [(20,6,0) (23,11,7)]
      num comps = 1
      interp radius = 1
      time interp coef = 0.25
      data  sum = 55950.5
      error sum = 4.24885e-14
   testPWL: piecewise linear coarse-fine interpolation test passed.
   testPWL passed.
testPWL finished with status 0
   testPeriodic: passed all tests status = 0
testPeriodic finished with status 0
Entered directory ./AMRElliptic
Dirichlet bcs in low direction for side 0
Dirichlet bcs in high direction for side 0
Dirichlet bcs in low direction for side 1
Dirichlet bcs in high direction for side 1
Dirichlet bcs in low direction for side 2
Dirichlet bcs in high direction for side 2
 rhono  = 0.75 rno  = 0.5 iprob  = 1
 ilev = 0 dom = [(0,0,0) (31,31,31)], 0 0 0 dx  = 0.03125
 rhono  = 0.75 rno  = 0.5 iprob  = 1
 ilev = 0 dom = [(0,0,0) (31,31,31)], 0 0 0 dx  = 0.03125
 ilev = 1 dom = [(0,0,0) (63,63,63)], 0 0 0 dx  = 0.015625
 rhono  = 0.75 rno  = 0.5 iprob  = 1
 ilev = 0 dom = [(0,0,0) (31,31,31)], 0 0 0 dx  = 0.03125
 ilev = 1 dom = [(0,0,0) (63,63,63)], 0 0 0 dx  = 0.015625
 ilev = 2 dom = [(0,0,0) (127,127,127)], 0 0 0 dx  = 0.0078125
Component 0,  Sum(RHS) = 0.078438
    AMRMultiGrid:: iteration = 0, error norm = 4.06323e+06
    BiCGStab:: initial Residual norm = 129655
    BiCGStab:: 4 iterations, final Residual norm = 0.00236366
    BiCGStab:: initial Residual norm = 10753
    BiCGStab:: 4 iterations, final Residual norm = 0.00334067
    BiCGStab:: initial Residual norm = 2.65685e+06
    BiCGStab:: 4 iterations, final Residual norm = 0.125254
    BiCGStab:: initial Residual norm = 227012
    BiCGStab:: 4 iterations, final Residual norm = 0.0118629
    BiCGStab:: initial Residual norm = 5.55214e+07
    BiCGStab:: 4 iterations, final Residual norm = 3.63597
    BiCGStab:: initial Residual norm = 4.81798e+06
    BiCGStab:: 4 iterations, final Residual norm = 0.111299
    BiCGStab:: initial Residual norm = 1.18575e+09
    BiCGStab:: 4 iterations, final Residual norm = 94.5177
    BiCGStab:: initial Residual norm = 1.03206e+08
    BiCGStab:: 4 iterations, final Residual norm = 100.227
    BiCGStab:: initial Residual norm = 2.55958e+10
    BiCGStab:: 4 iterations, final Residual norm = 1203.42
    BiCGStab:: initial Residual norm = 2.23018e+09
    BiCGStab:: 4 iterations, final Residual norm = 1495.16
    AMRMultiGrid:: iteration = 5, error norm = 1.9344e+12
    AMRMultiGrid:: WARNING: Exit because of solver hang
AMRSolver, lBase = 0
initial max(residual[0]) = 4.063232003376e+06
 AMRSolver iteration #  1: Max(res[0]) = 2.338137351947e+05
 AMRSolver iteration #  2: Max(res[0]) = 5.303435010333e+03
 AMRSolver iteration #  3: Max(res[0]) = 2.019775403364e+02
 AMRSolver iteration #  4: Max(res[0]) = 1.448030578756e+01
 AMRSolver iteration #  5: Max(res[0]) = 4.159599930971e-01
 AMRSolver iteration #  6: Max(res[0]) = 8.449993195001e-03
 AMRSolver iteration #  7: Max(res[0]) = 5.547444501869e-04
 AMRSolver iteration #  8: Max(res[0]) = 1.687900189754e-05
 AMRSolver iteration #  9: Max(res[0]) = 3.518822984661e-07
 AMRSolver iteration #  10: Max(res[0]) = 2.422481742981e-08
 AMRSolver iteration #  11: Max(res[0]) = 7.980745231340e-10
AMRSolver: reached maximum number of 11 iterations, final max(res)[0] = 7.980745231340e-10
testPoisson finished with status 0
Entered directory ./AMRTimeDependent
      Beginning testAMR ...
AMRDerivedClass default constructor
AMRDerivedClass::define 0
AMRDerivedClass default constructor
AMRDerivedClass::define 1
AMRDerivedClass default constructor
AMRDerivedClass::define 2
AMRDerivedClass default constructor
AMRDerivedClass::define 3
AMRDerivedClass::initialGrid 0
AMRDerivedClass::loadBalance: procesor map: 
0: 0  

[(0,0,0) (3,3,3)]
AMRDerivedClass::initialData 0
AMRDerivedClass::tagCellsInit 0
AMRDerivedClass::initialGrid 0
AMRDerivedClass::loadBalance: procesor map: 
0: 0  

[(0,0,0) (3,3,3)]
AMRDerivedClass::initialGrid 1
AMRDerivedClass::loadBalance: procesor map: 
0: 0  
1: 0  
2: 0  
3: 0  
4: 0  
5: 0  

[(0,0,0) (1,1,1)]
[(2,2,2) (3,5,5)]
[(4,2,2) (5,3,5)]
[(4,4,2) (5,5,3)]
[(4,4,4) (5,5,5)]
[(6,6,6) (7,7,7)]
AMRDerivedClass::initialData 0
AMRDerivedClass::initialData 1
AMRDerivedClass::tagCellsInit 0
AMRDerivedClass::tagCellsInit 1
AMRDerivedClass::initialGrid 0
AMRDerivedClass::loadBalance: procesor map: 
0: 0  

[(0,0,0) (3,3,3)]
AMRDerivedClass::initialGrid 1
AMRDerivedClass::loadBalance: procesor map: 
0: 0  

[(0,0,0) (7,7,7)]
AMRDerivedClass::initialGrid 2
AMRDerivedClass::loadBalance: procesor map: 
0: 0  
1: 0  
2: 0  

[(0,0,0) (1,1,1)]
[(4,4,4) (11,11,11)]
[(14,14,14) (15,15,15)]
AMRDerivedClass::initialData 0
AMRDerivedClass::initialData 1
AMRDerivedClass::initialData 2
AMRDerivedClass::tagCellsInit 0
AMRDerivedClass::tagCellsInit 1
AMRDerivedClass::tagCellsInit 2
AMRDerivedClass::initialGrid 0
AMRDerivedClass::loadBalance: procesor map: 
0: 0  

[(0,0,0) (3,3,3)]
AMRDerivedClass::initialGrid 1
AMRDerivedClass::loadBalance: procesor map: 
0: 0  

[(0,0,0) (7,7,7)]
AMRDerivedClass::initialGrid 2
AMRDerivedClass::loadBalance: procesor map: 
0: 0  
1: 0  
2: 0  

[(0,0,0) (1,1,1)]
[(4,4,4) (11,11,11)]
[(14,14,14) (15,15,15)]
AMRDerivedClass::initialGrid 3
AMRDerivedClass::loadBalance: procesor map: 
0: 0  
1: 0  
2: 0  

[(0,0,0) (1,1,1)]
[(10,10,10) (21,21,21)]
[(30,30,30) (31,31,31)]
AMRDerivedClass::initialData 0
AMRDerivedClass::initialData 1
AMRDerivedClass::initialData 2
AMRDerivedClass::initialData 3
AMRDerivedClass::postInitialize 3
AMRDerivedClass::postInitialize 2
AMRDerivedClass::postInitialize 1
AMRDerivedClass::postInitialize 0
AMRDerivedClass::computeInitialDt 0
AMRDerivedClass::computeInitialDt 1
AMRDerivedClass::computeInitialDt 2
AMRDerivedClass::computeInitialDt 3
AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0512
dx :0.25
time :0
ref_ratio :2
prob_domain :[(0,0,0) (3,3,3)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0256
dx :0.125
time :0
ref_ratio :2
prob_domain :[(0,0,0) (7,7,7)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0128
dx :0.0625
time :0
ref_ratio :2
prob_domain :[(0,0,0) (15,15,15)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0064
dx :0.03125
time :0
ref_ratio :2
prob_domain :[(0,0,0) (31,31,31)]

AMRDerivedClass::advance 0 at 0
AMRDerivedClass::computeDt 0
AMRDerivedClass::advance 1 at 0
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.0064
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.0128
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.012736
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.0190086
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::advance 1 at 0.0256
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.025472
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.0252186
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.0313664
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.0380173
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.0374527
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.0434782
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::postTimeStep 0
AMRDerivedClass::postTimeStep 0 finished
AMRDerivedClass::advance 0 at 0.0512
AMRDerivedClass::computeDt 0
AMRDerivedClass::advance 1 at 0.0512
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.0512
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.0512
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.0571056
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.0630111
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.0629521
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.0687401
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::advance 1 at 0.0748223
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.0747042
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.0744703
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.0801431
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.0862802
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.0857593
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.0913193
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::postTimeStep 0
AMRDerivedClass::postTimeStep 0 finished
AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0435946
dx :0.25
time :0.0984445
ref_ratio :2
prob_domain :[(0,0,0) (3,3,3)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0217973
dx :0.125
time :0.0984445
ref_ratio :2
prob_domain :[(0,0,0) (7,7,7)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0108987
dx :0.0625
time :0.0984445
ref_ratio :2
prob_domain :[(0,0,0) (15,15,15)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.00544933
dx :0.03125
time :0.0984445
ref_ratio :2
prob_domain :[(0,0,0) (31,31,31)]

AMRDerivedClass::advance 0 at 0.0984445
AMRDerivedClass::computeDt 0
AMRDerivedClass::advance 1 at 0.0984445
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.0984445
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.0984445
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.103894
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.109343
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.109289
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.11463
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::advance 1 at 0.120242
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.120133
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.119917
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.125152
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.130815
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.130334
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.135464
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::postTimeStep 0
AMRDerivedClass::postTimeStep 0 finished
AMRDerivedClass::advance 0 at 0.142039
AMRDerivedClass::computeDt 0
AMRDerivedClass::advance 1 at 0.142039
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.142039
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.142039
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.147068
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.152096
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.152046
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.156974
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::advance 1 at 0.162153
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.162052
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.161853
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.166683
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.171909
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.171465
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.176199
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::postTimeStep 0
AMRDerivedClass::postTimeStep 0 finished
AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.037119
dx :0.25
time :0.182266
ref_ratio :2
prob_domain :[(0,0,0) (3,3,3)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0185595
dx :0.125
time :0.182266
ref_ratio :2
prob_domain :[(0,0,0) (7,7,7)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.00927975
dx :0.0625
time :0.182266
ref_ratio :2
prob_domain :[(0,0,0) (15,15,15)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.00463987
dx :0.03125
time :0.182266
ref_ratio :2
prob_domain :[(0,0,0) (31,31,31)]

AMRDerivedClass::advance 0 at 0.182266
AMRDerivedClass::computeDt 0
AMRDerivedClass::advance 1 at 0.182266
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.182266
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.182266
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.186906
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.191546
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.191499
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.196047
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::advance 1 at 0.200825
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.200733
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.200549
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.205006
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.209828
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.209418
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.213787
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::postTimeStep 0
AMRDerivedClass::postTimeStep 0 finished
AMRDerivedClass::advance 0 at 0.219385
AMRDerivedClass::computeDt 0
AMRDerivedClass::advance 1 at 0.219385
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.219385
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.219385
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.223666
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.227948
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.227905
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.232101
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::advance 1 at 0.236511
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.236425
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.236255
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.240368
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.244817
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.24444
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.248471
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::postTimeStep 0
AMRDerivedClass::postTimeStep 0 finished
AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0316053
dx :0.25
time :0.253636
ref_ratio :2
prob_domain :[(0,0,0) (3,3,3)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0158026
dx :0.125
time :0.253636
ref_ratio :2
prob_domain :[(0,0,0) (7,7,7)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.00790131
dx :0.0625
time :0.253636
ref_ratio :2
prob_domain :[(0,0,0) (15,15,15)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.00395066
dx :0.03125
time :0.253636
ref_ratio :2
prob_domain :[(0,0,0) (31,31,31)]

AMRDerivedClass::advance 0 at 0.253636
AMRDerivedClass::computeDt 0
AMRDerivedClass::advance 1 at 0.253636
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.253636
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.253636
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.257587
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.261538
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.261498
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.26537
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::advance 1 at 0.269439
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.26936
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.269203
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.272998
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.277104
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.276755
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.280475
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::postTimeStep 0
AMRDerivedClass::postTimeStep 0 finished
AMRDerivedClass::advance 0 at 0.285241
AMRDerivedClass::computeDt 0
AMRDerivedClass::advance 1 at 0.285241
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.285241
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.285241
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.288887
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.292532
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.292496
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.296069
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::advance 1 at 0.299823
AMRDerivedClass::computeDt 1
AMRDerivedClass::advance 2 at 0.29975
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.299606
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.303108
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::advance 2 at 0.306896
AMRDerivedClass::computeDt 2
AMRDerivedClass::advance 3 at 0.306575
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::advance 3 at 0.310007
AMRDerivedClass::computeDt 3
AMRDerivedClass::postTimeStep 3
AMRDerivedClass::postTimeStep 3 finished
AMRDerivedClass::postTimeStep 2
AMRDerivedClass::postTimeStep 2 finished
AMRDerivedClass::postTimeStep 1
AMRDerivedClass::postTimeStep 1 finished
AMRDerivedClass::postTimeStep 0
AMRDerivedClass::postTimeStep 0 finished
AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0269105
dx :0.25
time :0.314405
ref_ratio :2
prob_domain :[(0,0,0) (3,3,3)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.0134553
dx :0.125
time :0.314259
ref_ratio :2
prob_domain :[(0,0,0) (7,7,7)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.00672764
dx :0.0625
time :0.313971
ref_ratio :2
prob_domain :[(0,0,0) (15,15,15)]

AMRDerivedClass::writeCheckpointHeader
num_components :2
component_0 :blah
component_1 :blarg

AMRDerivedClass::writeCheckpointLevel
dt :0.00336382
dx :0.03125
time :0.313405
ref_ratio :2
prob_domain :[(0,0,0) (31,31,31)]

   testAMR passed.
testAMR finished with status 0
Entered directory ./ArrayView
      Beginning testArrayView ...
   testArrayView: testing FAB
Bad client connect: Connection refused
   testArrayView: testing BaseFAB<Real>
Bad client connect: Connection refused
   testArrayView: testing MultiBaseFAB<Real>
Bad client connect: Connection refused
   testArrayView: testing MultiFAB(boxlayoutdata)
Bad client connect: Connection refused
   testArrayView: testing MultiFAB(leveldata)
Bad client connect: Connection refused
   testArrayView: testing MultiBaseFAB<Real>(leveldatabasefab)
Bad client connect: Connection refused
      ... testArrayView finished
testArrayView finished with status 0
Entered directory ./ParticleTools
(BinFab [(0,0,0) (9,9,9)] (2,2,2) 3(BinItem (position 0.2 0.2 0.2))(BinItem (position 0.25 0.25 0.2))(BinItem (position 0.3 0.3 0.2)) (3,3,2) 2(BinItem (position 0.35 0.35 0.2))(BinItem (position 0.4 0.4 0.2)) (4,4,2) 2(BinItem (position 0.45 0.45 0.2))(BinItem (position 0.5 0.5 0.2)) (5,5,2) 2(BinItem (position 0.55 0.55 0.2))(BinItem (position 0.6 0.6 0.2)) (6,6,2) 1(BinItem (position 0.65 0.65 0.2)) (7,7,2) 1(BinItem (position 0.7 0.7 0.2)))
(BinFab [(0,0,0) (9,9,9)] (2,2,2) 3(BinItem (position 0.2 0.2 0.2))(BinItem (position 0.25 0.25 0.2))(BinItem (position 0.3 0.3 0.2)) (3,3,2) 2(BinItem (position 0.35 0.35 0.2))(BinItem (position 0.4 0.4 0.2)) (4,4,2) 2(BinItem (position 0.45 0.45 0.2))(BinItem (position 0.5 0.5 0.2)) (5,5,2) 2(BinItem (position 0.55 0.55 0.2))(BinItem (position 0.6 0.6 0.2)) (6,6,2) 1(BinItem (position 0.65 0.65 0.2)) (7,7,2) 1(BinItem (position 0.7 0.7 0.2)))
   created 1000 particles... added 1000 particles, 0 left over...   created 1000 particles... added 1000 particles, 784 left over...   created 1000 particles... added 1000 particles, 216 left over.
   particleTest: passed all tests status = 0
particleTest finished with status 0
Entered directory ./DotProduct
      Beginning testDotProduct ...
   testDotProduct passed zero-valued FAB test.
   testDotProduct passed nonzero-valued FAB test.
   testDotProduct passed nonzero-valued, multicomponent FAB test.
   testDotProduct passed all tests.
testDotProduct finished with status 0
