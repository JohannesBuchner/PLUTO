C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

c ------------------------------------------------------------------
c  this subroutine sets extrapolation BC's in ghost cells
c  INPUTS/OUTPUTS
c  state    <=> what we're doing BC's on
c  bcBox     => ghost cells to fill
c  dir       => direction of face (0->SpaceDim-1)
c  side      => side of face (-1=low, +1 = high)
c  dx        => cell spacing
c  startcomp => first component in state fab to apply BC's to
c  endcomp   => final component to apply BC's to
c -----------------------------------------------------------------
      subroutine EXTRAPGHOSTBC(CHF_FRA[state],
     &                         CHF_BOX[bcBox],
     &                         CHF_CONST_INT[idir],
     &                         CHF_CONST_INT[side],
     &                         CHF_CONST_REAL[dx],
     &                         CHF_CONST_INT[startcomp],
     &                         CHF_CONST_INT[endcomp])

c ::: local variables
      integer nc
      integer CHF_AUTODECL[ii]
      integer CHF_AUTODECL[i]

      REAL_T nearval, farval

      CHF_DTERM[
      ii0 = side*CHF_ID(0,idir);
      ii1 = side*CHF_ID(1,idir);
      ii2 = side*CHF_ID(2,idir);
      ii3 = side*CHF_ID(3,idir);
      ii4 = side*CHF_ID(4,idir);
      ii5 = side*CHF_ID(5,idir)]

      do nc = startcomp, endcomp

         CHF_AUTOMULTIDO[bcBox; i]
         nearval = state(CHF_OFFSETIX[i;-ii],nc)
         farval  = state(CHF_OFFSETIX[i;-2*ii],nc)

         state(CHF_AUTOIX[i],nc) = two*nearval - farval

         CHF_ENDDO

      enddo

      return
      end

c ------------------------------------------------------------------
c  this subroutine sets higher-order extrapolation BC's in ghost cells
c  INPUTS/OUTPUTS
c  state    <=> what we're doing BC's on
c  bcBox     => ghost cells to fill
c  dir       => direction of face (0->SpaceDim-1)
c  side      => side of face (-1=low, +1 = high)
c  dx        => cell spacing
c  startcomp => first component in state fab to apply BC's to
c  endcomp   => final component to apply BC's to
c -----------------------------------------------------------------
      subroutine HOEXTRAPGHOSTBC(CHF_FRA[state],
     &                         CHF_BOX[bcBox],
     &                         CHF_CONST_INT[idir],
     &                         CHF_CONST_INT[side],
     &                         CHF_CONST_REAL[dx],
     &                         CHF_CONST_INT[startcomp],
     &                         CHF_CONST_INT[endcomp])

c ::: local variables
      integer nc
      integer CHF_AUTODECL[ii]
      integer CHF_AUTODECL[i]

      REAL_T nearval, midval, farval

      CHF_DTERM[
      ii0 = side*CHF_ID(0,idir);
      ii1 = side*CHF_ID(1,idir);
      ii2 = side*CHF_ID(2,idir);
      ii3 = side*CHF_ID(3,idir);
      ii4 = side*CHF_ID(4,idir);
      ii5 = side*CHF_ID(5,idir)]


      do nc = startcomp, endcomp

         CHF_AUTOMULTIDO[bcBox; i]
         nearval = state(CHF_OFFSETIX[i;-ii],nc)
         midval  = state(CHF_OFFSETIX[i;-2*ii],nc)
         farval  = state(CHF_OFFSETIX[i;-3*ii],nc)

         state(CHF_AUTOIX[i],nc) = three*(nearval - midval) + farval

         CHF_ENDDO

      enddo

      return
      end

c ------------------------------------------------------------------
c  this subroutine sets reflection (even) BC's in ghost cells
c  INPUTS/OUTPUTS
c  state    <=> what we're doing BC's on
c  bcBox     => ghost cells to fill
c  dir       => direction of face (0->SpaceDim-1)
c  side      => side of face (-1=low, +1 = high)
c  dx        => cell spacing
c  startcomp => first component in state fab to apply BC's to
c  endcomp   => final component to apply BC's to
c  scale     => +1 = reflect-even,-1=reflect-odd, etc
c -----------------------------------------------------------------
      subroutine REFLECTGHOSTBC(CHF_FRA[state],
     &                         CHF_BOX[bcBox],
     &                         CHF_CONST_INT[idir],
     &                         CHF_CONST_INT[side],
     &                         CHF_CONST_REAL[dx],
     &                         CHF_CONST_INT[startcomp],
     &                         CHF_CONST_INT[endcomp],
     &                         CHF_CONST_REAL[scale])

c ::: local variables
      integer n
C      integer localdir
      integer CHF_AUTODECL[ii]
      integer CHF_AUTODECL[i]
C      integer steplength
C      integer boundaryloc

C      REAL_T copyval

      if((side .ne. -1).and.(side.ne.1)) then
         call MAYDAYERROR()
      endif

      do n = startcomp, endcomp
         CHF_AUTOMULTIDO[bcBox; i]

c ::: this is the case of a low-side boundary
         if (side.eq.-1)  then
           CHF_DTERM[
            ii0 = CHF_ID(0,idir)*(2*(CHF_UBOUND[bcBox;0]-i0)+1);
            ii1 = CHF_ID(1,idir)*(2*(CHF_UBOUND[bcBox;1]-i1)+1);
            ii2 = CHF_ID(2,idir)*(2*(CHF_UBOUND[bcBox;2]-i2)+1);
            ii3 = CHF_ID(3,idir)*(2*(CHF_UBOUND[bcBox;3]-i3)+1);
            ii4 = CHF_ID(4,idir)*(2*(CHF_UBOUND[bcBox;4]-i4)+1);
            ii5 = CHF_ID(5,idir)*(2*(CHF_UBOUND[bcBox;5]-i5)+1)]

         else if (side.eq.1) then
c ::: hi-side boundary
           CHF_DTERM[
           ii0 = CHF_ID(0,idir)*(2*(CHF_LBOUND[bcBox;0]-i0)-1);
           ii1 = CHF_ID(1,idir)*(2*(CHF_LBOUND[bcBox;1]-i1)-1);
           ii2 = CHF_ID(2,idir)*(2*(CHF_LBOUND[bcBox;2]-i2)-1);
           ii3 = CHF_ID(3,idir)*(2*(CHF_LBOUND[bcBox;3]-i3)-1);
           ii4 = CHF_ID(4,idir)*(2*(CHF_LBOUND[bcBox;4]-i4)-1);
           ii5 = CHF_ID(5,idir)*(2*(CHF_LBOUND[bcBox;5]-i5)-1)]

        else
c  ::: should never get here
           call MAYDAYERROR()
        endif

c ::: now copy (and rescale) valid-region value
        state(CHF_AUTOIX[i],n) = scale*state(CHF_OFFSETIX[i;+ii],n)

        CHF_ENDDO
      enddo

      return
      end
