C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "EBLGIntegrator.H"
#include "CONSTANTS.H"
cccccccccccccccc

      subroutine airviscosity(
     &     chf_fra1[eta],
     &     chf_const_fra1[dens],
     &     chf_const_fra1[temp],
     &     chf_box[dcalc])

      integer chf_ddecl[i; j; k]
      real_t pdens, ptemp, peta

      chf_multido[dcalc;i;j;k]

      pdens = dens(chf_ix[i;j;k])
      ptemp = temp(chf_ix[i;j;k])
      call pointairviscosity(peta, pdens, ptemp)
      eta(chf_ix[i;j;k]) = peta

      chf_enddo

      return
      end

      subroutine airthermdiff(
     &     chf_fra1[bco],
     &     chf_const_fra1[dens],
     &     chf_const_fra1[temp],
     &     chf_box[dcalc])

      integer chf_ddecl[i; j; k]
      real_t pdens, ptemp, pbco

      chf_multido[dcalc;i;j;k]

      pdens = dens(chf_ix[i;j;k])
      ptemp = temp(chf_ix[i;j;k])
      call pointairthermdiff(pbco, pdens, ptemp)
      bco(chf_ix[i;j;k]) = pbco

      chf_enddo

      return
      end

      subroutine pointairviscosity(
     &     chf_real[eta],
     &     chf_const_real[dens],
     &     chf_const_real[tempin])

      real_t mref, tref, scon, cone, rat1, rat2, temp
      parameter (mref = 1.716d-5)
      parameter (tref = 273.15  )
      parameter (scon = 110.4   )
      parameter (cone = 1.458d-6)

      temp = tempin
c     temp = tref
      rat1 = (temp/tref)**(3/2)
      rat2 = (temp + scon)/(tref + scon)
      eta = mref*rat1*rat2
c      eta = mref
      return
      end

      subroutine pointairthermdiff(
     &     chf_real[bco],
     &     chf_const_real[dens],
     &     chf_const_real[temp])

      real_t facsqu, faclin, faccon

      parameter (faccon = 1.0654d-5 )
      parameter (faclin = 8.8197d-8 )
      parameter (facsqu = 9.1018d-11)

      bco = facsqu*temp*temp + faclin*temp + faccon
      bco = bco*dens

      return
      end

cccccccccccccccc
      subroutine ebppgradvel(
     &     chf_fra[gradvel],
     &     chf_const_fra[primface],
     &     chf_const_real[dx],
     $     chf_const_int[facedir],
     $     chf_const_int[veldir],
     $     chf_const_int[gradindex],
     &     chf_box[dcalc])

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]
      integer vind
      real_t ufacediff

#include "EBEOSCommon.fh"

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]


      vind = QVELX + veldir
      chf_multido[dcalc;i;j;k]

      ufacediff  =
     $     (  primface(chf_ix[i+ioff;j+joff;k+koff], vind)
     $     -  primface(chf_ix[i     ;j     ;k     ], vind))/dx


      gradvel(chf_ix[i;j;k], gradindex) = ufacediff

      chf_enddo

      return
      end

cccccccccccccccc
      subroutine ebppvelohalf(
     &     chf_fra[gradvel],
     &     chf_const_fra[primface],
     $     chf_const_int[veldir],
     &     chf_box[dcalc])

      integer chf_ddecl[i; j; k], vind
      integer chf_ddecl[ioff; joff; koff]
      real_t ufaceave

#include "EBEOSCommon.fh"

      chf_dterm[
      ioff = chf_id(0,veldir);
      joff = chf_id(1,veldir);
      koff = chf_id(2,veldir)]


      vind = QVELX + veldir
      chf_multido[dcalc;i;j;k]

      ufaceave  = half*
     $     (  primface(chf_ix[i+ioff;j+joff;k+koff], vind)
     $     +  primface(chf_ix[i     ;j     ;k     ], vind))


      gradvel(chf_ix[i;j;k], veldir) = ufaceave

      chf_enddo

      return
      end
cccccccccccccccc
      subroutine incrpdivu(
     &     chf_fra1[pdivu],
     &     chf_const_fra[primface],
     &     chf_const_real[dx],
     $     chf_const_int[facedir],
     &     chf_box[dcalc])

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]
      integer vind
      real_t udiff, pave

#include "EBEOSCommon.fh"

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]


      vind = QVELX + facedir

      chf_multido[dcalc;i;j;k]

      udiff  =
     $     (  primface(chf_ix[i+ioff;j+joff;k+koff], vind)
     $     -  primface(chf_ix[i     ;j     ;k     ], vind))/dx

      pave   = half*
     $     (  primface(chf_ix[i+ioff;j+joff;k+koff], QPRES)
     $     +  primface(chf_ix[i     ;j     ;k     ], QPRES))


      pdivu(chf_ix[i;j;k]) = pdivu(chf_ix[i;j;k]) + pave*udiff

      chf_enddo

      return
      end

cccccccccccccccc
      subroutine incrrhoudotdele(
     &     chf_fra1[rhoudotdele],
     &     chf_const_fra[primface],
     &     chf_const_real[specheat],
     &     chf_const_real[dx],
     $     chf_const_int[facedir],
     &     chf_box[dcalc])

      integer chf_ddecl[i; j; k],  dirc, ivar, qnum
      integer chf_ddecl[ioff; joff; koff]
      real_t rhoudelu, gradp, rhoave, ufaceave, pdiff
      real_t primlo(0:QNUM-1), elo
      real_t primhi(0:QNUM-1), ehi
#include "EBEOSCommon.fh"

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      qnum = QNUM
      dirc = QVELX + facedir
      chf_multido[dcalc;i;j;k]

      do ivar = 0, QNUM-1
         primlo(ivar) = primface(chf_ix[i     ;j     ;k     ],ivar)
         primhi(ivar) = primface(chf_ix[i+ioff;j+joff;k+koff],ivar)
      enddo

      call pointgettempfromprim(elo, primlo, qnum, specheat)
      call pointgettempfromprim(ehi, primhi, qnum, specheat)
      elo = elo * specheat
      ehi = ehi * specheat
      ufaceave  = half*(primface(chf_ix[i+ioff;j+joff;k+koff], dirc ) +  primface(chf_ix[i;j;k], dirc))
      rhoave    = half*(primface(chf_ix[i+ioff;j+joff;k+koff], QRHO ) +  primface(chf_ix[i;j;k], QRHO))

      rhoudotdele(chf_ix[i;j;k]) = rhoudotdele(chf_ix[i;j;k])  + rhoave*ufaceave*(ehi - elo)/dx

      chf_enddo

      return
      end

      subroutine incrrhstemperature(
     &     chf_fra1[rhs],
     &     chf_const_fra[primface],
     &     chf_const_real[specheat],
     &     chf_const_real[dx],
     $     chf_const_int[facedir],
     &     chf_box[dcalc])

      integer chf_ddecl[i; j; k], varc, dirc, ivar,qnum
      integer chf_ddecl[ioff; joff; koff]
      real_t primlo(0:QNUM-1), templo
      real_t primhi(0:QNUM-1), temphi
      real_t rhoave, ufaceave, ediff, pave, udiff
      real_t rhoudele,  pdivu
#include "EBEOSCommon.fh"

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      qnum = QNUM
      dirc = QVELX + facedir

      chf_multido[dcalc;i;j;k]

      do ivar = 0, QNUM-1
         primlo(ivar) = primface(chf_ix[i     ;j     ;k     ],ivar)
         primhi(ivar) = primface(chf_ix[i+ioff;j+joff;k+koff],ivar)
      enddo

      call pointgettempfromprim(templo, primlo, qnum, specheat)
      call pointgettempfromprim(temphi, primhi, qnum, specheat)

c     u lapl u term must be added in later when we have properly
c     centered (in time and space) u
      rhoave   =  half*(primhi(QRHO ) +  primlo(QRHO ))
      ufaceave =  half*(primhi(dirc ) +  primlo(dirc ))
      pave     =  half*(primhi(QPRES) +  primlo(QPRES))
      udiff    =       (primhi(dirc ) -  primlo(dirc ))
      ediff =        specheat*(temphi - templo)

      rhoudele = rhoave*ufaceave*ediff/dx
      pdivu    =            pave*udiff/dx
      rhs(chf_ix[i;j;k]) = rhs(chf_ix[i;j;k]) - pdivu - rhoudele

      chf_enddo

      return
      end

cccccccccccccccc
      subroutine divergerz(
     &     chf_box[dcalc],
     &     chf_fra[divf],
     &     chf_const_fra[flux],
     &     chf_const_int[facedir],
     &     chf_const_int[nconserved],
     &     chf_const_real[dx])

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]
      integer spacedim,iv
      real_t hirad, lorad, cerad

      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      spacedim = CH_SPACEDIM

      if(facedir.eq. 0) then

         do iv = 0,nconserved - 1

            chf_multido[dcalc;i;j;k]
            lorad = dx*i
            hirad = dx*(i+1)
            cerad = half*(hirad + lorad)

            divf(chf_ix[i;j;k],iv) = divf(chf_ix[i;j;k],iv) +
     &           (hirad*flux(chf_ix[i+ioff;j+joff;k+koff],iv)
     &           -lorad*flux(chf_ix[i     ;j     ;k     ],iv))/(cerad*dx)

c     add in pressure terms
            if(iv .eq. CMOMX) then

               divf(chf_ix[i;j;k],iv) = divf(chf_ix[i;j;k],iv) +
     &              (flux(chf_ix[i+ioff;j+joff;k+koff],CPRES)
     &              -flux(chf_ix[i     ;j     ;k     ],CPRES))/(dx)


            endif

            chf_enddo
         enddo

      else if(facedir.eq. 1) then

         do iv = 0,nconserved - 1

            chf_multido[dcalc;i;j;k]

            divf(chf_ix[i;j;k],iv) = divf(chf_ix[i;j;k],iv) +
     &           (flux(chf_ix[i+ioff;j+joff;k+koff],iv)
     &           -flux(chf_ix[i     ;j     ;k     ],iv))/dx

            if(iv .eq. CMOMY) then

               divf(chf_ix[i;j;k],iv) = divf(chf_ix[i;j;k],iv) +
     &              (flux(chf_ix[i+ioff;j+joff;k+koff],CPRES)
     &              -flux(chf_ix[i     ;j     ;k     ],CPRES))/(dx)


            endif

            chf_enddo
         enddo
      else
         call MAYDAY_ERROR();
      endif


      return
      end
cccccccccccccccccc
      subroutine fluxassemble(
     &     chf_fra[fluxregflux],
     &     chf_const_fra[godunovflux],
     &     chf_const_real[dr],
     &     chf_const_int[idir],
     &     chf_box[dcalc])

      integer chf_ddecl[i;j;k], iv
      real_t radius,newflux

      chf_multido[dcalc;i;j;k]

      if(idir.eq.0) then
         radius = i*dr
      else
         radius = (i+0.5)*dr
      endif

      do iv = 0,chf_ncomp[fluxregflux] - 1

         newflux = radius*godunovflux(chf_ix[i;j;k], iv)
         if(  ((iv .eq. CMOMX).and.(idir.eq.0)).or.
     &        ((iv .eq. CMOMY).and.(idir.eq.1))) then
            newflux = newflux +
     &           radius*godunovflux(chf_ix[i;j;k], CPRES)
         endif

         fluxregflux(chf_ix[i;j;k], iv) = newflux
      enddo

      chf_enddo

      return
      end
cccccccccccccccc

      subroutine setsourcerz(
     &     chf_fra[sourcerz],
     &     chf_const_fra[state],
     &     chf_const_real[dr],
     &     chf_box[dcalc])

      integer chf_ddecl[i;j;k], iv, idir
      real_t  momen(0:CH_SPACEDIM-1)
      real_t radius, dense, energ,
     &     densesource, presssource

      chf_multido[dcalc;i;j;k]

c     only dense and energ have source terms.
c     set the others to zero

      do iv = 0,chf_ncomp[sourcerz] - 1
         sourcerz(chf_ix[i;j;k], iv) = zero
      enddo

      dense  = state(chf_ix[i;j;k],CRHO)
      energ   = state(chf_ix[i;j;k],CENG)
      do idir = 0, CH_SPACEDIM-1
         momen(idir) = state(chf_ix[i;j;k],CMOMX+idir)
      enddo

      radius = (i + 0.5)*dr
      call pointsetsourcerz(densesource, presssource,
     &     dense, momen, energ, radius)

      sourcerz(chf_ix[i;j;k], QRHO)  = densesource
      sourcerz(chf_ix[i;j;k], QPRES) = presssource

      chf_enddo

      return
      end

      subroutine fillprimitivevector(
     $     chf_vr[primitive],
     $     chf_real[dense],
     $     chf_real[press],
     $     chf_realvect[vel],
     $     chf_realvect[modianovel],
     $     chf_real[entropy],
     $     chf_real[internal],
     $     chf_real[cvtemp],
     $     chf_real[soundspeed])

      integer idir

      do idir = 0, CH_SPACEDIM-1
         primitive(QVELX+idir) = vel(idir)
#ifdef MODIANO_PROBLEM
         primitive(QMVAX+idir) = modianovel(idir)
#else
         modianovel(idir) = zero
#endif
      enddo

      primitive(QRHO)  = dense
      primitive(QENTR) = entropy
      primitive(QINTERN) = internal
      primitive(QCVTEMP) = internal/dense
      primitive(QC)    = soundspeed
      primitive(QPRES) = press

      return
      end

cccccccccccccccc
      subroutine dumpprimitivevector(
     $     chf_vr[primitive],
     $     chf_real[dense],
     $     chf_real[press],
     $     chf_realvect[vel],
     $     chf_realvect[modianovel],
     $     chf_real[entropy],
     $     chf_real[internal],
     $     chf_real[cvtemp],
     $     chf_real[soundspeed])

      integer idir

      do idir = 0, CH_SPACEDIM-1
         vel(idir) = primitive(QVELX+idir)
#ifdef MODIANO_PROBLEM
         modianovel(idir) = primitive(QMVAX+idir)
#else
         modianovel(idir) = zero
#endif
      enddo

      dense       = primitive(QRHO)
      entropy     = primitive(QENTR)
      internal    = primitive(QINTERN)
      internal    = primitive(QCVTEMP)
      soundspeed  = primitive(QC)
      press       = primitive(QPRES)

      return
      end
cccccccccccccccc
      subroutine fillconservedvector(
     $     chf_vr[conserved],
     $     chf_real[dense],
     $     chf_realvect[momen],
     $     chf_real[energ])

      integer idir

      conserved(CRHO) = dense
      do idir = 0, CH_SPACEDIM-1
         conserved(CMOMX+idir)= momen(idir)
      enddo
      conserved(CENG) = energ

      return
      end

cccccccccccccccc
      subroutine dumpconservedvector(
     $     chf_vr[conserved],
     $     chf_real[dense],
     $     chf_realvect[momen],
     $     chf_real[energ])
      integer idir

      dense = conserved(CRHO)
      do idir = 0, CH_SPACEDIM-1
         momen(idir) = conserved(CMOMX+idir)
      enddo
      energ = conserved(CENG)

      return
      end
cccccccccccccccc
      subroutine pointsetsourcerz(
     &     chf_real[densesource],
     &     chf_real[presssource],
     &     chf_const_real[dense],
     &     chf_const_realvect[momen],
     &     chf_const_real[energ],
     &     chf_const_real[radius]
     &     )

#include "EBEOSCommon.fh"
      real_t vel(0:CH_SPACEDIM-1), press, sound, urad
      real_t modianovel(0:CH_SPACEDIM-1), entropy, internal, cvtemp
      integer logflag, cnum, qnum
      real_t conserved(0:CNUM-1)
      real_t primitive(0:QNUM-1)

      cnum = CNUM-1
      qnum = QNUM-1
      logflag = 0
      if(radius .le. zero) then
       call MAYDAY_ERROR()
      endif

      dense = max(dense, smallr)
      call fillconservedvector(conserved, cnum, dense, momen, energ)

c     point cons2prm has a pressure floor
      call pointcons2prm(conserved, cnum, primitive, qnum, logflag)

      call dumpprimitivevector(primitive, qnum, dense, press, vel,
     &     modianovel, entropy, internal, cvtemp, sound)

      urad = vel(0)
      densesource =             -dense*urad/radius
      presssource = -sound*sound*dense*urad/radius
      return
      end
cccccccccccccccc
      subroutine getsmall(
     &     chf_real[ausmall],
     &     chf_real[ausmallp],
     &     chf_real[ausmallu],
     &     chf_real[ausmallr])

#include  "EBEOSCommon.fh"

      ausmall = small
      ausmallp= smallp
      ausmallu= smallu
      ausmallr= smallr

      return
      end
#ifndef MODIANO_PROBLEM
      subroutine cons2prm(
     &     chf_box[dcalc],
     &     chf_const_fra[u],
     &     chf_fra[q],
     &     chf_const_int[logflag],
     &     chf_const_int[iverbose]
     &     )

      integer chf_ddecl[i; j; k]

      real_t vel, dense, internal, cvtemp, kinetic, press
      integer idir

#include "EBEOSCommon.fh"

      chf_multido[dcalc;i;j;k]

      dense = max(u(chf_ix[i;j;k], CRHO), smallr)
c     density
      q(chf_ix[i;j;k], QRHO) = dense

      kinetic = zero
      do idir = 0, CH_SPACEDIM-1
c     velocity
         vel = u(chf_ix[i;j;k], CMOMX+idir)/dense
         q(chf_ix[i;j;k], QVELX+idir) = vel
         kinetic = kinetic + half*vel*vel
      enddo
      internal = u(chf_ix[i;j;k], CENG)-kinetic*dense
      cvtemp = internal/dense
      press = max((gamma-one)*internal, smallp)

c     pressure
      q(chf_ix[i;j;k], QPRES) = press
c     entropy set to zero when not in output mode
      q(chf_ix[i;j;k], QENTR) = zero
c     internal energy
      q(chf_ix[i;j;k], QINTERN) = internal
c     cv * temperature
      q(chf_ix[i;j;k], QCVTEMP) = cvtemp
c     soundspeed
      q(chf_ix[i;j;k], QC) = sqrt(gamma*press/dense)

      if (logflag .ne. 0) then
         q(chf_ix[i;j;k], QENTR) = log10(press) - gamma*log10(dense)
         q(chf_ix[i;j;k], QRHO) = log10(dense)
         q(chf_ix[i;j;k], QPRES)= log10(press)
      endif

      chf_enddo

      return
      end
#else
c     modiano problem version
      subroutine cons2prm(
     &     chf_box[dcalc],
     &     chf_const_fra[state],
     &     chf_fra[q],
     &     chf_const_int[logflag],
     &     chf_const_int[iverbose]
     &     )

      integer chf_ddecl[i; j; k], ivar
      integer  cnum, qnum
      real_t conserved(0:CNUM-1)
      real_t primitive(0:QNUM-1)

#include "EBEOSCommon.fh"
      cnum = CNUM-1
      qnum = QNUM-1

      chf_multido[dcalc;i;j;k]

      do ivar = 0, CNUM-1
         conserved(ivar) = state(chf_ix[i;j;k],ivar)
      enddo

c     point cons2prm has a pressure floor
      call pointcons2prm(conserved, cnum, primitive, qnum, logflag)

      do ivar = 0, QNUM-1
         q(chf_ix[i;j;k],ivar) = primitive(ivar)
      enddo

      chf_enddo

      return
      end

#endif
cccccccccccccccc
      subroutine pointcons2prm(
     $     chf_vr[conserved],
     $     chf_vr[primitive],
     &     chf_const_int[logflag])

      real_t vel(0:CH_SPACEDIM-1), momen(0:CH_SPACEDIM-1)
      real_t modianovel(0:CH_SPACEDIM-1), entropy, internal, cvtemp
      real_t press,  energ, dense, soundspeed
      real_t kinetic,  densetwo
      integer idir, cnum, qnum
#include "EBEOSCommon.fh"

      cnum = CNUM-1
      qnum = QNUM-1

      call dumpconservedvector(conserved, cnum, dense, momen, energ)


      kinetic = zero
      do idir = 0, CH_SPACEDIM-1
         vel(idir) = momen(idir)/dense
         kinetic = kinetic + half*vel(idir)*vel(idir)
      enddo
      internal = energ-kinetic*dense
      cvtemp = internal/dense
      press = (gamma-one)*internal
      press = max(press, smallp)

      densetwo = max(dense, smallr)
      dense = densetwo

      soundspeed = sqrt(gamma*press/densetwo)
c     axial and tangential vels are special to
c     modiano problem
      if(idomodianoprob.eq.1) then
         call getmodianovel(modianovel, vel)
      else
         do idir = 0, CH_SPACEDIM-1
            modianovel(idir) = zero
         enddo
      endif
      entropy = log10(press) - gamma*log10(densetwo)

c     floors
      if (logflag .ne. 0) then

        dense = log10(densetwo)
        press = log10(press)

      endif

      call fillprimitivevector(primitive, qnum, dense, press, vel,
     &     modianovel, entropy, internal, cvtemp, soundspeed)

      return
      end
cccccccccccccccc
      subroutine gettemperature(
     &     chf_fra1[temperature],
     &     chf_const_fra[state],
     &     chf_box[dcalc],
     $     chf_const_real[specificheat]
     &     )

      integer chf_ddecl[i; j; k], ivar, cnum
      real_t conserved(0:CNUM-1), temper

#include "EBEOSCommon.fh"
      cnum = CNUM-1

      chf_multido[dcalc;i;j;k]

      do ivar = 0, CNUM-1
         conserved(ivar) = state(chf_ix[i;j;k],ivar)
      enddo

      call pointgettemperature(temper, conserved, cnum, specificheat)

      temperature(chf_ix[i;j;k]) = temper

      chf_enddo

      return
      end

cccccccccccccccc
      subroutine pointgettemperature(
     $     chf_real[temper],
     $     chf_const_vr[conserved],
     $     chf_const_real[specificheat])

      real_t momen(0:CH_SPACEDIM-1)
      real_t  energ, dense
      real_t kinetic,internal,cvtemp, vel
      integer idir, cnum
#include "EBEOSCommon.fh"

      cnum = CNUM-1

      call dumpconservedvector(conserved, cnum, dense, momen, energ)


      kinetic = zero
      do idir = 0, CH_SPACEDIM-1
         vel     = momen(idir)/dense
         kinetic = kinetic + half*vel*vel
      enddo
      internal = energ-kinetic*dense
      cvtemp = internal/dense
      temper = internal/specificheat

      return
      end

      subroutine pointgettempfromprim(
     $     chf_real[temper],
     $     chf_const_vr[primitive],
     $     chf_const_real[specificheat])

      real_t      veloc(0:CH_SPACEDIM-1)
      real_t modianovel(0:CH_SPACEDIM-1)
      real_t  dense, press, entropy, internal, cvtemp, sound
      integer idir, qnum
#include "EBEOSCommon.fh"

      qnum = QNUM-1

      call dumpprimitivevector(primitive, qnum, dense, press, veloc,
     &     modianovel, entropy, internal, cvtemp,sound)


      internal = press/((gamma-one)*dense)
      cvtemp = internal
      temper = internal/specificheat

      return
      end
cccccccccccccccc
      subroutine getflux(
     &     chf_box[dcalc],
     &     chf_const_fra[qgdnv],
     &     chf_const_int[facedir],
     &     chf_fra[flux],
     &     chf_const_real[dx])

      integer chf_ddecl[i; j; k], ivar
      real_t primitive(0:QNUM-1)
      real_t   fluxvec(0:FNUM-1)
      integer fnum, qnum
      fnum = FNUM-1
      qnum = QNUM-1

      chf_multido[dcalc;i;j;k]

      do ivar = 0, QNUM-1
         primitive(ivar)  = qgdnv(chf_ix[i;j;k], ivar)
      enddo

      call pointgetflux(fluxvec, fnum, primitive, qnum, facedir)

      do ivar = 0, FNUM-1
         flux(chf_ix[i;j;k], ivar) = fluxvec(ivar)
      enddo

      chf_enddo

      return
      end

      subroutine pointgetflux(
     &     chf_vr[flux],
     &     chf_vr[primitive],
     &     chf_const_int[facedir])

      real_t   velgdnv(0:CH_SPACEDIM-1)
      real_t momenflux(0:CH_SPACEDIM-1)
      real_t modianovel(0:CH_SPACEDIM-1), entropy, internal, cvtemp, sound
      real_t denseflux, dengdnv
      real_t energflux, pregdnv
      integer chf_ddecl[inorm; itan1; itan2]
      integer chf_ddecl[inormc;itanc1;itanc2]
      real_t r, p, chf_ddecl[u; v; w], e, ke, normmomflux
      integer spacedim, qnum, fnum

#include "EBEOSCommon.fh"
      spacedim = CH_SPACEDIM
      qnum = QNUM-1
      fnum = FNUM-1
      call dumpprimitivevector(primitive, qnum, dengdnv, pregdnv, velgdnv,
     &     modianovel, entropy, internal, cvtemp, sound)

      chf_dterm[
      inorm = facedir;
      itan1 = mod(facedir + 1,spacedim);
      itan2 = mod(facedir + 2,spacedim)]

      chf_dterm[
      inormc = facedir;
      itanc1 = mod(facedir + 1,spacedim);
      itanc2 = mod(facedir + 2,spacedim)]

      r = max(smallr,dengdnv)

      chf_dterm[
      u = velgdnv(inorm);
      v = velgdnv(itan1);
      w = velgdnv(itan2)]

      p = max(smallp, pregdnv);
      e = p/r/(gamma - one)

      denseflux = r*u

      normmomflux = r*u*u+p;

      chf_dterm[
      momenflux(inormc) = normmomflux;
      momenflux(itanc1) = r*u*v;
      momenflux(itanc2) = r*u*w]

      chf_dterm[ke = u*u; + v*v; + w*w]
      ke = ke*half

      energflux = u*r*(e+ke) + u*p

      call fillconservedvector(flux, fnum, denseflux, momenflux, energflux)

      return
      end
cccccccccccccccc
      subroutine getfluxrz(
     &     chf_box[dcalc],
     &     chf_const_fra[qgdnv],
     &     chf_const_int[facedir],
     &     chf_fra[flux],
     &     chf_const_real[dx])

      real_t primitive(0:QNUM-1)
      real_t   fluxvec(0:FNUM-1), radius
      integer fnum, qnum
      integer chf_ddecl[i; j; k], ivar

      fnum = FNUM-1
      qnum = QNUM-1
      chf_multido[dcalc;i;j;k]

      do ivar = 0, QNUM-1
         primitive(ivar)  = qgdnv(chf_ix[i;j;k], ivar)
      enddo

      radius = i*dx
      call pointgetfluxrz(fluxvec, fnum, primitive, qnum, facedir, radius)

      do ivar = 0, FNUM-1
         flux(chf_ix[i;j;k], ivar) = fluxvec(ivar)
      enddo

      chf_enddo

      return
      end
ccccccccccccccccccccc
ccccccccccccccccccccc
      subroutine pointgetfluxrz(
     &     chf_vr[flux],
     &     chf_vr[primitive],
     &     chf_const_int[facedir],
     &     chf_const_real[radius])

      integer chf_ddecl[inorm; itan1; itan2]
      integer chf_ddecl[inormc;itanc1;itanc2]
      real_t r, p, chf_ddecl[u; v; w], e, ke, normmomflux
      real_t   modianovel(0:CH_SPACEDIM-1), entropy, internal, cvtemp, sound
      real_t   velgdnv(0:CH_SPACEDIM-1)
      real_t momenflux(0:CH_SPACEDIM-1)
      real_t denseflux, dengdnv
      real_t energflux, pregdnv
      integer spacedim, fnum, qnum

#include "EBEOSCommon.fh"

      spacedim = CH_SPACEDIM
      qnum = QNUM-1
      fnum = FNUM-1
      call dumpprimitivevector(primitive, qnum, dengdnv, pregdnv, velgdnv,
     &     modianovel, entropy, internal, cvtemp, sound)

      chf_dterm[
      inorm = facedir;
      itan1 = mod(facedir + 1,spacedim);
      itan2 = mod(facedir + 2,spacedim)]

      chf_dterm[
      inormc = facedir;
      itanc1 = mod(facedir + 1,spacedim);
      itanc2 = mod(facedir + 2,spacedim)]

      r = max(smallr,dengdnv)

      chf_dterm[
      u = velgdnv(inorm);
      v = velgdnv(itan1);
      w = velgdnv(itan2)]

      p = max(smallp, pregdnv);
      e = p/r/(gamma - one)

      denseflux = r*u

      normmomflux =  r*u*u;

      chf_dterm[
      momenflux(inormc) = normmomflux;
      momenflux(itanc1) = r*u*v;
      momenflux(itanc2) = r*u*w]

      chf_dterm[ke = u*u; + v*v; + w*w]
      ke = ke*half

      energflux = u*r*(e+ke) + u*p

c     weirdness at the axis
      if((facedir.eq.0).and.(radius.eq.0)) then
         denseflux = zero
         energflux = zero
         chf_dterm[
         momenflux(inormc) = zero;
         momenflux(itanc1) = zero;
         momenflux(itanc2) = zero]

      endif
c     pressure flux separated out
      call fillconservedvector(flux, fnum, denseflux, momenflux, energflux)
      flux(CPRES) = pregdnv

      return
      end
ccccccccccccccccccccc
cccccccccccccccc
      subroutine pred(
     &     chf_box[dcalc],
     &     chf_const_fra[q],
     &     chf_const_fra[dq],
     &     chf_fra[qlo],
     &     chf_fra[qhi],
     &     chf_const_int[normdir],
     &     chf_const_real[dtbydx],
     &     chf_const_int[useflat])

      integer chf_ddecl[i;j;k]
      integer chf_ddecl[inorm; itan1; itan2], spacedim
      real_t pre, rho, c, upc, umc, denslope, preslope
      real_t alphap, alpham, alpha0r, alpha0v1, alpha0v2
      real_t betam, betap, beta0, prelo, prehi, denlo, denhi
      real_t    vello(0:CH_SPACEDIM-1)
      real_t    velhi(0:CH_SPACEDIM-1)
      real_t      vel(0:CH_SPACEDIM-1)
      real_t chf_ddecl[dun; dut1; dut2]

#include "EBEOSCommon.fh"
      spacedim = CH_SPACEDIM
      chf_dterm[
      inorm = normdir;
      itan1 = mod(normdir + 1,spacedim);
      itan2 = mod(normdir + 2,spacedim)]

      chf_multido[dcalc;i;j;k]

c     take stuff out of holders
      rho = max(smallr, q(chf_ix[i;j;k], QRHO) )
      pre = max(smallp, q(chf_ix[i;j;k], QPRES))
      chf_dterm[
      vel(inorm) = q(chf_ix[i;j;k],QVELX+inorm);
      vel(itan1) = q(chf_ix[i;j;k],QVELX+itan1);
      vel(itan2) = q(chf_ix[i;j;k],QVELX+itan2)]



      denslope = dq(chf_ix[i;j;k], QRHO)
      preslope = dq(chf_ix[i;j;k], QPRES)
      chf_dterm[
      dun  = dq(chf_ix[i;j;k],QVELX+inorm);
      dut1 = dq(chf_ix[i;j;k],QVELX+itan1);
      dut2 = dq(chf_ix[i;j;k],QVELX+itan2)]

c     compute wave speeds and eigen guano
      c = sqrt(gamma*pre/rho)
      upc = vel(inorm) + c
      umc = vel(inorm) - c

      alphap = half*( rho*dun/c + preslope/c**2)
      alpham = half*(-rho*dun/c + preslope/c**2)

      chf_dterm[
      alpha0r  = denslope - preslope/c**2;
      alpha0v1 = dut1;
      alpha0v2 = dut2]

c     extrapolate to the low side.

      betam = -half*(one + min(umc,zero)*dtbydx)
      beta0 = -half*       c            *dtbydx

      if (vel(inorm).ge.zero) beta0 = zero

      betap = -c*dtbydx
      if (upc.ge.zero) betap = zero

      denlo = alpha0r*beta0 + alphap*betap + rho + betam*denslope

      chf_dterm[
      vello(inorm) = alphap*betap*c/rho + vel(inorm) + betam*dun;
      vello(itan1) = alpha0v1*beta0     + vel(itan1) + betam*dut1;
      vello(itan2) = alpha0v2*beta0     + vel(itan2) + betam*dut2]

      prelo = alphap*betap*c**2  + pre + betam*preslope

c     extrapolate to the high side.

      betap = half*(one - max(upc,zero)*dtbydx)
      beta0 = half*c*dtbydx

      if (vel(inorm).le.zero) beta0 = zero

      betam = c*dtbydx
      if (umc.le.zero) betam = zero

      denhi= alpha0r*beta0 + alpham*betam + rho + betap*denslope

      chf_dterm[
      velhi(inorm)= -alpham*betam*c/rho + vel(inorm) + betap*dun;
      velhi(itan1)= alpha0v1*beta0      + vel(itan1) + betap*dut1;
      velhi(itan2)= alpha0v2*beta0      + vel(itan2) + betap*dut2]

      prehi = alpham*betam*c**2 + pre + betap*preslope

c     floors
      prehi = max(prehi, smallp)
      prelo = max(prelo, smallp)
      denhi = max(denhi, smallr)
      denlo = max(denlo, smallr)

c     wacky flattening analog
      if(useflat .eq. 1) then
         call pointlimit(
     $        rho, denlo,    denhi,
     $        vel, vello,    velhi,
     $        pre, prelo,    prehi)
      endif

c     put stuff back into holders
      qlo(chf_ix[i;j;k], QRHO) = denlo
      qhi(chf_ix[i;j;k], QRHO) = denhi

      qlo(chf_ix[i;j;k], QPRES)= prelo
      qhi(chf_ix[i;j;k], QPRES)= prehi

      chf_dterm[
      qlo(chf_ix[i;j;k],QVELX+inorm)= vello(inorm);
      qlo(chf_ix[i;j;k],QVELX+itan1)= vello(itan1);
      qlo(chf_ix[i;j;k],QVELX+itan2)= vello(itan2)]

      chf_dterm[
      qhi(chf_ix[i;j;k],QVELX+inorm)= velhi(inorm);
      qhi(chf_ix[i;j;k],QVELX+itan1)= velhi(itan1);
      qhi(chf_ix[i;j;k],QVELX+itan2)= velhi(itan2)]

      chf_enddo

      return
      end
cccccccccccccccc
cccccccccccccccc
      subroutine pointlimit(
     &     chf_real    [dense],
     &     chf_real    [denlo],
     &     chf_real    [denhi],
     &     chf_realvect[veloc],
     &     chf_realvect[vello],
     &     chf_realvect[velhi],
     &     chf_real    [press],
     &     chf_real    [prelo],
     &     chf_real    [prehi])

      integer idir
      real_t factor

      factor = half

      if((denlo.lt.(factor*dense)).or.(prelo.lt.(factor*press))) then
         denlo = dense
         prelo = press
         do idir = 0, CH_SPACEDIM-1
            vello(idir) = veloc(idir)
         enddo
      endif

      if((denhi.lt.(factor*dense)).or.(prehi.lt.(factor*press))) then
         denhi = dense
         prehi = press
         do idir = 0, CH_SPACEDIM-1
            velhi(idir) = veloc(idir)
         enddo
      endif

      return
      end

      subroutine pointpred(
     $     chf_vr[primit],
     $     chf_vr[pslope],
     $     chf_vr[primlo],
     $     chf_vr[primhi],
     &     chf_const_int[normdir],
     &     chf_const_real[dtbydx],
     &     chf_const_int[useflat])

      integer chf_ddecl[inorm; itan1; itan2]
      real_t p, rho, c, upc, umc
      real_t alphap, alpham
      real_t chf_ddecl[alpha0r; alpha0v1; alpha0v2]
      real_t betam, beta0, betap
      integer spacedim,qnum
      real_t chf_ddecl[un;ut1;ut2]
      real_t chf_ddecl[dun;dut1;dut2]
      real_t    veloc(0:CH_SPACEDIM-1)
      real_t    vello(0:CH_SPACEDIM-1)
      real_t    velhi(0:CH_SPACEDIM-1)
      real_t velslope(0:CH_SPACEDIM-1)
      real_t modianovel(0:CH_SPACEDIM-1), entropy, internal, cvtemp, sound
      real_t press, prelo, prehi, preslope
      real_t dense, denlo, denhi, denslope


#include "EBEOSCommon.fh"

      spacedim = CH_SPACEDIM
      qnum = QNUM-1

      call dumpprimitivevector(primit, qnum, dense, press, veloc,
     &     modianovel, entropy, internal, cvtemp, sound)

      call dumpprimitivevector(pslope, qnum, denslope, preslope, velslope,
     &     modianovel, entropy, internal, cvtemp, sound)

      chf_dterm[
      inorm = normdir;
      itan1 = mod(normdir + 1,spacedim);
      itan2 = mod(normdir + 2,spacedim)]

      p   = max(smallp, press)
      rho = max(smallr, dense)

      chf_dterm[
      un  = veloc(inorm);
      ut1 = veloc(itan1);
      ut2 = veloc(itan2)]

      chf_dterm[
      dun  = velslope(inorm);
      dut1 = velslope(itan1);
      dut2 = velslope(itan2)]

      c = sqrt(gamma*p/rho)
      upc = un + c
      umc = un - c

      alphap = half*( rho*dun/c + preslope/c**2)
      alpham = half*(-rho*dun/c + preslope/c**2)

      chf_dterm[
      alpha0r  = denslope - preslope/c**2;
      alpha0v1 = dut1;
      alpha0v2 = dut2]

c     extrapolate to the low side.

      betam = -half*(one + min(umc,zero)*dtbydx)
      beta0 = -half*       c            *dtbydx

      if (un.ge.zero) beta0 = zero

      betap = -c*dtbydx
      if (upc.ge.zero) betap = zero

      denlo = alpha0r*beta0 + alphap*betap + dense + betam*denslope

      chf_dterm[
      vello(inorm) = alphap*betap*c/rho + veloc(inorm) + betam*dun;
      vello(itan1) = alpha0v1*beta0     + veloc(itan1) + betam*dut1;
      vello(itan2) = alpha0v2*beta0     + veloc(itan2) + betam*dut2]

      prelo = alphap*betap*c**2  + press + betam*preslope

c     extrapolate to the high side.

      betap = half*(one - max(upc,zero)*dtbydx)
      beta0 = half*c*dtbydx

      if (un.le.zero) beta0 = zero

      betam = c*dtbydx
      if (umc.le.zero) betam = zero

      denhi= alpha0r*beta0 + alpham*betam + dense + betap*denslope

      chf_dterm[
      velhi(inorm)= -alpham*betam*c/rho + veloc(inorm) + betap*dun;
      velhi(itan1)= alpha0v1*beta0      + veloc(itan1) + betap*dut1;
      velhi(itan2)= alpha0v2*beta0      + veloc(itan2) + betap*dut2]

      prehi = alpham*betam*c**2 + press + betap*preslope

c     floors
      prehi = max(prehi, smallp)
      prelo = max(prelo, smallp)
      denhi = max(denhi, smallr)
      denlo = max(denlo, smallr)

      if(useflat .eq. 1) then
         call pointlimit(
     $        dense, denlo,    denhi,
     $        veloc, vello,    velhi,
     $        press, prelo,    prehi)
      endif

      call fillprimitivevector(primlo, qnum, denlo, prelo, vello,
     &     modianovel, entropy, internal, cvtemp, sound)

      call fillprimitivevector(primhi, qnum, denhi, prehi, velhi,
     &     modianovel, entropy, internal, cvtemp, sound)
      return
      end
#ifndef MODIANO_PROBLEM
c version without modiano problem
      subroutine prm2cons(
     &     chf_box[dcalc],
     &     chf_fra[u],
     &     chf_const_fra[q])


      integer chf_ddecl[i; j; k], idir
      real_t kinetic, vel, dense
#include "EBEOSCommon.fh"

      chf_multido[dcalc; i;j;k]

      dense = max(q(chf_ix[i;j;k], QRHO), smallr)
c     density
      u(chf_ix[i;j;k], CRHO) =  dense

      kinetic = zero
      do idir = 0, CH_SPACEDIM-1
         vel = q(chf_ix[i;j;k], QVELX+idir)
         kinetic = kinetic + half*vel*vel
c     momentum
         u(chf_ix[i;j;k], CMOMX+idir) =  dense*vel
      enddo

c     energy
      u(chf_ix[i;j;k], CENG) =  max(dense*kinetic +
     $     q(chf_ix[i;j;k], QPRES)/(gamma-one), small)


      chf_enddo

      return
      end
#else
c version with modiano problem
cccccccccccccccc
      subroutine prm2cons(
     &     chf_box[dcalc],
     &     chf_fra[state],
     &     chf_const_fra[q])

      integer chf_ddecl[i; j; k], ivar
      integer cnum, qnum
      real_t conserved(0:CNUM-1)
      real_t primitive(0:QNUM-1)

      cnum = CNUM-1
      qnum = QNUM-1

      chf_multido[dcalc; i;j;k]

      do ivar = 0, QNUM-1
         primitive(ivar) = q(chf_ix[i;j;k],ivar)
      enddo

      call pointprm2cons(conserved, cnum, primitive, qnum)

      do ivar = 0, CNUM-1
         state(chf_ix[i;j;k],ivar) = conserved(ivar)
      enddo

      chf_enddo

      return
      end
#endif
ccccccccccccccc
      subroutine pointprm2cons(
     &     chf_vr[conserved],
     &     chf_vr[primitive])


      real_t kinetic
      integer idir, cnum, qnum
      real_t vel(0:CH_SPACEDIM-1)
      real_t momen(0:CH_SPACEDIM-1)
      real_t modianovel(0:CH_SPACEDIM-1)
      real_t press, energ, dense, entropy, internal, cvtemp, sound

#include "EBEOSCommon.fh"

      cnum = CNUM-1
      qnum = QNUM-1

      call dumpprimitivevector(primitive, qnum, dense, press, vel,
     &     modianovel, entropy, internal, cvtemp, sound)

      kinetic = zero
      do idir = 0, CH_SPACEDIM-1
         kinetic = kinetic + half*vel(idir)*vel(idir)
         momen(idir) = dense*vel(idir)
      enddo

      energ = dense*kinetic + press/(gamma-one)

c     floors
      energ  = max(small, energ)
      dense  = max(smallr,dense)

      call fillconservedvector(conserved, cnum, dense, momen, energ)

      return
      end
cccccccccccccccc
      subroutine riemann(
     &     chf_box[d],
     &     chf_const_fra[ql],
     &     chf_const_fra[qr],
     &     chf_fra[qgod],
     &     chf_const_int[facedir])

      integer CHF_DDECL[i;j;k]
      integer chf_ddecl[inorm; itan1; itan2], spacedim
      real_t    velgod(0:CH_SPACEDIM-1), dengod, pregod
      real_t pl, pr, rhol, rhor, cl, cr, wl, wr, unl, unr
      real_t rstar, pstar, ustar, wstar,cstar, ushock
      real_t po, ro, co, uno, sgnm, spout, spin, frac
#include "EBEOSCommon.fh"

      spacedim = CH_SPACEDIM
      chf_dterm[
      inorm = facedir;
      itan1 = mod(facedir + 1,spacedim);
      itan2 = mod(facedir + 2,spacedim)]

      chf_multido[d;i;j;k]

      pl   = max(smallp, ql(chf_ix[i;j;k], QPRES))
      pr   = max(smallp, qr(chf_ix[i;j;k], QPRES))

      rhol = max(smallr, ql(chf_ix[i;j;k], QRHO))
      rhor = max(smallr, qr(chf_ix[i;j;k], QRHO))

      unl  = ql(chf_ix[i;j;k], QVELX+inorm)
      unr  = qr(chf_ix[i;j;k], QVELX+inorm)

      cl = sqrt(gamma*pl/rhol)
      cr = sqrt(gamma*pr/rhor)

      wl = rhol*cl
      wr = rhor*cr

      pstar = (wr*pl + wl*pr + wl*wr*(unl - unr))/(wl + wr)
      ustar = (wl*unl + wr*unr + pl - pr)/(wl + wr)

      if (ustar .gt. zero) then

         ro = rhol
         po = pl

         chf_dterm[
         uno = unl;
         velgod(itan1) = ql(chf_ix[i;j;k], QVELX+itan1);
         velgod(itan2) = ql(chf_ix[i;j;k], QVELX+itan2)]

         co = cl
         sgnm = one
      else
         ro = rhor
         po = pr

         chf_dterm[
         uno = unr;
         velgod(itan1) = qr(chf_ix[i;j;k], QVELX+itan1);
         velgod(itan2) = qr(chf_ix[i;j;k], QVELX+itan2)]

         co = cr
         sgnm = -one
      endif

      rstar = max(ro + (pstar - po)/co**2, smallr)

      cstar = sqrt(abs(gamma*pstar/rstar))
      wstar = half*(cstar*rstar + co*ro)

      spout = co    - sgnm*uno
      spin  = cstar - sgnm*ustar

      ushock =  wstar/rstar - sgnm*ustar

      if (pstar.gt.po) then
         spout = ushock
         spin  = ushock
      endif

      frac = ((one + (spout + spin)/max(spout-spin,small))/two)
      frac = max(zero,min(one,frac))

      dengod        = ro  + frac*(rstar - ro)
      velgod(inorm) = uno + frac*(ustar - uno)
      pregod        = po  + frac*(pstar - po)

      if (spout.le.zero) then
         dengod        = ro
         velgod(inorm) = uno
         pregod        = po
      endif

      if (spin.gt.zero) then
         dengod         = rstar
         velgod(inorm)  = ustar
         pregod         = pstar
      endif

      dengod  = max(dengod , smallr)
      pregod  = max(pregod , smallp)

      qgod(chf_ix[i;j;k], QRHO)  = dengod
      qgod(chf_ix[i;j;k], QPRES) = pregod
      chf_dterm[
      qgod(chf_ix[i;j;k], QVELX + inorm) = velgod(inorm);
      qgod(chf_ix[i;j;k], QVELX + itan1) = velgod(itan1);
      qgod(chf_ix[i;j;k], QVELX + itan2) = velgod(itan2)]

      chf_enddo

      return
      end

      subroutine SLIPWALLSOLIDBC(
     &     CHF_FRA[F],
     &     CHF_CONST_FRA[Wextrap],
     &     CHF_CONST_INT[lohisign],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_INT[facedir],
     &     CHF_BOX[box])

      integer chf_ddecl[i; j; k]
      real_t    velocl(0:CH_SPACEDIM-1)
      real_t    velocr(0:CH_SPACEDIM-1)
      real_t    velgod(0:CH_SPACEDIM-1)
      real_t    modianovel(0:CH_SPACEDIM-1)
      real_t   priml(0:QNUM-1)
      real_t   primr(0:QNUM-1)
      real_t   primgod(0:QNUM-1)
      real_t pressl, pressr, pregod
      real_t densel, denser, dengod, entropy, internal, cvtemp, sound
      integer qnum, idir,sdim
#include "EBEOSCommon.fh"

      qnum = QNUM-1
      sdim = CH_SPACEDIM

      CHF_MULTIDO[box;i;j;k]

      pressl   = Wextrap(CHF_IX[i;j;k],QPRES)
      pressr   = Wextrap(CHF_IX[i;j;k],QPRES)
      densel   = Wextrap(CHF_IX[i;j;k],QRHO)
      denser   = Wextrap(CHF_IX[i;j;k],QRHO)
c     these two do not affect the calculation
      sound = Wextrap(CHF_IX[i;j;k],QC)
      entropy = Wextrap(CHF_IX[i;j;k],QENTR)
      internal = Wextrap(CHF_IX[i;j;k],QINTERN)
      cvtemp = internal/densel
      do idir = 0, sdim-1
         velocl(idir) = Wextrap(CHF_IX[i;j;k],QVELX + idir)
         velocr(idir) = Wextrap(CHF_IX[i;j;k],QVELX + idir)
c     also not used
         modianovel(idir) = zero
      enddo
      if(lohisign .eq. 1) then
         velocr(facedir) =- Wextrap(CHF_IX[i;j;k],QVELX + facedir)
      else
         velocl(facedir) =- Wextrap(CHF_IX[i;j;k],QVELX + facedir)
      endif

      call fillprimitivevector(priml, qnum, densel, pressl, velocl, modianovel, entropy, internal, cvtemp, sound)
      call fillprimitivevector(primr, qnum, denser, pressr, velocr, modianovel, entropy, internal, cvtemp, sound)
      call pointriemann(priml,qnum,primr,qnum,primgod,qnum,facedir)

      F(CHF_IX[i;j;k],CRHO) = zero
      F(CHF_IX[i;j;k],CENG) = zero

      CHF_DTERM[
      F(CHF_IX[i;j;k],CMOMX) = zero;
      F(CHF_IX[i;j;k],CMOMY) = zero;
      F(CHF_IX[i;j;k],CMOMZ) = zero]

      F(CHF_IX[i;j;k],CMOMX + facedir) = primgod(QPRES)

      CHF_ENDDO

      return
      end


ccccccccccccccc
      subroutine pointriemann(
     &     chf_vr[priml],
     &     chf_vr[primr],
     &     chf_vr[primgod],
     &     chf_const_int[facedir])

      integer chf_ddecl[inorm; itan1; itan2]
      real_t    velocl(0:CH_SPACEDIM-1)
      real_t    velocr(0:CH_SPACEDIM-1)
      real_t    velgod(0:CH_SPACEDIM-1)
      real_t    modianovel(0:CH_SPACEDIM-1)
      real_t pressl, pressr, pregod
      real_t densel, denser, dengod, entropy, internal, cvtemp, sound
      real_t pl, rhol, pr, rhor, cl, cr, wl, wr, wstar
      real_t pstar, ustar, ro, po, uno, co, sgnm
      real_t rstar, cstar, spout, spin, ushock, frac
      real_t unl,unr
      integer qnum
      integer spacedim

#include "EBEOSCommon.fh"

      qnum = QNUM-1
      call dumpprimitivevector(priml, qnum, densel, pressl, velocl, modianovel, entropy, internal, cvtemp, sound)
      call dumpprimitivevector(primr, qnum, denser, pressr, velocr, modianovel, entropy, internal, cvtemp, sound)

      spacedim = CH_SPACEDIM

      chf_dterm[
      inorm = facedir;
      itan1 = mod(facedir + 1,spacedim);
      itan2 = mod(facedir + 2,spacedim)]

      pl   = max(smallp, pressl)
      rhol = max(smallr, densel)
      unl  = velocl(inorm)

      pr   = max(smallp,pressr)
      rhor = max(smallr,denser)
      unr  = velocr(inorm)

      cl = sqrt(gamma*pl/rhol)
      cr = sqrt(gamma*pr/rhor)

      wl = rhol*cl
      wr = rhor*cr

      pstar = (wr*pl + wl*pr + wl*wr*(unl - unr))/(wl + wr)
      ustar = (wl*unl + wr*unr + pl - pr)/(wl + wr)

      if (ustar .gt. zero) then
         ro = rhol
         po = pl

         chf_dterm[
         uno = unl;
         velgod(itan1) = velocl(itan1);
         velgod(itan2) = velocl(itan2)]

         co = cl
         sgnm = one
      else
         ro = rhor
         po = pr

         chf_dterm[
         uno = unr;
         velgod(itan1) = velocr(itan1);
         velgod(itan2) = velocr(itan2)]

         co = cr
         sgnm = -one
      endif

      rstar = ro + (pstar - po)/co**2
      rstar = max(rstar, smallr)

      cstar = sqrt(abs(gamma*pstar/rstar))
      wstar = half*(cstar*rstar + co*ro)

      spout = co    - sgnm*uno
      spin  = cstar - sgnm*ustar

      ushock =  wstar/rstar - sgnm*ustar

      if (pstar.gt.po) then
         spout = ushock
         spin  = ushock
      endif

      frac = ((one + (spout + spin)/max(spout-spin,small))/two)
      frac = max(zero,min(one,frac))

      dengod        = ro  + frac*(rstar - ro)
      velgod(inorm) = uno + frac*(ustar - uno)
      pregod        = po  + frac*(pstar - po)

      if (spout.le.zero) then
         dengod        = ro
         velgod(inorm) = uno
         pregod        = po
      endif

      if (spin.gt.zero) then
         dengod         = rstar
         velgod(inorm)  = ustar
         pregod         = pstar
      endif

      dengod  = max(dengod , smallr)
      pregod  = max(pregod , smallp)

      call fillprimitivevector(primgod, qnum, dengod, pregod, velgod, modianovel, entropy, internal, cvtemp, sound)
      return
      end
cccccccccccccccc

      subroutine updaterz(
     &     chf_box[dcalc],
     &     chf_fra[state],
     &     chf_const_fra[flux],
     &     chf_const_int[facedir],
     &     chf_const_int[nconserved],
     &     chf_const_real[dtbydx])

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]

      integer spacedim,iv
#include "EBEOSCommon.fh"


      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      spacedim = CH_SPACEDIM

      do iv = 0,nconserved - 1
         chf_multido[dcalc;i;j;k]

         state(chf_ix[i;j;k],iv) = state(chf_ix[i;j;k],iv) -
     &        dtbydx *
     &        ( flux(chf_ix[i+ioff;j+joff;k+koff],iv)
     &        - flux(chf_ix[i     ;j     ;k     ],iv))
         chf_enddo
      enddo

c add in pressure terms in rz
      chf_multido[dcalc;i;j;k]

      if(facedir.eq.0) then
         state(chf_ix[i;j;k],CMOMX) = state(chf_ix[i;j;k],CMOMX) -
     &        dtbydx *
     &        ( flux(chf_ix[i+ioff;j+joff;k+koff],CPRES)
     &        - flux(chf_ix[i     ;j     ;k     ],CPRES))

      else if (facedir.eq. 1) then

         state(chf_ix[i;j;k],CMOMY) = state(chf_ix[i;j;k],CMOMY) -
     &        dtbydx *
     &        ( flux(chf_ix[i+ioff;j+joff;k+koff],CPRES)
     &        - flux(chf_ix[i     ;j     ;k     ],CPRES))

      endif
      chf_enddo

      return
      end

cccccccccccccccc
      subroutine floorcons(
     &     chf_box[dcalc],
     &     chf_fra[state])

      integer chf_ddecl[i; j; k]
#include "EBEOSCommon.fh"


c     enforce floors
      chf_multido[dcalc;i;j;k]

      state(chf_ix[i;j;k],CRHO) = max(state(chf_ix[i;j;k],CRHO), smallr)
      state(chf_ix[i;j;k],CENG) = max(state(chf_ix[i;j;k],CENG), small)

      chf_enddo

      return
      end
cccccccccccccccc
cccccccccccccccc
      subroutine floorprim(
     &     chf_box[dcalc],
     &     chf_fra[state])

      integer chf_ddecl[i; j; k]
#include "EBEOSCommon.fh"


c     enforce floors
      chf_multido[dcalc;i;j;k]

      state(chf_ix[i;j;k],QRHO) =  max(state(chf_ix[i;j;k],QRHO), smallr)
      state(chf_ix[i;j;k],QPRES) = max(state(chf_ix[i;j;k],QPRES),smallp)

      chf_enddo

      return
      end
