C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
#include "EBLGIntegrator.H"
cccccccccccccccccccc
cccccccccccccccccccc
        subroutine setexplosion(
     &    chf_const_real[augamma],
     &    chf_const_realvect[aucenter],
     &    chf_const_real[ausize],
     &    chf_const_real[aupnot],
     &    chf_const_real[aurnot],
     &    chf_const_real[aupone],
     &    chf_const_real[aurone],
     &    chf_const_real[ausmallness]
     $     )

#include "EBExplosionCommon.fh"
#include "EBEOSCommon.fh"

        real_t  rtemp, ptemp

        gamma = augamma
        idomodianoprob = 0

        chf_dterm[
        centerx = aucenter(0);
        centery = aucenter(1);
        centerz = aucenter(2)]

        size = ausize

        pnot = aupnot
        rnot = aurnot
        pone = aupone
        rone = aurone

        ptemp = pnot
        rtemp = rnot
        ptemp = pone
        rtemp = rone
        smallr = ausmallness*rnot
        smallu = ausmallness*rnot
        smallp = ausmallness*pnot

        return
        end
cccccccccccccccccccc
cccccccccccccccccccc

        subroutine explosioninit(
     &    chf_fra[u],
     &    chf_const_real[dx],
     &    chf_box[box])

        integer chf_ddecl[i;j;k]
        integer iv(0:CH_SPACEDIM-1)
        real_t density, energy, momentum(0:CH_SPACEDIM-1)

        chf_multido[box;i;j;k]

        chf_dterm[
        iv(0) = i;
        iv(1) = j;
        iv(2) = k]

        call pointexplosioninit(density, momentum, energy, iv, dx)

        chf_dterm[
        u(chf_ix[i;j;k],CMOMX) = momentum(0);
        u(chf_ix[i;j;k],CMOMY) = momentum(1);
        u(chf_ix[i;j;k],CMOMZ) = momentum(2)]

        u(chf_ix[i;j;k],CRHO) = density
        u(chf_ix[i;j;k],CENG) = energy

        chf_enddo

        return
        end
ccccccccccccccccccccc
ccccccccccccccccccccc
        subroutine pointexplosioninit(
     &    chf_real[density],
     &    chf_realvect[momentum],
     &    chf_real[energy],
     &    chf_const_intvect[iv],
     &    chf_const_real[dx])

        integer chf_ddecl[i;j;k]
        real_t x, y, z, pressure, rtemp, ptemp
        real_t chf_ddecl[xcenter;ycenter;zcenter]
        real_t rad0sqr,radsqr

#include "EBExplosionCommon.fh"
#include "EBEOSCommon.fh"

        chf_dterm[
        xcenter = centerx;
        ycenter = centery;
        zcenter = centerz]

        chf_dterm[
        i = iv(0);
        j = iv(1);
        k = iv(2)]

        rad0sqr = size*size
        ptemp = pnot
        rtemp = rnot
        ptemp = pone
        rtemp = rone

c     this is so z gets set even in 2D
        z = (j + half)*dx - ycenter
        chf_dterm[
        x = (i + half)*dx - xcenter;
        y = (j + half)*dx - ycenter;
        z = (k + half)*dx - zcenter]

        radsqr = chf_dterm[x*x; + y*y; + z*z]

c     linear IC
        if (x .ge. size) then
           density = rnot
           pressure = pnot
        else
           density = rone
           pressure = pone
        endif

c     circular explosion
c        if (radsqr .ge. rad0sqr) then
c           density = rnot
c           pressure = pnot
c        else
c           density = rone
c           pressure = pone
c        endif

        chf_dterm[
        momentum(0) = zero;
        momentum(1) = zero;
        momentum(2) = zero]

        energy =  pressure/(gamma - one)

        return
        end
