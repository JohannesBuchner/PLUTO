C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
#include "EBLGIntegrator.H"
cccccccccccccccccccc
cccccccccccccccccccc
        subroutine setsmoothbump(
     &    chf_const_real[augamma],
     &    chf_const_realvect[aucenter],
     &    chf_const_real[aumach],
     &    chf_const_real[aurnot],
     &    chf_const_real[ausmallness]
     $     )

#include "SmoothBumpCommon.fh"
#include "EBEOSCommon.fh"

        real_t  rtemp, ptemp

        gamma = augamma

        chf_dterm[
        centerx = aucenter(0);
        centery = aucenter(1);
        centerz = aucenter(2)]
        conden = gamma
        conpress = one
        consound = one
        mach = aumach
        conmaxvel = mach*consound
        rnot = aurnot

        smallr = ausmallness
        smallu = ausmallness
        smallp = ausmallness

        return
        end
cccccccccccccccccccc
cccccccccccccccccccc

        subroutine smoothbumpinit(
     &    chf_fra[u],
     &    chf_const_real[dx],
     &    chf_box[box])

        integer chf_ddecl[i;j;k]
        integer iv(0:CH_SPACEDIM-1)
        real_t density, energy, momentum(0:CH_SPACEDIM-1)

        chf_multido[box;i;j;k]

        chf_dterm[
        iv(0) = i;
        iv(1) = j;
        iv(2) = k]

        call pointsmoothbumpinit(density, momentum, energy, iv, dx)

        chf_dterm[
        u(chf_ix[i;j;k],CMOMX) = momentum(0);
        u(chf_ix[i;j;k],CMOMY) = momentum(1);
        u(chf_ix[i;j;k],CMOMZ) = momentum(2)]

        u(chf_ix[i;j;k],CRHO) = density
        u(chf_ix[i;j;k],CENG) = energy

        chf_enddo

        return
        end
ccccccccccccccccccccc
        subroutine pointsmoothbumpinit(
     &    chf_real[density],
     &    chf_realvect[momentum],
     &    chf_real[energy],
     &    chf_const_intvect[iv],
     &    chf_const_real[dx])

        integer chf_ddecl[i;j;k]
        real_t  chf_ddecl[x; y; z]
        real_t  chf_ddecl[vx; vy; vz]
        real_t chf_ddecl[xcenter;ycenter;zcenter]
        real_t rad0sqr,radsqr,pressure, vtheta, rad, sound, rnotsq
        real_t normradsq, bumpval,pie, sumvel, ke
#if CH_SPACEDIM==3
        real_t rx, ry, rz
#endif

#include "SmoothBumpCommon.fh"
#include "EBEOSCommon.fh"
#include "CONSTANTS.H"

        pie = PI
        chf_dterm[
        xcenter = centerx;
        ycenter = centery;
        zcenter = centerz]

        chf_dterm[
        i = iv(0);
        j = iv(1);
        k = iv(2)]


        chf_dterm[
        x = (i + half)*dx - xcenter;
        y = (j + half)*dx - ycenter;
        z = (k + half)*dx - zcenter]

        radsqr = chf_dterm[x*x; + y*y; + z*z]
        rad = sqrt(radsqr)

        rnotsq = rnot*rnot
c        normradsq = rad/rnot
c        bumpval = sin(half*pie*normradsq)*(sin(half*pie*(one -normradsq)))
        normradsq = 100.*(rad/rnot - half)*(rad/rnot - half)
        bumpval =  exp(-normradsq)

c        bumpval = sin(pie*rad/rnot)*sin(pie*rad/rnot)

        density  = gamma*(one + 0.01*mach*bumpval)
        pressure =       (one + 0.01*mach*bumpval)
c        density = gamma
c        pressure = one
c        density = ten*gamma
c        pressure = ten
        sound = sqrt(gamma*pressure/density)
        vtheta   = mach*sound

        chf_dterm[
        x = (i + half)*dx - xcenter;
        y = (j + half)*dx - ycenter;
        z = (k + half)*dx - zcenter]

#if CH_SPACEDIM==2
        vx =  -vtheta*y*bumpval
        vy =   vtheta*x*bumpval
#else
        rx = sqrt(z*z + y*y)/rad
        ry = sqrt(z*z + x*x)/rad
        rz = sqrt(x*x + y*y)/rad

        vx = -bumpval*vtheta*rx/rad
        vy =  bumpval*vtheta*ry/rad
        vz =  bumpval*vtheta*rz/rad
#endif

        chf_dterm[
        momentum(0) = density*vx;
        momentum(1) = density*vy;
        momentum(2) = density*vz]

        chf_dterm[
        sumvel  = vx*vx;+vy*vy;+vz*vz]

        ke = half*density*sumvel

        energy =  ke + pressure/(gamma - one)

        return
        end
