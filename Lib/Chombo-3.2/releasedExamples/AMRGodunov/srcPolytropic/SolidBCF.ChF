C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

C
C     Implement solid wall conserved variable boundary fluxes and primitive
C     variable boundary slopes
C

#include "CONSTANTS.H"
#include "LGintegrator.H"

        subroutine SOLIDBCF(
     &    CHF_FRA[Wgdnv],
     &    CHF_CONST_FRA[Wextrap],
     &    CHF_CONST_FRA[W],
     &    CHF_CONST_INT[lohisign],
     &    CHF_CONST_INT[dir],
     &    CHF_BOX[box])

#include "EosCommon.fh"

        real_t unorm,rho,pres,speed
        integer CHF_DDECL[i;j;k]

        CHF_MULTIDO[box;i;j;k]
          unorm =     Wextrap(CHF_IX[i;j;k],WVELX + dir)
          rho   = max(Wextrap(CHF_IX[i;j;k],WRHO ),smallr)
          pres  = max(Wextrap(CHF_IX[i;j;k],WPRES),smallp)

          speed = sqrt(gamma * pres / rho)

          Wgdnv(CHF_IX[i;j;k],WRHO) = rho

          CHF_DTERM[
          Wgdnv(CHF_IX[i;j;k],WVELX) = zero;
          Wgdnv(CHF_IX[i;j;k],WVELY) = zero;
          Wgdnv(CHF_IX[i;j;k],WVELZ) = zero]

          Wgdnv(CHF_IX[i;j;k],WPRES) = pres + lohisign * rho * unorm * speed
        CHF_ENDDO

        return
        end

        subroutine SLOPEBCSF(
     &    CHF_FRA[dW],
     &    CHF_CONST_FRA[W],
     &    CHF_CONST_INT[dir],
     &    CHF_BOX[loBox],
     &    CHF_CONST_INT[hasLo],
     &    CHF_BOX[hiBox],
     &    CHF_CONST_INT[hasHi])

        integer CHF_DDECL[i;j;k],CHF_DDECL[ioff;joff;koff]
        integer CHF_DDECL[inorm;itan1;itan2],spacedim
        real_t dvhi,dvlo,dvmin

        spacedim = CH_SPACEDIM

        CHF_DTERM[
        ioff = CHF_ID(0,dir);
        joff = CHF_ID(1,dir);
        koff = CHF_ID(2,dir)]

        CHF_DTERM[
        inorm = WVELX + dir;
        itan1 = WVELX + mod(dir + 1,spacedim);
        itan2 = WVELX + mod(dir + 2,spacedim)]

        if (hasLo .eq. 1) then
          CHF_MULTIDO[loBox;i;j;k]
            dW(CHF_IX[i;j;k],WRHO) = zero

            dvhi = W(CHF_IX[i + ioff;j + joff;k + koff],inorm) -
     &             W(CHF_IX[i       ;j       ;k       ],inorm)
            dvlo = W(CHF_IX[i       ;j       ;k       ],inorm) * two

            dvmin = min(two * abs(dvhi),abs(dvlo)) * sign(one,dvlo)

            if (dvlo*dvhi .lt. zero) dvmin = zero

            CHF_DTERM[
            dW(CHF_IX[i;j;k],inorm) = dvmin;
            dW(CHF_IX[i;j;k],itan1) = zero;
            dW(CHF_IX[i;j;k],itan2) = zero]

            dW(CHF_IX[i;j;k],WPRES) = zero
          CHF_ENDDO
        endif

        if (hasHi .eq. 1) then
          CHF_MULTIDO[hiBox;i;j;k]
            dW(CHF_IX[i;j;k],WRHO) = zero

            dvhi =  W(CHF_IX[i       ;j       ;k       ],inorm) -
     &              W(CHF_IX[i - ioff;j - joff;k - koff],inorm)
            dvlo = -W(CHF_IX[i       ;j       ;k       ],inorm) * two

            dvmin = min(two * abs(dvhi),abs(dvlo)) * sign(one,dvlo)

            if (dvlo*dvhi .lt. zero) dvmin = zero

            CHF_DTERM[
            dW(CHF_IX[i;j;k],inorm) = dvmin;
            dW(CHF_IX[i;j;k],itan1) = zero;
            dW(CHF_IX[i;j;k],itan2) = zero]

            dW(CHF_IX[i;j;k],WPRES) = zero
          CHF_ENDDO
        endif

        return
        end
