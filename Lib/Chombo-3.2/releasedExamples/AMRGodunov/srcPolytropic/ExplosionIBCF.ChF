C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
#include "LGintegrator.H"

        subroutine EXPLOSIONSETF(
     &    CHF_REAL[ausmallPressure],
     &    CHF_CONST_REAL[augamma],
     &    CHF_CONST_REAL[aums],
     &    CHF_CONST_REALVECT[aucenter],
     &    CHF_CONST_REAL[ausize],
     &    CHF_CONST_REALVECT[auvelocity],
     &    CHF_CONST_REAL[auartvisc])

#include "ExplosionCommon.fh"
#include "EosCommon.fh"

        real_t r0,p0,p,ww,umag

        gamma = augamma
        ms = aums

        CHF_DTERM[
        centerx = aucenter(0);
        centery = aucenter(1);
        centerz = aucenter(2)]

        size = ausize

        CHF_DTERM[
        velx = auvelocity(0);
        vely = auvelocity(1);
        velz = auvelocity(2)]

        artvisc = auartvisc

        p0 = one
        r0 = gamma

        ww = ms * r0

        p = ((ms**2 - one) * (two * gamma) / (gamma + one) + one) * p0

        umag = (p - p0) / ww

        smallr = small * r0
        smallu = small * umag
        smallp = small * r0 * half * umag*umag

        ausmallPressure = smallp

        return
        end

        subroutine EXPLOSIONINITF(
     &    CHF_FRA[U],
     &    CHF_CONST_REAL[dx],
     &    CHF_BOX[box])

#include "ExplosionCommon.fh"
#include "EosCommon.fh"

        real_t ke,r0,p0,p,uu,vv,ww,umag,r
        integer CHF_DDECL[i;j;k]
        real_t CHF_DDECL[x;y;z]
        real_t CHF_DDECL[xcenter;ycenter;zcenter]
        real_t rad0sqr,radsqr

        CHF_DTERM[
        xcenter = centerx;
        ycenter = centery;
        zcenter = centerz]

        rad0sqr = size*size

        p0 = one
        r0 = gamma

        ww = ms * r0

        p = ((ms**2 - one) * (two * gamma) / (gamma + one) + one) * p0
        r = one / (one / r0 - (p - p0) / ww**2)

        umag = (p - p0) / ww

        CHF_DTERM[
        uu = velx;
        vv = vely;
        ww = velz]

        ke = half*(CHF_DTERM[uu*uu; + vv*vv; + ww*ww])

        CHF_MULTIDO[box;i;j;k]
          CHF_DTERM[
          x = (i + half) * dx - xcenter;
          y = (j + half) * dx - ycenter;
          z = (k + half) * dx - zcenter]

          radsqr = CHF_DTERM[x*x; + y*y; + z*z]

          if (radsqr .ge. rad0sqr) then
            U(CHF_IX[i;j;k],URHO) = r0

            CHF_DTERM[
            U(CHF_IX[i;j;k],UMOMX) = uu * r0;
            U(CHF_IX[i;j;k],UMOMY) = vv * r0;
            U(CHF_IX[i;j;k],UMOMZ) = ww * r0]

            U(CHF_IX[i;j;k],UENG) = p0 / (gamma - one) + r0 * ke
          else
            U(CHF_IX[i;j;k],URHO) = r

            CHF_DTERM[
            U(CHF_IX[i;j;k],UMOMX) = uu * r;
            U(CHF_IX[i;j;k],UMOMY) = vv * r;
            U(CHF_IX[i;j;k],UMOMZ) = ww * r]

            U(CHF_IX[i;j;k],UENG) = p / (gamma - one) + r * ke
          endif
        CHF_ENDDO

        return
        end
