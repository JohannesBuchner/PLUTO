C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"


c ----------------------------------------------------------------
c  this subroutine, intended as a quick hack, does first-order
c  upwind cell-to-edge.
c
c  INPUTS/OUTPUTS:
c  edgeState <=  upwinded edge-centered state
c  cellState  => cell-centered state
c  edgeVel    => edge-centered advection velocity
c  edgeBox    => edge-centered box which we're filling
c  dir        => component direction
c ----------------------------------------------------------------
      subroutine UPWINDCELLTOEDGE(CHF_FRA1[edgeState],
     &                            CHF_CONST_FRA1[cellState],
     &                            CHF_CONST_FRA[edgeVel],
     &                            CHF_BOX[edgeBox],
     &                            CHF_CONST_INT[dir])

c ::: local variables
      integer CHF_DDECL[i; j; k]
      integer CHF_DDECL[ii;jj;kk]

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir)]

c ::: loop over edge-centered box and do upwinding
      CHF_MULTIDO[edgeBox; i;j;k]


      if (edgeVel(CHF_IX[i;j;k],0).gt.0) then
         edgeState(CHF_IX[i;j;k]) = cellState(CHF_IX[i-ii;j-jj;k-kk])
      else if (edgeVel(CHF_IX[i;j;k],0).lt.0) then
         edgeState(CHF_IX[i;j;k]) = cellState(CHF_IX[i;j;k])
      else
         edgeState(CHF_IX[i;j;k]) = half*(cellState(CHF_IX[i;j;k])
     &                                +cellState(CHF_IX[i-ii;j-jj;k-kk]))
      endif

      CHF_ENDDO

      return
      end


c ---------------------------------------------------------------
c this subroutine computes 4th-order Van Leer limited slopes
c INPUTS/OUTPUTS:
c
c  delS   <=  slopes (approximation to undivided difference)
c  s       =>
c  gridBox =>
c  dir     =>
c  doLimit => if 1, limit slopes; if 0, don't limit slopes
c ---------------------------------------------------------------
      subroutine SLOPES(CHF_FRA1[delS], CHF_CONST_FRA1[s], CHF_BOX[gridBox],
     &                  CHF_CONST_INT[dir], CHF_CONST_INT[doLimit])

c ::: local variables
      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]
      REAL_T ds, discrim
c      REAL_T splus, s0, sminus

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir)]

      if (doLimit.eq.0) then
c   ::: compute unlimited slopes
         CHF_MULTIDO[gridBox;i;j;k]

         delS(CHF_IX[i;j;k]) = half*(s(CHF_IX[i+ii;j+jj;k+kk])
     &                              -s(CHF_IX[i-ii;j-jj;k-kk]))
         CHF_ENDDO

      else
         CHF_MULTIDO[gridBox;i;j;k]

c         splus = s(CHF_IX[i+ii;j+jj;k+kk])
c         sminus = s(CHF_IX[i-ii;j-jj;k-kk])
c         s0 = s(CHF_IX[i;j;k])

         ds = min(abs(s(CHF_IX[i;j;k])-s(CHF_IX[i+ii;j+jj;k+kk]))*two,
     &            abs(s(CHF_IX[i;j;k])-s(CHF_IX[i-ii;j-jj;k-kk]))*two,
     &            half*abs(s(CHF_IX[i+ii;j+jj;k+kk])
     &                    -s(CHF_IX[i-ii;j-jj;k-kk])))

         ds = ds*sign(one, s(CHF_IX[i+ii;j+jj;k+kk])
     &                    -s(CHF_IX[i-ii;j-jj;k-kk]))


         discrim = (s(CHF_IX[i+ii;j+jj;k+kk])
     &              -s(CHF_IX[i;j;k]))
     &            *(s(CHF_IX[i;j;k])
     &              -s(CHF_IX[i-ii;j-jj;k-kk]))

         if (discrim.gt.0) then
            delS(CHF_IX[i;j;k]) = ds
         else
            delS(CHF_IX[i;j;k]) = 0
         endif

         CHF_ENDDO

      endif

      return
      end


c ---------------------------------------------------------
c  this subroutine augments the cell-centered sHat with the
c  transverse derivative term (derivative is upwinded):
c  sHat = sHat - half*(dt/dx)*vel*d(s)/dx_{dir}
c
c  INPUTS/OUTPUTS:
c  sHat   <= predicted value which is being incremented
c  s       => old-time cell-centered value
c  vel     => cell-centered advection velocity
c  gridBox => box over which do do computation
c  dt      => timestep
c  dx      => grid spacing
c  dir     => direction in which to take derivative
c ---------------------------------------------------------
      subroutine TRANSVERSE(CHF_FRA1[sHat], CHF_CONST_FRA1[s],
     &                      CHF_CONST_FRA1[vel], CHF_BOX[gridBox],
     &                      CHF_CONST_REAL[dt], CHF_CONST_REAL[dx],
     &                      CHF_CONST_INT[dir])

c                            this variable was being computed, but not used.
c     &                      CHF_FRA1[dUpS])


c  ::: local variables
      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]
      REAL_T factor
c      REAL_T tanVel

      factor = half*dt/dx

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir)]

      CHF_MULTIDO[gridBox;i;j;k]


c ::: note that derivatives are upwinded
      if (vel(CHF_IX[i;j;k]).gt.0) then
         sHat(CHF_IX[i;j;k]) = sHat(CHF_IX[i;j;k])
     &                    -factor*vel(CHF_IX[i;j;k])
     &                           *(s(CHF_IX[i;j;k])
     &                            -s(CHF_IX[i-ii;j-jj;k-kk]))

c         dUpS(CHF_IX[i;j;k]) = factor*vel(CHF_IX[i;j;k])
c     &                           *(s(CHF_IX[i;j;k])
c     &                            -s(CHF_IX[i-ii;j-jj;k-kk]))

      else
         sHat(CHF_IX[i;j;k]) = sHat(CHF_IX[i;j;k])
     &                    -factor*vel(CHF_IX[i;j;k])
     &                           *(s(CHF_IX[i+ii;j+jj;k+kk])
     &                            -s(CHF_IX[i;j;k]))

c         dUpS(CHF_IX[i;j;k]) = factor*vel(CHF_IX[i;j;k])
c     &                           *(s(CHF_IX[i+ii;j+jj;k+kk])
c     &                            -s(CHF_IX[i;j;k]))

      endif

      CHF_ENDDO

      return
      end


c ----------------------------------------------------------------
c  this subroutine increments sHat with the tranverse cross term
c  (only applicable in 3-d) (derivatives are upwinded)
c  sHat = sHat + third*(dt/dx)^2*vel1*vel2*d^2(s)/(dx1dx2)
c  (9/18/03) -- Check the sign on this -- should increment be + or -?
c
c  INPUTS/OUTPUTS:
c  sHat   <= predicted value which is being incremented
c  s       => old-time cell-centered value
c  vel     => multidimensional cell-centered advection velocity
c  gridBox => box over which to do computation
c  dt      => timestep
c  dx      => grid spacing
c  dir     => direction in which dirivative is _not_ being taken
c ----------------------------------------------------------------
      subroutine TRANSVERSECROSS(CHF_FRA1[sHat],CHF_CONST_FRA1[s],
     &                           CHF_CONST_FRA[vel], CHF_BOX[gridBox],
     &                           CHF_CONST_REAL[dt], CHF_CONST_REAL[dx],
     &                           CHF_CONST_INT[dir])

c ::: local variables
      integer CHF_DDECL[i;j;k]
      integer dir1, dir2
c     i think return value of sign() is an integer in this case...
c     and CRAY didn't like the subscript of s not being integer.
c     PLUS!  this function is like 2 or 3 times faster after making
c     this change since it reduces the number of floating-point
c     instructions significantly.  (ndk)
c     REAL_T sign1, sign2
      integer sign1, sign2
      integer CHF_DDECL[ii1;jj1;kk1]
      integer CHF_DDECL[ii2;jj2;kk2]
      REAL_T factor

c      factor = third*dt*dt/(dx*dx)
      factor = sixth*dt*dt/(dx*dx)


      if (dir.eq.0) then
         dir1 = 1
         dir2 = 2
      else if (dir.eq.1) then
         dir1 = 0
         dir2 = 2
      else if (dir.eq.2) then
         dir1 = 0
         dir2 = 1
      else
c         call MAYDAY_ERROR()
      endif

      CHF_DTERM[
      ii1 = CHF_ID(dir1,0);
      jj1 = CHF_ID(dir1,1);
      kk1 = CHF_ID(dir1,2)]

      CHF_DTERM[
      ii2 = CHF_ID(dir2,0);
      jj2 = CHF_ID(dir2,1);
      kk2 = CHF_ID(dir2,2)]


      CHF_MULTIDO[gridBox;i;j;k]

         sign1 = sign(one,vel(CHF_IX[i;j;k],dir1))
         sign2 = sign(one,vel(CHF_IX[i;j;k],dir2))

         sHat(CHF_IX[i;j;k]) = sHat(CHF_IX[i;j;k])
     &        +factor*vel(CHF_IX[i;j;k],dir1)*vel(CHF_IX[i;j;k],dir2)
     &         *sign1*sign2*(
     &         +s(CHF_IX[i-sign2*ii2;j-sign2*jj2;k-sign2*kk2])
     &         -s(CHF_IX[i-sign1*ii1-sign2*ii2;j-sign1*jj1-sign2*jj2;k-sign1*kk1-sign2*kk2])

     &         -s(CHF_IX[i-sign1*ii1;j-sign1*jj1;k-sign1*kk1])
     &         +s(CHF_IX[i;j;k]))

      CHF_ENDDO

      return

      end


c --------------------------------------------------------------
c this subroutine computes left and right edge-centered
c states and then resolves them to compute sHalf
c
c INPUTS/OUTPUTS:
c sHalf  <=  upwinded edge-centered state
c sHat    => cell-centered s which includes transverse terms
c delS    => limited slopes in dir direction
c vel     => cell-centered velocity
c advVel  => edge-centered velocity used for upwinding
c edgeBox => edge-centered box over which sHalf is to be computed
c dt      => timestep
c dx      => grid spacing
c dir     => direction in which tracing is being done
c ---------------------------------------------------------------
      subroutine PREDICT(CHF_FRA1[sHalf],CHF_CONST_FRA1[sHat],
     &                   CHF_CONST_FRA1[delS],CHF_CONST_FRA1[vel],
     &                   CHF_CONST_FRA1[advVel], CHF_BOX[edgeBox],
     &                   CHF_CONST_REAL[dt], CHF_CONST_REAL[dx],
     &                   CHF_CONST_INT[dir])

c ::: local variables
      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]
      REAL_T sLft, sRgt, factor, dtOnDx

      dtOnDx = dt/dx

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir)]


c ::: loop over edges in edgeBox
      CHF_MULTIDO[edgeBox;i;j;k]

c change to sync with old code
c      factor = -half*min(one,one+dtOnDx*vel(CHF_IX[i;j;k]))
      factor = -half*min(one,one+dtOnDx*advVel(CHF_IX[i;j;k]))
      sRgt = sHat(CHF_IX[i;j;k]) + factor*delS(CHF_IX[i;j;k])

c      factor = half*min(one,
c     &                  one-dtOnDx*vel(CHF_IX[i-ii;j-jj;k-kk]))
      factor = half*min(one,
     &                  one-dtOnDx*advVel(CHF_IX[i;j;k]))
      sLft = sHat(CHF_IX[i-ii;j-jj;k-kk])
     &      +factor*delS(CHF_IX[i-ii;j-jj;k-kk])


c ::: now choose left or right state

      if (advVel(CHF_IX[i;j;k]).lt.0) then
         sHalf(CHF_IX[i;j;k]) = sRgt
      else if (advVel(CHF_IX[i;j;k]).gt.0) then
         sHalf(CHF_IX[i;j;k]) = sLft
      else
         sHalf(CHF_IX[i;j;k]) = half*(sLft+sRgt)
      endif

      CHF_ENDDO

      return
      end
