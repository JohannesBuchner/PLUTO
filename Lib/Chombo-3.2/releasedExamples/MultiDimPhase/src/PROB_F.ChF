C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

c define problem types

#define RANDOMIC 1
#define SUMSIN 2
#define BASICSINUSOIDAL 3
#define HALFNHALF 4
#define GAUSSIANS 5
#define MULTIGAUSSIAN 6

#define MAXSUM 10

c ---------------------------------------------------
c initialize phi
c idum is the random number seed, and is preserved from
c setphi call to setphi call by passing it in and out as an
c argument
c --------------------------------------------------
      subroutine SETPHI(CHF_FRA[phi],
     &                  CHF_BOX[box],
     &                  CHF_CONST_REAL[dx],
     &                  CHF_CONST_REALVECT[domsize],
     &                  CHF_CONST_REALVECT[origin])


      integer CHF_DDECL[i;j;k]
      integer n, ncomp
c      REAL_T rn
      REAL_T scale
      REAL_T CHF_DDECL[x;y;z]
      REAL_T a, b, lenscale
c      REAL_T Tmax, Tmin, Tmean, Trange
      integer probtype

c parameters for SUMSIN problem
      integer NUMSUM, sumcomp,m
      REAL_T x0(MAXSUM), y0(MAXSUM), z0(MAXSUM)
c      REAL_T alpha(MAXSUM), beta(MAXSUM), gamma(MAXSUM)
c      REAL_T sumscale(MAXSUM)
      REAL_T localtemp

c parameters for sum(gaussian) problem
      REAL_T mag(MAXSUM), rho(MAXSUM), radSqr
      REAL_T phiVal, perturbMag, perturbWaveNumber, perturb
      REAL_T perturbShift

c set problem type

      if (CH_SPACEDIM.eq.2) then
         probtype = GAUSSIANS
c         probtype = HALFNHALF
      else if (CH_SPACEDIM.eq.3) then
         probtype = MULTIGAUSSIAN
      endif

c      idum = -1

      ncomp = CHF_NCOMP[phi]
      scale = 1.0e-1


c      lenscale = one/eight
      lenscale = two/domsize(0)


      if (probtype .eq. BASICSINUSOIDAL) then

         do n=0, ncomp-1
           CHF_MULTIDO[box;i;j;k]

             CHF_DTERM[
                       x = origin(0) + dx*(i + half);
                       y = origin(1) + dx*(j+half);
                       z = origin(2) + dx*(k+half) ]


             phi(CHF_IX[i;j;k],n) = one+cos(lenscale*Pi*x)*cos(lenscale*Pi*y)

c     uncomment this line for 1-d cosine problem
c     phi(CHF_IX[i;j;k],n) = cos(lenscale*Pi*x)

            CHF_ENDDO
         enddo

      else if (probtype .eq. HALFNHALF) then
         do n = 0, ncomp -1

            CHF_MULTIDO[box;i;j;k]

            CHF_DTERM[
                      x = origin(0) + dx*(i + half);
                      y = origin(1) + dx*(j+half);
                      z = origin(2) + dx*(k+half) ]


            if (x.lt.half*domsize(0)) then
               phi(CHF_IX[i;j;k],n) = two
            else
               phi(CHF_IX[i;j;k],n) = one
            endif

          CHF_ENDDO

       enddo

      else if (probtype .eq. GAUSSIANS) then
         do n = 0, ncomp -1
            mag(1) = one/(two*sqrt(Pi))
            mag(2) = mag(1)
            CHF_MULTIDO[box;i;j;k]

              CHF_DTERM[
                        x = origin(0) + dx*(i + half);
                        y = origin(1) + dx*(j+half);
                        z = origin(2) + dx*(k+half) ]


c                 a = 0.5*exp((-(x-0.35)**2-(y-0.35)**2)/0.01)
c                 b = -0.5*exp((-(x-0.65)**2-(y-0.65)**2)/0.01)
c   I think this mirrors the problem from Woodward, 1982
                 a = mag(1)*exp((-(y-four)**2))
                 b = mag(2)*exp((-(y+four)**2))
c                 b = zero
                 phiVal = a+b

c  now incorporate sinusoidal perturbation in the x-direction
c                 phiVal = one
                 perturbMag = one/twenty
                 perturbWavenumber = one/twelve
                 perturbShift = three
                 perturb = sin(two*perturbWaveNumber*Pi*(x+perturbShift))
                 perturb = one + perturbMag*perturb
                 phiVal = phiVal*perturb

                 phi(CHF_IX[i;j;k],n) = phiVal
            CHF_ENDDO

         enddo

      else if (probtype .eq. MULTIGAUSSIAN) then

c in this probtype, initial condition will be a sum of gaussians
c for now, read in parameters from a file named gaussianIC.dat
c will be sum( mag*exp(radSqr/rho) )

c format for the file is:
c     number of components in the sum (less than MAXSUM)
c   then, for each component of the sum,
c   x0, y0 (and z0 in 3d) -- offset for sinusoidals
c   rho (width of gaussian), mag -- amount to scale sinusoidal by


         open(unit=33, file= 'gaussianIC.dat', status = 'old')
         read(33,*) numsum

c         if (numsum > MAXSUM) call MAYDAY_ERROR()

c  note that we read in all three components, even in 2d case, so that
c we can use the same inputs files in 2d as in 3d.
         do sumcomp = 1, numsum
            read(33,*) x0(sumcomp), y0(sumcomp), z0(sumcomp)
            read(33,*) rho(sumcomp), mag(sumcomp)
         enddo

         rewind(33)
         close(33)

c  first initialize phi to 0
         do n = 0, ncomp -1

            CHF_MULTIDO[box;i;j;k]

              phi(CHF_IX[i;j;k],n) = zero

            CHF_ENDDO
         enddo


         do n=0, ncomp-1
            CHF_MULTIDO[box; i;j;k]

              CHF_DTERM[
                        x = origin(0) + dx*(i + half);
                        y = origin(1) + dx*(j+half);
                        z = origin(2) + dx*(k+half) ]

c now loop over sum in this cell
              localtemp = 0.0
              do m = 1, numsum
                 radSqr = CHF_DTERM[(x-x0(m))**2;+(y-y0(m))**2;+(z-z0(m))**2]

                 a = exp((-radSqr)/rho(m))
                 localtemp = localtemp + mag(m)*a
                 phi(CHF_IX[i;j;k],0) = localtemp
              enddo
            CHF_ENDDO
          enddo

      else
         write (*,*) 'Bad Probtype = ', probtype
c         call MAYDAY_ERROR()
      endif

      return
      end


      subroutine SETVEL(CHF_FRA[vel],
     &                  CHF_BOX[box],
     &                  CHF_CONST_REAL[dx],
     &                  CHF_CONST_REALVECT[domsize],
     &                  CHF_CONST_REALVECT[origin])

      integer CHF_DDECL[i;j;k]
      REAL_T CHF_DDECL[x;y;z]

c first set velocity -- x-direction velocity is just "y" (which is
c really "vx" in phase space)
      CHF_MULTIDO[box; i;j;k]
         CHF_DTERM[
                   x = origin(0) + dx*(i+half);
                   y = origin(1) + dx*(j+half);
                   z = origin(2) + dx*(k+half) ]

          CHF_DTERM[
                    vel(CHF_IX[i;j;k],0) = y;
                    vel(CHF_IX[i;j;k],1) = zero;
                    vel(CHF_IX[i;j;k],2) = zero]

       CHF_ENDDO

       return
       end
