Each example has a single source file, <name>.cpp, a single file that
contains parameters, <name>.inputs, and produces a single HDF5 output file,
<name>.hdf5 unless otherwise noted (e.g., "nozzle").

Some of the examples aren't very interesting in 2D (see comments) and some
take 4-6 minutes to run (in serial) in 3D with optimization turned on.  It is
recommended to run these with optimization turned on since without, the code
runs 10-15 times slower.

The Embedded Boundary Menagerie currently contains:

  plane -
      A plane with specified normal passing through a specified point.

  sphere -
      A single sphere with specified center and radius.

  cylinder -
      A single (infinite) cylinder with specified axis and radius.

  ellipsoid -
      A single ellipsoid with specified center and "radii" - half the
      axis length in each axis direction.

  torus -
      A single torus with specified center, major radius, and minor
      radius.

  polynomial -
      A 5th order, 3D polynomial (56 coefficients) generated from 56
      points inside the unit cube.  In 2D, only the first 21
      coefficients are used.

  threeSpheres -
      The difference of two spheres unioned with a third sphere (a
      simple example of constructive solid geometry (CSG).

  cappedCylinder -
      A finite cylinder with specified radius, length, orientation,
      center, and capping (flat or spherical).  This uses both CSG
      objects and tranformation objects.

  gaussian -
      A gaussian bump with different spreads in the x and z directions.

  mollifiedBox -
      A function constructed as the intersection of 6 half-spaces that is
      then mollified (smoothed) using gaussian averaging.

  ribbonTorus -
      In 3D, a thin ellipse is rotated through 30 degrees in its plane and
      then used to make a surface of rotation (about the z-axis).  In 2D,
      it is simply the rotated ellipse.

  mobiusTorus -
      In 3D, a thin ellipse is used for a generalized surface of rotation
      where the angle of rotation in the r-z plane is linear with the
      angle around the surface.  The default is to rotate 3 halfturns.
      In 2D, it is simply the thin ellipse.

  helix -
      In 3D, a circle (parallel to the x-y plane) swept along a helix.
      In 2D, simply a slice of this.

  helicoil -
      In 3D, a circle swept perpendicularly along a helix.  In 2D, simply
      a slice of this.

  borromeanRings -
      In 3D, this is a version of the Borromean Rings.  It is a
      complicated example of CSG with lots of copy construction and
      reuse.  In 2D, it is simply two "concentric" ovals.

  spiral -
      In 2D, a circle swept along a spiral to form a spiral area.
      In 3D, the 2D function seen as graph.

  nozzle -
      An R-Z gas jet nozzle in 2D and the surface/volume of rotation
      generated by this in 3D (a 3D gas jet nozzle).  Based on some
      initial data from our collaborators at LBNL.  Note:  There is a
      2D, "nozzle2d.inputs", and a 3D, "nozzle3d.inputs", input file
      - the appropriate one is chosen automatically.  The 2D code
      generates the HDF5 output file "nozzle2d.hdf5" and the 3D code
      generates "nozzle3d.hdf5".

  packedChannel -
      A cylinder packed with non-overlapping circles/spheres which can
      vary in size.

  twoSpheres -
      The union of two spheres (for a heat flow problem).

  channelWithSpheres -
      The inside of a tilted cylinder minus a specified number of
      spheres randomly placed within the cylinder with radii randomly
      chosen in a specified range.

  datafile -
      An example of generating an implicit function from data in a
      file.  This example uses neutrophil cell data.  The data files,
      "datafile2d.ASCII.gz" and "datafile3d.ASCII.gz", are "gzip"ed
      and should be "gunzip"ed before the code is run.  In, 3D the
      entire dataset is used.  In 2D, one slice of the data is used.

  digitalElevationModel -
      An example of generating an implicit function from data in a
      Digital Elevation Model file (see the USGS for more DEM info).  
      This works in 2D or 3D.  In 3D, the datafile,
      "digitalElevationModel.sfbay.dat.gz" is "gzip"ed and needs to be
      "gunzip"ed before the code is run.  The input file is set up to
      generate San Francisco Bay in 3D. Edit the input file to test 2D,
      or a simpler version of 3D.

  sphereFlake -
      The recursive union of spheres with spheres. User can specify the
      number of recursion iterations. We place 2*Dim spheres on each parent
      sphere. Resembles a snow flake, thus the name (the name was coined 
      elsewhere).

  channel -
      A contraction/expansion geometry used in actual microfluidic 
      experiments at UC Berkeley.

  fuelElement -
      In 3D, a cylinder wrapped with a helical wire.  In 2D, this isn't
      very interesting.

  artery -
      A somewhat complicated mathematical function (in 2D and 3D) imitating
      an artery shape.

  swirl -
      A complicated, 3D model generated using CSG and lots of primate
      shapes/volumes.  In 2D, this isn't very interesting.

  turbine -
      Another complicated, 3D model generated using CSG and lots of
      primate shapes/volumes.  In 2D, it is a good cross-section.
