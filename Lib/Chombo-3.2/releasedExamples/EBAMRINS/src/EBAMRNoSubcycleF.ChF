C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
      subroutine MULTVELINTOFLUX(
     &     CHF_FRA[flux],
     &     CHF_FRA[vel],
     &     CHF_BOX[gridBox],
     &     CHF_CONST_INT[ncomp])

      integer CHF_DDECL[i;j;k]
      integer ivar


      do ivar=0, ncomp-1
         CHF_MULTIDO[gridBox; i; j; k]

         flux(CHF_IX[i;j;k], ivar) =
     &        flux(CHF_IX[i;j;k], ivar)*vel(CHF_IX[i;j;k], 0)

         CHF_ENDDO
      enddo

      return
      end
c ---------------------------------------------------------------
c This subroutine computes the dir component of vorticity
c
c INPUTS/OUTPUTS:
c vort   <=
c vel     =>
c gridBox =>
c dx      =>
c dir     => coordinate direction of vorticity component
c ----------------------------------------------------------------
      subroutine COMPUTEVORT(CHF_FRA1[vort], CHF_FRA[vel],
     &                       CHF_BOX[gridBox],
     &                       CHF_CONST_REAL[dx], CHF_CONST_INT[dir])


c ::: local variables
      integer CHF_DDECL[i;j;k]
      integer dir1, dir2
      REAL_T oneOnDx
c      REAL_T vel11,vel12,vel21, vel22
      REAL_T vortTemp
      integer ii1, jj1,kk1
      integer ii2,jj2,kk2

      oneOnDx = half/dx

c     this is just to shut up the compiler
      dir1 = -1
      dir2 = -1
c ::: formula will be vort(dir) = d(vel(dir2))/d(dir1) - d(vel(dir1))/d(dir2)
      if ((CH_SPACEDIM.eq.2).or.(dir.eq.2)) then
         dir1 = 0
         dir2 = 1
      else if (dir.eq.0) then
         dir1= 1
         dir2= 2
      else if (dir.eq.1) then
         dir1=2
         dir2=0
      else
         write(*,*) 'COMPUTEVORT: bad direction = ', dir
         call MAYDAY_ERROR()
      endif

      ii1 = CHF_ID(dir1,0)
      jj1 = CHF_ID(dir1,1)
      kk1 = CHF_ID(dir1,2)
      ii2 = CHF_ID(dir2,0)
      jj2 = CHF_ID(dir2,1)
      kk2 = CHF_ID(dir2,2)

      CHF_MULTIDO[gridBox; i; j; k]

c      vel11 = vel(CHF_IX[i+ii1; j+jj1;k+kk1],dir2)
c      vel12 = vel(CHF_IX[i-CHF_ID(dir1,0); j-CHF_ID(dir1,1);
c     &                   k-CHF_ID(dir1,2)],dir2)
c      vel21 = vel(CHF_IX[i+CHF_ID(dir2,0); j+CHF_ID(dir2,1);
c     &                   k+CHF_ID(dir2,2)],dir1)
c      vel22 = vel(CHF_IX[i-CHF_ID(dir2,0); j-CHF_ID(dir2,1);
c     &                   k-CHF_ID(dir2,2)],dir1)

c      vortTemp = oneOnDx*((vel(CHF_IX[i+CHF_ID(dir1,0);
c     &                                          j+CHF_ID(dir1,1);
c     &                                          k+CHF_ID(dir1,2)],dir2)
c     &                              -vel(CHF_IX[i-CHF_ID(dir1,0);
c     &                                          j-CHF_ID(dir1,1);
c     &                                          k-CHF_ID(dir1,2)],dir2))
c     &                             -(vel(CHF_IX[i+CHF_ID(dir2,0);
c     &                                          j+CHF_ID(dir2,1);
c     &                                          k+CHF_ID(dir2,2)],dir1)
c     &                              -vel(CHF_IX[i-CHF_ID(dir2,0);
c     &                                          j-CHF_ID(dir2,1);
c     &                                          k-CHF_ID(dir2,2)],dir1)))

      vortTemp = oneOnDx*((vel(CHF_IX[i+ii1;j+jj1;k+kk1],dir2)
     &                              -vel(CHF_IX[i-ii1;j-jj1;k-kk1],dir2))
     &                             -(vel(CHF_IX[i+ii2;j+jj2;k+kk2],dir1)
     &                              -vel(CHF_IX[i-ii2;j-jj2;k-kk2],dir1)))

      vort(CHF_IX[i;j;k]) = oneOnDx*((vel(CHF_IX[i+ii1;j+jj1;k+kk1],dir2)
     &                              -vel(CHF_IX[i-ii1;j-jj1;k-kk1],dir2))
     &                             -(vel(CHF_IX[i+ii2;j+jj2;k+kk2],dir1)
     &                              -vel(CHF_IX[i-ii2;j-jj2;k-kk2],dir1)))


c      vort(CHF_IX[i;j;k]) = oneOnDx*((vel(CHF_IX[i+1;j;k],1)
c     &                               -vel(CHF_IX[i-1;j;k],1))
c     &                              -(vel(CHF_IX[i;j+1;k],0)
c     &                               -vel(CHF_IX[i;j-1;k],0)))

      CHF_ENDDO

      return
      end



c ---------------------------------------------------------------
c This subroutine computes the kinetic energy
c
c INPUTS/OUTPUTS:
c energy   <=
c vel     =>
c gridBox =>
c ----------------------------------------------------------------
      subroutine KINETICENERGY(CHF_FRA1[energy], CHF_CONST_FRA[vel],
     &                         CHF_BOX[gridBox])


c ::: local variables
      integer CHF_DDECL[i; j; k]


      CHF_MULTIDO[gridBox; i; j; k]

      energy(CHF_IX[i;j;k]) = half*(CHF_DTERM[vel(CHF_IX[i;j;k],0)**2;
     &                                       +vel(CHF_IX[i;j;k],1)**2;
     &                                       +vel(CHF_IX[i;j;k],2)**2])

      CHF_ENDDO

      return
      end




c -----------------------------------------------------------------
c  utility function to compute magnitude of vector
c  INPUTS/OUTPUTS:
c  magvector <= magnitude of vector
c  vect     => SpaceDim-component vector
c  gridBox  => box over which to compute norm
c ----------------------------------------------------------------
      subroutine MAGVECT(CHF_FRA1[magVector], CHF_FRA[vect],
     &                   CHF_BOX[gridBox])

      integer CHF_DDECL[i;j;k]
      integer dir


      CHF_MULTIDO[gridBox; i;j;k]
         magVector(CHF_IX[i;j;k]) = 0
      CHF_ENDDO

c      do dir=0, CH_SPACEDIM-1
      do dir=0, CHF_NCOMP[vect]-1

         CHF_MULTIDO[gridBox; i;j;k]
            magVector(CHF_IX[i;j;k]) = magVector(CHF_IX[i;j;k])
     &                       +vect(CHF_IX[i;j;k],dir)*vect(CHF_IX[i;j;k],dir)
         CHF_ENDDO

      enddo


      CHF_MULTIDO[gridBox; i;j;k]
        magVector(CHF_IX[i;j;k]) = sqrt(magVector(CHF_IX[i;j;k]))
      CHF_ENDDO


      return
      end


c ---------------------------------------------------------------
c  computes centered derivative in one direction
c
c  INPUTS/OUTPUTS:
c  deriv <= centered derivative of phi in direction dir
c  phi    => what we're differentiating
c  grid   => grid interior
c  dx     => cell spacing
c  dir    => direction of derivative
c  --------------------------------------------------------------
      subroutine CENTERED_DERIV(CHF_FRA1[deriv],
     &                          CHF_CONST_FRA1[phi],
     &                          CHF_BOX[grid],
     &                          CHF_CONST_REAL[dx],
     &                          CHF_INT[dir])


c ::: local variables
      integer CHF_DDECL[i;j;k]
      REAL oneOnDx


c ::: should probably do indexing check

       oneOnDx = 1.0d0/dx

       CHF_MULTIDO[grid; i;j;k]
         deriv(CHF_IX[i;j;k]) = oneOnDx*(phi(CHF_IX[i+CHF_ID(dir,0);
     &                                             j+CHF_ID(dir,1);
     &                                             k+CHF_ID(dir,2)])
     &                              -phi(CHF_IX[i-CHF_ID(dir,0);
     &                                          j-CHF_ID(dir,1);
     &                                          k-CHF_ID(dir,2)]))
       CHF_ENDDO

       return
       end


