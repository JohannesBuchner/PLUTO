C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

      subroutine ebgdffacedivincr(
     $     chf_fra1[divvel],
     $     chf_const_fra[vel],
     $     chf_const_fra[gradvel],
     $     chf_box[region],
     $     chf_const_real[dx],
     $     chf_const_int[facedir],
     $     chf_const_int[divdir])

      integer chf_ddecl[ii,i;jj,j;kk,k], gradcomp, sdim

      sdim = CH_SPACEDIM
      chf_dterm[
          ii = chf_id(facedir, 0);
          jj = chf_id(facedir, 1);
          kk = chf_id(facedir, 2)]

          if (facedir .eq. divdir) then

             chf_multido[region;i;j;k]

             divvel(chf_ix[i;j;k]) = divvel(chf_ix[i;j;k]) +
     $            (    vel(chf_ix[i   ;j   ;k   ],facedir)
     $            -    vel(chf_ix[i-ii;j-jj;k-kk],facedir) )/dx


             chf_enddo

          else
c     remember this is partial vdivdir/partial xdivdir
             gradcomp = divdir + sdim*divdir
             chf_multido[region;i;j;k]

             divvel(chf_ix[i;j;k]) = divvel(chf_ix[i;j;k]) +
     $            ( gradvel(chf_ix[i   ;j   ;k   ], gradcomp)
     $            + gradvel(chf_ix[i-ii;j-jj;k-kk], gradcomp) )/two


             chf_enddo

          endif

      return
      end


      subroutine ebgdfgradvel(
     $     chf_fra1[grad],
     $     chf_const_fra1[vel],
     $     chf_box[lobox],
     $     chf_const_int[haslo],
     $     chf_box[hibox],
     $     chf_const_int[hashi],
     $     chf_box[centerbox],
     $     chf_const_real[dx],
     $     chf_const_int[divdir],
     $     chf_const_int[loworderoneside])

      integer chf_ddecl[ii,i;jj,j;kk,k]

      chf_dterm[
      ii = chf_id(divdir, 0);
      jj = chf_id(divdir, 1);
      kk = chf_id(divdir, 2)]

      chf_multido[centerbox;i;j;k]

      grad(chf_ix[i;j;k]) =
     $     (    vel(chf_ix[i+ii;j+jj;k+kk])
     $     -    vel(chf_ix[i-ii;j-jj;k-kk]) )/(two*dx)


      chf_enddo

      if(haslo.eq.1) then


         if(loworderoneside.eq.1) then

            chf_multido[lobox;i;j;k]

            grad(chf_ix[i;j;k]) =
     $           ( vel(chf_ix[i+ii;j+jj;k+kk])
     $           - vel(chf_ix[i   ;j   ;k   ]))/(dx)

            chf_enddo

         else

            chf_multido[lobox;i;j;k]

            grad(chf_ix[i;j;k]) =
     $           (four*(vel(chf_ix[i+  ii;j+  jj;k+  kk]) - vel(chf_ix[i;j;k]))
     $           -     (vel(chf_ix[i+2*ii;j+2*jj;k+2*kk]) - vel(chf_ix[i;j;k])))/(two*dx)


            chf_enddo

         endif
      endif

      if(hashi.eq.1) then
         if(loworderoneside.eq.1) then

            chf_multido[hibox;i;j;k]

            grad(chf_ix[i;j;k]) =
     $           ( vel(chf_ix[i-ii;j-jj;k-kk])
     $           - vel(chf_ix[i   ;j   ;k   ]))/(-dx)

            chf_enddo
         else

            chf_multido[hibox;i;j;k]

            grad(chf_ix[i;j;k]) =
     $           (four*(vel(chf_ix[i-  ii;j-  jj;k-  kk]) - vel(chf_ix[i;j;k]))
     $           -     (vel(chf_ix[i-2*ii;j-2*jj;k-2*kk]) - vel(chf_ix[i;j;k])))/(-two*dx)

            chf_enddo


         endif
      endif

      return
      end


      subroutine ebgdfcellgrad(
     $     chf_fra1[graddiv],
     $     chf_const_fra1[div],
     $     chf_const_fra1[lambda],
     $     chf_box[region],
     $     chf_const_real[dx],
     $     chf_const_int[facedir],
     $     chf_const_int[imultbylambda]
     $     )

      integer chf_ddecl[ii,i;jj,j;kk,k]

      chf_dterm[
      ii = chf_id(facedir, 0);
      jj = chf_id(facedir, 1);
      kk = chf_id(facedir, 2)]

      chf_multido[region;i;j;k]

      graddiv(chf_ix[i;j;k]) =
     $     (    div(chf_ix[i+ii;j+jj;k+kk])
     $     -    div(chf_ix[i   ;j   ;k   ]) )/dx

      if(imultbylambda .eq. 1) then
         graddiv(chf_ix[i;j;k]) = lambda(chf_ix[i;j;k])*graddiv(chf_ix[i;j;k])
      endif

      chf_enddo

      return
      end
