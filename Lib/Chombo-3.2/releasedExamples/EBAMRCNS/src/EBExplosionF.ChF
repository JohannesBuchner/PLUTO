C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
#include "EBLGIntegrator.H"
cccccccccccccccccccc
cccccccccccccccccccc
        subroutine setexplosion(
     &    chf_const_real[augamma],
     &    chf_const_realvect[aucenter],
     &    chf_const_real[ausize],
     &    chf_const_real[aupnot],
     &    chf_const_real[aurnot],
     &    chf_const_real[aupone],
     &    chf_const_real[aurone],
     &    chf_const_real[ausmallness]
     $     )

#include "EBExplosionCommon.fh"
#include "EBEOSCommon.fh"

        real_t  rtemp, ptemp

        gamma = augamma

        chf_dterm[
        centerx = aucenter(0);
        centery = aucenter(1);
        centerz = aucenter(2)]

        size = ausize

        pnot = aupnot
        rnot = aurnot
        pone = aupone
        rone = aurone

        ptemp = pnot
        rtemp = rnot
        ptemp = pone
        rtemp = rone
        small = ausmallness
        smallr = ausmallness*rnot
        smallu = ausmallness*rnot
        smallp = ausmallness*pnot

        return
        end
cccccccccccccccccccc
cccccccccccccccccccc

        subroutine explosioninit(
     &     chf_fra[u],
     &     chf_const_real[dx],
     $     chf_const_int[oned],
     $     chf_const_realvect[onednorm],
     $     chf_const_realvect[onedorig],
     &     chf_box[box])

        integer chf_ddecl[i;j;k]
        integer iv(0:CH_SPACEDIM-1)
        real_t density, energy, momentum(0:CH_SPACEDIM-1)

        chf_multido[box;i;j;k]

        chf_dterm[
        iv(0) = i;
        iv(1) = j;
        iv(2) = k]

        call pointexplosioninit(density, momentum, energy, iv, dx,
     $       oned,onednorm,onedorig)

        chf_dterm[
        u(chf_ix[i;j;k],CMOMX) = momentum(0);
        u(chf_ix[i;j;k],CMOMY) = momentum(1);
        u(chf_ix[i;j;k],CMOMZ) = momentum(2)]

        u(chf_ix[i;j;k],CRHO) = density
        u(chf_ix[i;j;k],CENG) = energy

        chf_enddo

        return
        end
ccccccccccccccccccccc
ccccccccccccccccccccc
      subroutine pointexplosioninit(
     &     chf_real[density],
     &     chf_realvect[momentum],
     &     chf_real[energy],
     &     chf_const_intvect[iv],
     &     chf_const_real[dx],
     $     chf_const_int[oned],
     $     chf_const_realvect[oneDNorm],
     $     chf_const_realvect[oneDOrig])

        integer chf_ddecl[i;j;k]
        integer onhiside
        real_t  chf_ddecl[x;y;z], pressure, rtemp, ptemp, asq, bsq
        real_t  chf_ddecl[xcenter;ycenter;zcenter]
        real_t  xminorig(0:CH_SPACEDIM-1)
        real_t dotnorm(0:CH_SPACEDIM-1)
        real_t rad0sqr,radsqr, dotprod, csq

#include "EBExplosionCommon.fh"
#include "EBEOSCommon.fh"

        chf_dterm[
        xcenter = centerx;
        ycenter = centery;
        zcenter = centerz]

        chf_dterm[
        i = iv(0);
        j = iv(1);
        k = iv(2)]

        rad0sqr = size*size
        ptemp = pnot
        rtemp = rnot
        ptemp = pone
        rtemp = rone

        chf_dterm[
        x = (i + half)*dx - xcenter;
        y = (j + half)*dx - ycenter;
        z = (k + half)*dx - zcenter]

        radsqr = chf_dterm[x*x; + y*y; + z*z]


        if(oned .eq. 1) then
        
           dotprod = chf_dterm[
     $          x*oneDNorm(0); +
     $          y*oneDNorm(1); +
     $          z*oneDNorm(2)]

           if(dotprod .ge. size) then
              onhiside = 1
           else
              onhiside = 0
           endif

        else if (oned.eq. 2) then
c      we compute the distance from a point to a line

           chf_dterm[
           x = (i + half)*dx;
           y = (j + half)*dx;
           z = (k + half)*dx]

           chf_dterm[ xminorig(0) = (x-oneDOrig(0));
           xminorig(1) = (y-oneDOrig(1));
           xminorig(2) = (z-oneDOrig(2))]

           bsq = chf_dterm[
     $          oneDNorm(0)*xminorig(0);
     $        + oneDNorm(1)*xminorig(1);
     $        + oneDNorm(2)*xminorig(2)]

           bsq = bsq*bsq

           asq = chf_dterm[
     $           xminorig(0)*xminorig(0);
     $         + xminorig(1)*xminorig(1);
     $         + xminorig(2)*xminorig(2)]

           csq = asq - bsq

           if (csq .ge. rad0sqr) then
              onhiside = 1
           else
              onhiside = 0
           endif
           

        else
c     non-oned is just an sphereical explosion
           if (radsqr .ge. rad0sqr) then
              onhiside = 1
           else
              onhiside = 0
           endif
        endif

        if (onhiside .eq. 1) then
           density = rnot
           pressure = pnot
        else
           density = rone
           pressure = pone
        endif

        chf_dterm[
        momentum(0) = zero;
        momentum(1) = zero;
        momentum(2) = zero]

        energy =  pressure/(gamma - one)

        return
        end
