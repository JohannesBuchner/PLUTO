C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"
c     added by dmartin, 11 Oct 2007
#define SMALLNUMBER 1.0d-9

        subroutine RIEMANNF(
     &    CHF_FRA[Wgdnv],
     &    CHF_CONST_FRA[WLeft],
     &    CHF_CONST_FRA[WRight],
     &    CHF_CONST_FRA1[advVel],
     &    CHF_CONST_INT[idir],
     &    CHF_BOX[box])

        integer CHF_DDECL[i; j; k]
        integer n
        real_t sl,sr
        real_t so
        real_t ustar

        integer spacedim

        spacedim = CH_SPACEDIM

c       Constant gamma predictor step.

        do n=0, CHF_NCOMP[WLeft]-1

          CHF_MULTIDO[box;i;j;k]
c     don't need floors in this simple problem
c           sl = max(smallr,WLeft(CHF_IX[i;j;k],n))
            sl =  WLeft(CHF_IX[i;j;k],n)

c     don't need floors in this simple problem
c           sr = max(smallr,WRight(CHF_IX[i;j;k],n) )
            sr = WRight(CHF_IX[i;j;k],n)

c assumption for this function is that advection velocity is a
c single-component face-centered FAB containing the normal advection
c velocity
            ustar = advVel(CHF_IX[i;j;k])

            if (ustar .gt. zero) then
              so = sl
            else
              so = sr
            endif

c if ustar is "zero", average left and right states
c     added by dmartin, 11 Oct 2007
            if (abs(ustar).lt.SMALLNUMBER) then
               so = half*(sl+sr)
            endif

            Wgdnv(CHF_IX[i;j;k],n) = so

c don't need floor for this simple problem
c           Wgdnv(CHF_IX[i;j;k],n) = max(Wgdnv(CHF_IX[i;j;k],n) ,smallr)
          CHF_ENDDO
        end do

        return
        end

        subroutine QUASILINEARUPDATE(
     &    CHF_FRA[AdWdx],
     &    CHF_CONST_FRA[WHalf],
     &    CHF_CONST_FRA1[cellVel],
     &    CHF_CONST_REAL[scale],
     &    CHF_CONST_INT[idir],
     &    CHF_BOX[box])

        integer CHF_DDECL[i;j;k]
        integer CHF_DDECL[ii;jj;kk]
        integer n

        CHF_DTERM[
        ii = CHF_ID(idir,0);
        jj = CHF_ID(idir,1);
        kk = CHF_ID(idir,2)]

        do n=0, CHF_NCOMP[AdWdx]-1
          CHF_MULTIDO[box;i;j;k]
            AdWdx(CHF_IX[i;j;k],n) = scale * cellVel(CHF_IX[i;j;k]) *
     &        (WHalf(CHF_IX[i+ii;j+jj;k+kk],n) - WHalf(CHF_IX[i;j;k],n))
          CHF_ENDDO
        end do

        return
        end
