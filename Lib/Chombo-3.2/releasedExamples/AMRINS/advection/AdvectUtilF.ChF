C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"


c -------------------------------------------------------------
c  this subroutine computes vel*(dS/d[xyz]) for the advection
c  update.  more specifically, we increment uDelS with vel*dS/d[xyz]
c  in the direction dir
c
c INPUTS/OUTPUTS:
c uDotDelS  <=> vel*dS/d[xyz]
c Sedge   => edge-centered S
c vel     => cell-centered advection velocity
c gridBox => valid domain
c dx      => grid spacing
c dir     => direction
c --------------------------------------------------------------
      subroutine UDELS(CHF_FRA[uDotDelS],
     &                 CHF_FRA[sEdge],
     &                 CHF_FRA[vel],
     &                 CHF_BOX[gridBox],
     &                 CHF_REAL[dx],
     &                 CHF_INT[dir])

c ::: local variables
      integer CHF_DDECL[i;j;k], comp, numcomp
      integer CHF_DDECL[ii;jj;kk]
      REAL_T oneOnDx

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir)]

      oneOnDx = 1.0/dx
      numcomp = CHF_NCOMP[uDotDelS]

c ::: loop over velocity components

      do comp = 0, numcomp-1

         CHF_MULTIDO[gridBox; i;j;k]

            uDotDelS(CHF_IX[i;j;k], comp) = uDotDelS(CHF_IX[i;j;k],comp)
     &             +vel(CHF_IX[i;j;k],dir)*oneOnDx*
     &                     (sEdge(CHF_IX[i+ii;j+jj;k+kk],comp)
     &                     -sEdge(CHF_IX[i;j;k],comp))

         CHF_ENDDO

      enddo

      return
      end

      subroutine ADUALLSPEED(CHF_FRA[uDotDelS],
     &                       CHF_FRA[sEdge],
     &                       CHF_CONST_FRA[upEdge],
     &                       CHF_FRA[vel],
     &                       CHF_CONST_FRA[upCenter],
     &                       CHF_BOX[gridBox],
     &                       CHF_REAL[dx],
     &                       CHF_INT[dir])

c ::: local variables
      integer CHF_DDECL[i;j;k], comp, numcomp
      integer CHF_DDECL[ii;jj;kk]
      REAL_T oneOnDx

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir)]

      oneOnDx = 1.0/dx
      numcomp = CHF_NCOMP[uDotDelS]

c ::: loop over velocity components

      do comp = 0, numcomp-1

         CHF_MULTIDO[gridBox; i;j;k]

            uDotDelS(CHF_IX[i;j;k], comp) = uDotDelS(CHF_IX[i;j;k],comp)
     &             +vel(CHF_IX[i;j;k],dir)*oneOnDx*
     &                     (sEdge(CHF_IX[i+ii;j+jj;k+kk],comp)
     &                     -sEdge(CHF_IX[i;j;k],comp))
     &             -upCenter(CHF_IX[i;j;k],dir)*oneOnDx
     & *(upEdge(CHF_IX[i+ii;j+jj;k+kk],comp)-upEdge(CHF_IX[i;j;k],comp))

         CHF_ENDDO

      enddo

      return
      end
