C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

C
C     Implement solid wall conserved variable boundary fluxes and primitive
C     variable boundary slopes
C

#include "CONSTANTS.H"

        subroutine SOLIDBCF(
     &    CHF_FRA[Wgdnv],
     &    CHF_CONST_FRA[Wextrap],
     &    CHF_CONST_REAL[bcVal],
     &    CHF_CONST_INT[lohisign],
     &    CHF_CONST_REAL[dx],
     &    CHF_CONST_INT[dir],
     &    CHF_BOX[box])

        integer CHF_DDECL[i;j;k]
        integer n

c loop over components
        do n=0, CHF_NCOMP[Wgdnv]-1
          CHF_MULTIDO[box;i;j;k]
            Wgdnv(CHF_IX[i;j;k],n) = bcVal
          CHF_ENDDO
        enddo

        return
        end

        subroutine SOLIDEXTRAPBCF(
     &    CHF_FRA[Wgdnv],
     &    CHF_CONST_FRA[Wextrap],
     &    CHF_CONST_REAL[bcVal],
     &    CHF_CONST_INT[lohisign],
     &    CHF_CONST_REAL[dx],
     &    CHF_CONST_INT[dir],
     &    CHF_BOX[box])

        integer CHF_DDECL[i;j;k]
        integer n
        integer CHF_DDECL[ii;jj;kk]

        CHF_DTERM[
        ii = -lohisign*CHF_ID(dir,0);
        jj = -lohisign*CHF_ID(dir,1);
        kk = -lohisign*CHF_ID(dir,2)]

c loop over components
        if (lohisign.eq.1) then

           do n=0, CHF_NCOMP[Wgdnv]-1
              CHF_MULTIDO[box;i;j;k]
              Wgdnv(CHF_IX[i;j;k],n) =
     &             (three*Wextrap(CHF_IX[i+ii;j+jj;k+kk],n) -
     &             Wextrap(CHF_IX[i+2*ii;j+2*jj;k+2*kk],n)) / two
              CHF_ENDDO
           enddo

        elseif (lohisign.eq.-1) then

           do n=0, CHF_NCOMP[Wgdnv]-1
              CHF_MULTIDO[box;i;j;k]
              Wgdnv(CHF_IX[i;j;k],n) =
     &             (three*Wextrap(CHF_IX[i;j;k],n) -
     &             Wextrap(CHF_IX[i+ii;j+jj;k+kk],n)) / two
              CHF_ENDDO
           enddo

        else

           WRITE(*,*) 'SOLIDF/SOLIDEXTRAPBCF: lohisign should ',
     &          ' never be something else than -1 or 1'
           call MAYDAY_ERROR()

        endif

        return
        end

        subroutine SLOPEBCSF(
     &    CHF_FRA[dW],
     &    CHF_CONST_FRA[W],
     &    CHF_CONST_REAL[dx],
     &    CHF_CONST_INT[dir],
     &    CHF_CONST_REAL[loVal],
     &    CHF_BOX[loBox],
     &    CHF_CONST_INT[hasLo],
     &    CHF_CONST_REAL[hiVal],
     &    CHF_BOX[hiBox],
     &    CHF_CONST_INT[hasHi])

        integer CHF_DDECL[i;j;k]
        integer spacedim, n

        spacedim = CH_SPACEDIM

        do n=0, CHF_NCOMP[dW]-1
        if (hasLo .eq. 1) then
          CHF_MULTIDO[loBox;i;j;k]
            dW(CHF_IX[i;j;k],n) = loVal
          CHF_ENDDO
        endif

        if (hasHi .eq. 1) then
          CHF_MULTIDO[hiBox;i;j;k]
            dW(CHF_IX[i;j;k],n) = hiVal
          CHF_ENDDO
        endif

        enddo

        return
        end
