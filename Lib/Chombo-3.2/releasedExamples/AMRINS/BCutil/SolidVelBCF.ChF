C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

C
C     Implement solid wall conserved variable boundary fluxes and primitive
C     variable boundary slopes
C

#include "CONSTANTS.H"

        subroutine SOLIDVELBCF(
     &                         CHF_FRA[Wgdnv],
     &                         CHF_CONST_FRA[Wextrap],
     &                         CHF_CONST_REAL[bcVal],
     &                         CHF_CONST_INT[lohisign],
     &                         CHF_CONST_REAL[dx],
     &                         CHF_CONST_INT[dir],
     &                         CHF_BOX[box])

        integer CHF_DDECL[i;j;k]
        integer CHF_DDECL[ii;jj;kk]
        integer n

c helpers for doing extrapolation
        CHF_DTERM[
        ii = lohisign*CHF_ID(dir,0);
        jj = lohisign*CHF_ID(dir,1);
        kk = lohisign*CHF_ID(dir,2) ]

c     loop over copmonents
        do n=0, CHF_NCOMP[Wgdnv]-1

c for this BC, set normal component (n = dir) to bcVal,
c use extrapolation for tangential components.
c put if statement outside do loop

           if (n.eq.dir) then
              CHF_MULTIDO[box;i;j;k]
                Wgdnv(CHF_IX[i;j;k],n) = bcVal
              CHF_ENDDO
           else
              CHF_MULTIDO[box;i;j;k]
                Wgdnv(CHF_IX[i;j;k],n) =
     &             two*Wgdnv(CHF_IX[i-  ii;j-  jj;k-  kk],n)
     &               - Wgdnv(CHF_IX[i-2*ii;j-2*jj;k-2*kk],n)
              CHF_ENDDO
           endif
        enddo

        return
        end
