C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

        subroutine getphipoint(
     &    chf_real[phi],
     &    chf_const_realvect[freq],
     &    chf_const_realvect[x])

c
c       set phi to a trig function at the spatial coordinates
c
        phi = CHF_DTERM[sin(freq(0)*x(0));
     &                * sin(freq(1)*x(1));
     &                * sin(freq(2)*x(2))]


c     debug
c        phi = x(0)*x(0) + x(1)*x(1)
c        phi = x(0)*x(0)
c     end debug

        return
        end


        subroutine getlofphi(
     &    chf_fra1[lofphi],
     &    chf_const_realvect[freq],
     &    chf_const_realvect[dx],
     &    chf_const_realvect[problo],
     &    chf_const_realvect[probhi],
     &    chf_const_real[aCoef],
     &    chf_const_real[bCoef],
     &    chf_box[box])

        integer chf_ddecl[i;j;k]

        real_t x(0:CH_SPACEDIM-1)
c
c       set lofphi to l(a trig function at the spatial coordinates)
c
        chf_multido[box;i;j;k]
          chf_dterm[
          x(0) = (i+half)*dx(0) + problo(0);
          x(1) = (j+half)*dx(1) + problo(1);
          x(2) = (k+half)*dx(2) + problo(2)]

          call getlofphipoint(lofphi(chf_ix[i;j;k]),freq,x,aCoef,bCoef)
        chf_enddo

        return
        end


        subroutine getlofphipoint(
     &    chf_real[lofphi],
     &    chf_const_realvect[freq],
     &    chf_const_realvect[x],
     &    chf_const_real[aCoefmult],
     &    chf_const_real[bCoefmult])

        integer dir
        real_t fac,phi, temp
c
c       set lofphi to l(a trig function at the spatial coordinates)
c       aCoef = aCoefmult*x
c       bCoef = bCoefmult*(x+y+z)
c
        fac = -(chf_dterm[freq(0)**2;
     &                  + freq(1)**2;
     &                  + freq(2)**2])

        fac = fac *(CHF_DTERM[x(0); +x(1); +x(2)])

        phi = (chf_dterm[sin(freq(0)*x(0));
     &                 * sin(freq(1)*x(1));
     &                 * sin(freq(2)*x(2))])

        lofphi = fac*phi

        temp = 0.0
        do dir=0, CH_SPACEDIM-1
           if (dir.eq.0) then
              temp = freq(0)*CHF_DTERM[cos(freq(0)*x(0));
     &                                *sin(freq(1)*x(1));
     &                                *sin(freq(2)*x(2))]
#if CH_SPACEDIM > 1
           else if (dir.eq.1) then
              temp = freq(1)*CHF_DTERM[sin(freq(0)*x(0));
     &                                *cos(freq(1)*x(1));
     &                                *sin(freq(2)*x(2))]
#if CH_SPACEDIM > 2
           else if (dir.eq.2) then
              temp = freq(2)*CHF_DTERM[sin(freq(0)*x(0));
     &                                *sin(freq(1)*x(1));
     &                                *cos(freq(2)*x(2))]
#endif
#endif
           endif

           lofphi = lofphi + temp
        enddo


        lofphi = aCoefmult*x(0)*phi + bCoefmult*lofphi

c     debug
c        lofphi = four
c        lofphi = two

c     end debug
        return
        end


        subroutine getgradphipoint(
     &    chf_realvect[gradphi],
     &    chf_const_realvect[freq],
     &    chf_const_realvect[x])

c       set gradphi to grad(a trig function at the spatial coordinates)
c
        chf_dselect[
        gradphi(0) = freq(0) * cos(freq(0)*x(0))                                       ;

        gradphi(0) = freq(0) * cos(freq(0)*x(0)) * sin(freq(1)*x(1))
        gradphi(1) = freq(1) * sin(freq(0)*x(0)) * cos(freq(1)*x(1))                   ;

        gradphi(0) = freq(0) * cos(freq(0)*x(0)) * sin(freq(1)*x(1)) * sin(freq(2)*x(2))
        gradphi(1) = freq(1) * sin(freq(0)*x(0)) * cos(freq(1)*x(1)) * sin(freq(2)*x(2))
        gradphi(2) = freq(2) * sin(freq(0)*x(0)) * sin(freq(1)*x(1)) * cos(freq(2)*x(2))]


c     debug
c        gradphi(0) = two*x(0)
c       gradphi(1) = two*x(1)
c        gradphi(1) = zero
c     end debug
        return
        end



