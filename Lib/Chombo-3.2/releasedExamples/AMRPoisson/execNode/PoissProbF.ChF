C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

C     --------------------------------------------------------------
C     subroutine GETRHSPOIS
C     initialize rhs
C
C     INPUTS (=>),  OUTPUTS(<=):
C     rhs      <=    right-hand side
C     box       =>   geometric extent of initializtion
C     rno       =>   radius input to solution
C     rhono     =>   coefficient of rhs
C     iprob     =>   form of rhs to use
C     dx        =>   mesh spacing
C
C     dtgraves nov 16, 1999
C     --------------------------------------------------------------
      subroutine GETRHSPOIS(
     &     CHF_FRA[rhs],
     $     CHF_BOX[box],
     $     CHF_BOX[domain],
     $     CHF_CONST_REAL[dx],
     $     CHF_CONST_REAL[rhono],
     $     CHF_CONST_REAL[rno],
     $     CHF_CONST_INT[iprob])

      integer CHF_DDECL[i;j;k]
      REAL_T CHF_DDECL[xi;yi;zi]
      REAL_T rad
      REAL_T xloc, xlo,xhi
      integer nv
      REAL_T rhsexact, signComp

      xlo = CHF_LBOUND[domain; 0]*dx
      xhi =(CHF_UBOUND[domain; 0]+1)*dx
      xloc = half*(xlo + xhi)
c   role of signComp is to switch signs on different components of RHS
      signComp = -one
c      signComp = one

      if (iprob.ne.2) then
         do nv = 0, CHF_NCOMP[rhs] - 1
            signComp = -signComp

            CHF_MULTIDO[box; i; j; k]


            CHF_DTERM[
            xi = dx*(i+0.5) - xloc;
            yi = dx*(j+0.5) - xloc;
            zi = dx*(k+0.5) - xloc]

            rad = sqrt(
     $           CHF_DTERM[xi*xi;+ yi*yi;+ zi*zi]
     $           )
            call getrhsexact(rhono, rno, rad, iprob, rhsexact)
            rhs(CHF_IX[i;j;k],nv) =  signComp*rhsexact

            CHF_ENDDO
         enddo
      else
c      test for periodic case
         do nv = 0, CHF_NCOMP[rhs] - 1
            signComp = -signComp

            CHF_MULTIDO[box; i; j; k]


            CHF_DTERM[
            xi = two*Pi*dx*(i+0.5);
            yi = two*Pi*dx*(j+0.5);
            zi = two*Pi*dx*(k+0.5);]

            rhs(CHF_IX[i;j;k],nv) =CHF_DTERM[sin(xi);+ sin(yi);+ sin(zi)]
            rhs(CHF_IX[i;j;k],nv) = signComp*rhs(CHF_IX[i;j;k],nv)


            CHF_ENDDO
         enddo
      endif

      return
      end

c     =================================================-
      subroutine getrhsexact(CHF_REAL[rhono],
     &     CHF_CONST_REAL[rno],
     &     CHF_CONST_REAL[rad],
     &     CHF_CONST_INT[iprob],
     &     CHF_REAL[rhsexact])

      REAL_T  rhs, radrat

      radrat = rad/rno
      if(iprob.eq.0) then
         if(rad .lt. rno) then
            rhs = rhono
         else
            rhs = zero
         endif
      elseif(iprob.eq.1) then
         if(rad .lt. rno) then
            rhs = rhono*(two*radrat**3 - three*radrat**2 + 1)
         else
            rhs = zero
         endif
      else
         call MAYDAY_ERROR()
c         print*, 'getrhsexact: bogus iprob'
c         stop
      endif
      rhsexact = rhs

      return
      end

